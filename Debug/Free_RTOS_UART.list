
Free_RTOS_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000939c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800954c  0800954c  0001954c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095ec  080095ec  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080095ec  080095ec  000195ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095f4  080095f4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095f4  080095f4  000195f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095f8  080095f8  000195f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080095fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009310  20000010  0800960c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009320  0800960c  00029320  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025799  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004326  00000000  00000000  000457d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001fe0  00000000  00000000  00049b00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e10  00000000  00000000  0004bae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027f2f  00000000  00000000  0004d8f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019424  00000000  00000000  0007581f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000efdbb  00000000  00000000  0008ec43  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017e9fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000892c  00000000  00000000  0017ea7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009534 	.word	0x08009534

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08009534 	.word	0x08009534

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr

080004fe <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80004fe:	b480      	push	{r7}
 8000500:	b083      	sub	sp, #12
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
 8000506:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000508:	bf00      	nop
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
	...

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000528:	f001 f976 	bl	8001818 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 f838 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f000 fb4a 	bl	8000bc8 <MX_GPIO_Init>
  MX_CRC_Init();
 8000534:	f000 f8b8 	bl	80006a8 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000538:	f000 f8ca 	bl	80006d0 <MX_DMA2D_Init>
  MX_FMC_Init();
 800053c:	f000 faf4 	bl	8000b28 <MX_FMC_Init>
  MX_I2C3_Init();
 8000540:	f000 f8f8 	bl	8000734 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000544:	f000 f936 	bl	80007b4 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000548:	f000 f9e8 	bl	800091c <MX_SPI5_Init>
  MX_TIM1_Init();
 800054c:	f000 fa1c 	bl	8000988 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000550:	f000 fa94 	bl	8000a7c <MX_USART1_UART_Init>
  MX_USB_OTG_HS_HCD_Init();
 8000554:	f000 fabc 	bl	8000ad0 <MX_USB_OTG_HS_HCD_Init>
  MX_UART5_Init();
 8000558:	f000 fa66 	bl	8000a28 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800055c:	f006 fa44 	bl	80069e8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask_LED */
  defaultTask_LEDHandle = osThreadNew(StartDefaultTask_LED, NULL, &defaultTask_LED_attributes);
 8000560:	4a09      	ldr	r2, [pc, #36]	; (8000588 <main+0x64>)
 8000562:	2100      	movs	r1, #0
 8000564:	4809      	ldr	r0, [pc, #36]	; (800058c <main+0x68>)
 8000566:	f006 faa9 	bl	8006abc <osThreadNew>
 800056a:	4602      	mov	r2, r0
 800056c:	4b08      	ldr	r3, [pc, #32]	; (8000590 <main+0x6c>)
 800056e:	601a      	str	r2, [r3, #0]

  /* creation of myTask_UART_Tx */
  myTask_UART_TxHandle = osThreadNew(StartTask_UART_Tx, NULL, &myTask_UART_Tx_attributes);
 8000570:	4a08      	ldr	r2, [pc, #32]	; (8000594 <main+0x70>)
 8000572:	2100      	movs	r1, #0
 8000574:	4808      	ldr	r0, [pc, #32]	; (8000598 <main+0x74>)
 8000576:	f006 faa1 	bl	8006abc <osThreadNew>
 800057a:	4602      	mov	r2, r0
 800057c:	4b07      	ldr	r3, [pc, #28]	; (800059c <main+0x78>)
 800057e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000580:	f006 fa66 	bl	8006a50 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000584:	e7fe      	b.n	8000584 <main+0x60>
 8000586:	bf00      	nop
 8000588:	0800958c 	.word	0x0800958c
 800058c:	08000de9 	.word	0x08000de9
 8000590:	200091e4 	.word	0x200091e4
 8000594:	080095b0 	.word	0x080095b0
 8000598:	08000e09 	.word	0x08000e09
 800059c:	20008d94 	.word	0x20008d94

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b0a0      	sub	sp, #128	; 0x80
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80005aa:	2230      	movs	r2, #48	; 0x30
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f008 ffb7 	bl	8009522 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2230      	movs	r2, #48	; 0x30
 80005ca:	2100      	movs	r1, #0
 80005cc:	4618      	mov	r0, r3
 80005ce:	f008 ffa8 	bl	8009522 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	4b32      	ldr	r3, [pc, #200]	; (80006a0 <SystemClock_Config+0x100>)
 80005d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005da:	4a31      	ldr	r2, [pc, #196]	; (80006a0 <SystemClock_Config+0x100>)
 80005dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e0:	6413      	str	r3, [r2, #64]	; 0x40
 80005e2:	4b2f      	ldr	r3, [pc, #188]	; (80006a0 <SystemClock_Config+0x100>)
 80005e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005ee:	2300      	movs	r3, #0
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	4b2c      	ldr	r3, [pc, #176]	; (80006a4 <SystemClock_Config+0x104>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005fa:	4a2a      	ldr	r2, [pc, #168]	; (80006a4 <SystemClock_Config+0x104>)
 80005fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000600:	6013      	str	r3, [r2, #0]
 8000602:	4b28      	ldr	r3, [pc, #160]	; (80006a4 <SystemClock_Config+0x104>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800060e:	2301      	movs	r3, #1
 8000610:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000612:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000616:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000618:	2302      	movs	r3, #2
 800061a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800061c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000620:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000622:	2304      	movs	r3, #4
 8000624:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000626:	2348      	movs	r3, #72	; 0x48
 8000628:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800062a:	2302      	movs	r3, #2
 800062c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800062e:	2303      	movs	r3, #3
 8000630:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000632:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000636:	4618      	mov	r0, r3
 8000638:	f003 fda6 	bl	8004188 <HAL_RCC_OscConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000642:	f000 fc07 	bl	8000e54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000646:	230f      	movs	r3, #15
 8000648:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064a:	2302      	movs	r3, #2
 800064c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000656:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800065c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000660:	2102      	movs	r1, #2
 8000662:	4618      	mov	r0, r3
 8000664:	f004 f800 	bl	8004668 <HAL_RCC_ClockConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800066e:	f000 fbf1 	bl	8000e54 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000672:	2308      	movs	r3, #8
 8000674:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000676:	2332      	movs	r3, #50	; 0x32
 8000678:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800067a:	2302      	movs	r3, #2
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800067e:	2300      	movs	r3, #0
 8000680:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	4618      	mov	r0, r3
 8000688:	f004 fa12 	bl	8004ab0 <HAL_RCCEx_PeriphCLKConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000692:	f000 fbdf 	bl	8000e54 <Error_Handler>
  }
}
 8000696:	bf00      	nop
 8000698:	3780      	adds	r7, #128	; 0x80
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000

080006a8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_CRC_Init+0x20>)
 80006ae:	4a07      	ldr	r2, [pc, #28]	; (80006cc <MX_CRC_Init+0x24>)
 80006b0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_CRC_Init+0x20>)
 80006b4:	f001 f9f6 	bl	8001aa4 <HAL_CRC_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006be:	f000 fbc9 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20008df0 	.word	0x20008df0
 80006cc:	40023000 	.word	0x40023000

080006d0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80006d4:	4b15      	ldr	r3, [pc, #84]	; (800072c <MX_DMA2D_Init+0x5c>)
 80006d6:	4a16      	ldr	r2, [pc, #88]	; (8000730 <MX_DMA2D_Init+0x60>)
 80006d8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80006da:	4b14      	ldr	r3, [pc, #80]	; (800072c <MX_DMA2D_Init+0x5c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80006e0:	4b12      	ldr	r3, [pc, #72]	; (800072c <MX_DMA2D_Init+0x5c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_DMA2D_Init+0x5c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_DMA2D_Init+0x5c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_DMA2D_Init+0x5c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_DMA2D_Init+0x5c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <MX_DMA2D_Init+0x5c>)
 8000700:	2200      	movs	r2, #0
 8000702:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000704:	4809      	ldr	r0, [pc, #36]	; (800072c <MX_DMA2D_Init+0x5c>)
 8000706:	f001 f9e9 	bl	8001adc <HAL_DMA2D_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000710:	f000 fba0 	bl	8000e54 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000714:	2101      	movs	r1, #1
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <MX_DMA2D_Init+0x5c>)
 8000718:	f001 fb3a 	bl	8001d90 <HAL_DMA2D_ConfigLayer>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000722:	f000 fb97 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20009228 	.word	0x20009228
 8000730:	4002b000 	.word	0x4002b000

08000734 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000738:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <MX_I2C3_Init+0x74>)
 800073a:	4a1c      	ldr	r2, [pc, #112]	; (80007ac <MX_I2C3_Init+0x78>)
 800073c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800073e:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <MX_I2C3_Init+0x74>)
 8000740:	4a1b      	ldr	r2, [pc, #108]	; (80007b0 <MX_I2C3_Init+0x7c>)
 8000742:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000744:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <MX_I2C3_Init+0x74>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800074a:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_I2C3_Init+0x74>)
 800074c:	2200      	movs	r2, #0
 800074e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000750:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <MX_I2C3_Init+0x74>)
 8000752:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000756:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000758:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <MX_I2C3_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800075e:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_I2C3_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000764:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <MX_I2C3_Init+0x74>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800076a:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_I2C3_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000770:	480d      	ldr	r0, [pc, #52]	; (80007a8 <MX_I2C3_Init+0x74>)
 8000772:	f002 ffed 	bl	8003750 <HAL_I2C_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800077c:	f000 fb6a 	bl	8000e54 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000780:	2100      	movs	r1, #0
 8000782:	4809      	ldr	r0, [pc, #36]	; (80007a8 <MX_I2C3_Init+0x74>)
 8000784:	f003 f91c 	bl	80039c0 <HAL_I2CEx_ConfigAnalogFilter>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800078e:	f000 fb61 	bl	8000e54 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000792:	2100      	movs	r1, #0
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_I2C3_Init+0x74>)
 8000796:	f003 f94f 	bl	8003a38 <HAL_I2CEx_ConfigDigitalFilter>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80007a0:	f000 fb58 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20008d40 	.word	0x20008d40
 80007ac:	40005c00 	.word	0x40005c00
 80007b0:	000186a0 	.word	0x000186a0

080007b4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b09a      	sub	sp, #104	; 0x68
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80007ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007be:	2234      	movs	r2, #52	; 0x34
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f008 fead 	bl	8009522 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80007c8:	463b      	mov	r3, r7
 80007ca:	2234      	movs	r2, #52	; 0x34
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f008 fea7 	bl	8009522 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80007d4:	4b4f      	ldr	r3, [pc, #316]	; (8000914 <MX_LTDC_Init+0x160>)
 80007d6:	4a50      	ldr	r2, [pc, #320]	; (8000918 <MX_LTDC_Init+0x164>)
 80007d8:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80007da:	4b4e      	ldr	r3, [pc, #312]	; (8000914 <MX_LTDC_Init+0x160>)
 80007dc:	2200      	movs	r2, #0
 80007de:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80007e0:	4b4c      	ldr	r3, [pc, #304]	; (8000914 <MX_LTDC_Init+0x160>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80007e6:	4b4b      	ldr	r3, [pc, #300]	; (8000914 <MX_LTDC_Init+0x160>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80007ec:	4b49      	ldr	r3, [pc, #292]	; (8000914 <MX_LTDC_Init+0x160>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80007f2:	4b48      	ldr	r3, [pc, #288]	; (8000914 <MX_LTDC_Init+0x160>)
 80007f4:	2209      	movs	r2, #9
 80007f6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80007f8:	4b46      	ldr	r3, [pc, #280]	; (8000914 <MX_LTDC_Init+0x160>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80007fe:	4b45      	ldr	r3, [pc, #276]	; (8000914 <MX_LTDC_Init+0x160>)
 8000800:	221d      	movs	r2, #29
 8000802:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000804:	4b43      	ldr	r3, [pc, #268]	; (8000914 <MX_LTDC_Init+0x160>)
 8000806:	2203      	movs	r2, #3
 8000808:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 800080a:	4b42      	ldr	r3, [pc, #264]	; (8000914 <MX_LTDC_Init+0x160>)
 800080c:	f240 120d 	movw	r2, #269	; 0x10d
 8000810:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000812:	4b40      	ldr	r3, [pc, #256]	; (8000914 <MX_LTDC_Init+0x160>)
 8000814:	f240 1243 	movw	r2, #323	; 0x143
 8000818:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 800081a:	4b3e      	ldr	r3, [pc, #248]	; (8000914 <MX_LTDC_Init+0x160>)
 800081c:	f240 1217 	movw	r2, #279	; 0x117
 8000820:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000822:	4b3c      	ldr	r3, [pc, #240]	; (8000914 <MX_LTDC_Init+0x160>)
 8000824:	f240 1247 	movw	r2, #327	; 0x147
 8000828:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800082a:	4b3a      	ldr	r3, [pc, #232]	; (8000914 <MX_LTDC_Init+0x160>)
 800082c:	2200      	movs	r2, #0
 800082e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000832:	4b38      	ldr	r3, [pc, #224]	; (8000914 <MX_LTDC_Init+0x160>)
 8000834:	2200      	movs	r2, #0
 8000836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800083a:	4b36      	ldr	r3, [pc, #216]	; (8000914 <MX_LTDC_Init+0x160>)
 800083c:	2200      	movs	r2, #0
 800083e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000842:	4834      	ldr	r0, [pc, #208]	; (8000914 <MX_LTDC_Init+0x160>)
 8000844:	f003 f938 	bl	8003ab8 <HAL_LTDC_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800084e:	f000 fb01 	bl	8000e54 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 240;
 8000856:	23f0      	movs	r3, #240	; 0xf0
 8000858:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 320;
 800085e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000862:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000864:	2302      	movs	r3, #2
 8000866:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8000868:	23ff      	movs	r3, #255	; 0xff
 800086a:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000870:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000874:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000876:	2307      	movs	r3, #7
 8000878:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xD0000000;
 800087a:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800087e:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 240;
 8000880:	23f0      	movs	r3, #240	; 0xf0
 8000882:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 320;
 8000884:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000888:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000896:	2300      	movs	r3, #0
 8000898:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800089c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008a0:	2200      	movs	r2, #0
 80008a2:	4619      	mov	r1, r3
 80008a4:	481b      	ldr	r0, [pc, #108]	; (8000914 <MX_LTDC_Init+0x160>)
 80008a6:	f003 fa99 	bl	8003ddc <HAL_LTDC_ConfigLayer>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_LTDC_Init+0x100>
  {
    Error_Handler();
 80008b0:	f000 fad0 	bl	8000e54 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80008cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d0:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80008d2:	2305      	movs	r3, #5
 80008d4:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80008da:	2300      	movs	r3, #0
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80008f4:	463b      	mov	r3, r7
 80008f6:	2201      	movs	r2, #1
 80008f8:	4619      	mov	r1, r3
 80008fa:	4806      	ldr	r0, [pc, #24]	; (8000914 <MX_LTDC_Init+0x160>)
 80008fc:	f003 fa6e 	bl	8003ddc <HAL_LTDC_ConfigLayer>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_LTDC_Init+0x156>
  {
    Error_Handler();
 8000906:	f000 faa5 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	3768      	adds	r7, #104	; 0x68
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20008df8 	.word	0x20008df8
 8000918:	40016800 	.word	0x40016800

0800091c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000920:	4b17      	ldr	r3, [pc, #92]	; (8000980 <MX_SPI5_Init+0x64>)
 8000922:	4a18      	ldr	r2, [pc, #96]	; (8000984 <MX_SPI5_Init+0x68>)
 8000924:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000926:	4b16      	ldr	r3, [pc, #88]	; (8000980 <MX_SPI5_Init+0x64>)
 8000928:	f44f 7282 	mov.w	r2, #260	; 0x104
 800092c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800092e:	4b14      	ldr	r3, [pc, #80]	; (8000980 <MX_SPI5_Init+0x64>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <MX_SPI5_Init+0x64>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_SPI5_Init+0x64>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_SPI5_Init+0x64>)
 8000942:	2200      	movs	r2, #0
 8000944:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_SPI5_Init+0x64>)
 8000948:	f44f 7200 	mov.w	r2, #512	; 0x200
 800094c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_SPI5_Init+0x64>)
 8000950:	2218      	movs	r2, #24
 8000952:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000954:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <MX_SPI5_Init+0x64>)
 8000956:	2200      	movs	r2, #0
 8000958:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_SPI5_Init+0x64>)
 800095c:	2200      	movs	r2, #0
 800095e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000960:	4b07      	ldr	r3, [pc, #28]	; (8000980 <MX_SPI5_Init+0x64>)
 8000962:	2200      	movs	r2, #0
 8000964:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_SPI5_Init+0x64>)
 8000968:	220a      	movs	r2, #10
 800096a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800096c:	4804      	ldr	r0, [pc, #16]	; (8000980 <MX_SPI5_Init+0x64>)
 800096e:	f004 fa91 	bl	8004e94 <HAL_SPI_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000978:	f000 fa6c 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20008d98 	.word	0x20008d98
 8000984:	40015000 	.word	0x40015000

08000988 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800098e:	f107 0308 	add.w	r3, r7, #8
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800099c:	463b      	mov	r3, r7
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009a4:	4b1e      	ldr	r3, [pc, #120]	; (8000a20 <MX_TIM1_Init+0x98>)
 80009a6:	4a1f      	ldr	r2, [pc, #124]	; (8000a24 <MX_TIM1_Init+0x9c>)
 80009a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009aa:	4b1d      	ldr	r3, [pc, #116]	; (8000a20 <MX_TIM1_Init+0x98>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b0:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <MX_TIM1_Init+0x98>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009b6:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <MX_TIM1_Init+0x98>)
 80009b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009be:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <MX_TIM1_Init+0x98>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009c4:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <MX_TIM1_Init+0x98>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <MX_TIM1_Init+0x98>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009d0:	4813      	ldr	r0, [pc, #76]	; (8000a20 <MX_TIM1_Init+0x98>)
 80009d2:	f004 fac3 	bl	8004f5c <HAL_TIM_Base_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80009dc:	f000 fa3a 	bl	8000e54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009e6:	f107 0308 	add.w	r3, r7, #8
 80009ea:	4619      	mov	r1, r3
 80009ec:	480c      	ldr	r0, [pc, #48]	; (8000a20 <MX_TIM1_Init+0x98>)
 80009ee:	f004 fc0c 	bl	800520a <HAL_TIM_ConfigClockSource>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80009f8:	f000 fa2c 	bl	8000e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009fc:	2300      	movs	r3, #0
 80009fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a00:	2300      	movs	r3, #0
 8000a02:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a04:	463b      	mov	r3, r7
 8000a06:	4619      	mov	r1, r3
 8000a08:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_TIM1_Init+0x98>)
 8000a0a:	f004 fe17 	bl	800563c <HAL_TIMEx_MasterConfigSynchronization>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a14:	f000 fa1e 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a18:	bf00      	nop
 8000a1a:	3718      	adds	r7, #24
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	200091e8 	.word	0x200091e8
 8000a24:	40010000 	.word	0x40010000

08000a28 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <MX_UART5_Init+0x4c>)
 8000a2e:	4a12      	ldr	r2, [pc, #72]	; (8000a78 <MX_UART5_Init+0x50>)
 8000a30:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <MX_UART5_Init+0x4c>)
 8000a34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a38:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <MX_UART5_Init+0x4c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <MX_UART5_Init+0x4c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000a46:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <MX_UART5_Init+0x4c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <MX_UART5_Init+0x4c>)
 8000a4e:	220c      	movs	r2, #12
 8000a50:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a52:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <MX_UART5_Init+0x4c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <MX_UART5_Init+0x4c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000a5e:	4805      	ldr	r0, [pc, #20]	; (8000a74 <MX_UART5_Init+0x4c>)
 8000a60:	f004 fe7c 	bl	800575c <HAL_UART_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000a6a:	f000 f9f3 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20008ea0 	.word	0x20008ea0
 8000a78:	40005000 	.word	0x40005000

08000a7c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a80:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <MX_USART1_UART_Init+0x4c>)
 8000a82:	4a12      	ldr	r2, [pc, #72]	; (8000acc <MX_USART1_UART_Init+0x50>)
 8000a84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <MX_USART1_UART_Init+0x4c>)
 8000a88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <MX_USART1_UART_Init+0x4c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <MX_USART1_UART_Init+0x4c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <MX_USART1_UART_Init+0x4c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000aa0:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <MX_USART1_UART_Init+0x4c>)
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <MX_USART1_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <MX_USART1_UART_Init+0x4c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ab2:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <MX_USART1_UART_Init+0x4c>)
 8000ab4:	f004 fe52 	bl	800575c <HAL_UART_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000abe:	f000 f9c9 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20008ee0 	.word	0x20008ee0
 8000acc:	40011000 	.word	0x40011000

08000ad0 <MX_USB_OTG_HS_HCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_HCD_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000ad6:	4a13      	ldr	r2, [pc, #76]	; (8000b24 <MX_USB_OTG_HS_HCD_Init+0x54>)
 8000ad8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000adc:	220c      	movs	r2, #12
 8000ade:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000aee:	2202      	movs	r2, #2
 8000af0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000b0c:	f001 fbb0 	bl	8002270 <HAL_HCD_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_USB_OTG_HS_HCD_Init+0x4a>
  {
    Error_Handler();
 8000b16:	f000 f99d 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20008f20 	.word	0x20008f20
 8000b24:	40040000 	.word	0x40040000

08000b28 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
 8000b3c:	615a      	str	r2, [r3, #20]
 8000b3e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000b40:	4b1f      	ldr	r3, [pc, #124]	; (8000bc0 <MX_FMC_Init+0x98>)
 8000b42:	4a20      	ldr	r2, [pc, #128]	; (8000bc4 <MX_FMC_Init+0x9c>)
 8000b44:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000b46:	4b1e      	ldr	r3, [pc, #120]	; (8000bc0 <MX_FMC_Init+0x98>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000b4c:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <MX_FMC_Init+0x98>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000b52:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <MX_FMC_Init+0x98>)
 8000b54:	2204      	movs	r2, #4
 8000b56:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000b58:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <MX_FMC_Init+0x98>)
 8000b5a:	2210      	movs	r2, #16
 8000b5c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000b5e:	4b18      	ldr	r3, [pc, #96]	; (8000bc0 <MX_FMC_Init+0x98>)
 8000b60:	2240      	movs	r2, #64	; 0x40
 8000b62:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000b64:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <MX_FMC_Init+0x98>)
 8000b66:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000b6a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000b6c:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <MX_FMC_Init+0x98>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000b72:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <MX_FMC_Init+0x98>)
 8000b74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b78:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000b7a:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <MX_FMC_Init+0x98>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000b80:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <MX_FMC_Init+0x98>)
 8000b82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b86:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000b8c:	2307      	movs	r3, #7
 8000b8e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000b90:	2304      	movs	r3, #4
 8000b92:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000b94:	2307      	movs	r3, #7
 8000b96:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <MX_FMC_Init+0x98>)
 8000baa:	f004 f93f 	bl	8004e2c <HAL_SDRAM_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000bb4:	f000 f94e 	bl	8000e54 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000bb8:	bf00      	nop
 8000bba:	3720      	adds	r7, #32
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20009268 	.word	0x20009268
 8000bc4:	a0000140 	.word	0xa0000140

08000bc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08e      	sub	sp, #56	; 0x38
 8000bcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
 8000bdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	623b      	str	r3, [r7, #32]
 8000be2:	4b7a      	ldr	r3, [pc, #488]	; (8000dcc <MX_GPIO_Init+0x204>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a79      	ldr	r2, [pc, #484]	; (8000dcc <MX_GPIO_Init+0x204>)
 8000be8:	f043 0304 	orr.w	r3, r3, #4
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b77      	ldr	r3, [pc, #476]	; (8000dcc <MX_GPIO_Init+0x204>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0304 	and.w	r3, r3, #4
 8000bf6:	623b      	str	r3, [r7, #32]
 8000bf8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
 8000bfe:	4b73      	ldr	r3, [pc, #460]	; (8000dcc <MX_GPIO_Init+0x204>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a72      	ldr	r2, [pc, #456]	; (8000dcc <MX_GPIO_Init+0x204>)
 8000c04:	f043 0320 	orr.w	r3, r3, #32
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b70      	ldr	r3, [pc, #448]	; (8000dcc <MX_GPIO_Init+0x204>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0320 	and.w	r3, r3, #32
 8000c12:	61fb      	str	r3, [r7, #28]
 8000c14:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	61bb      	str	r3, [r7, #24]
 8000c1a:	4b6c      	ldr	r3, [pc, #432]	; (8000dcc <MX_GPIO_Init+0x204>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a6b      	ldr	r2, [pc, #428]	; (8000dcc <MX_GPIO_Init+0x204>)
 8000c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b69      	ldr	r3, [pc, #420]	; (8000dcc <MX_GPIO_Init+0x204>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c2e:	61bb      	str	r3, [r7, #24]
 8000c30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]
 8000c36:	4b65      	ldr	r3, [pc, #404]	; (8000dcc <MX_GPIO_Init+0x204>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a64      	ldr	r2, [pc, #400]	; (8000dcc <MX_GPIO_Init+0x204>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b62      	ldr	r3, [pc, #392]	; (8000dcc <MX_GPIO_Init+0x204>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	617b      	str	r3, [r7, #20]
 8000c4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	4b5e      	ldr	r3, [pc, #376]	; (8000dcc <MX_GPIO_Init+0x204>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a5d      	ldr	r2, [pc, #372]	; (8000dcc <MX_GPIO_Init+0x204>)
 8000c58:	f043 0302 	orr.w	r3, r3, #2
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b5b      	ldr	r3, [pc, #364]	; (8000dcc <MX_GPIO_Init+0x204>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	4b57      	ldr	r3, [pc, #348]	; (8000dcc <MX_GPIO_Init+0x204>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a56      	ldr	r2, [pc, #344]	; (8000dcc <MX_GPIO_Init+0x204>)
 8000c74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b54      	ldr	r3, [pc, #336]	; (8000dcc <MX_GPIO_Init+0x204>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	4b50      	ldr	r3, [pc, #320]	; (8000dcc <MX_GPIO_Init+0x204>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a4f      	ldr	r2, [pc, #316]	; (8000dcc <MX_GPIO_Init+0x204>)
 8000c90:	f043 0310 	orr.w	r3, r3, #16
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b4d      	ldr	r3, [pc, #308]	; (8000dcc <MX_GPIO_Init+0x204>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0310 	and.w	r3, r3, #16
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	4b49      	ldr	r3, [pc, #292]	; (8000dcc <MX_GPIO_Init+0x204>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a48      	ldr	r2, [pc, #288]	; (8000dcc <MX_GPIO_Init+0x204>)
 8000cac:	f043 0308 	orr.w	r3, r3, #8
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b46      	ldr	r3, [pc, #280]	; (8000dcc <MX_GPIO_Init+0x204>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0308 	and.w	r3, r3, #8
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2116      	movs	r1, #22
 8000cc2:	4843      	ldr	r0, [pc, #268]	; (8000dd0 <MX_GPIO_Init+0x208>)
 8000cc4:	f001 faa0 	bl	8002208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2180      	movs	r1, #128	; 0x80
 8000ccc:	4841      	ldr	r0, [pc, #260]	; (8000dd4 <MX_GPIO_Init+0x20c>)
 8000cce:	f001 fa9b 	bl	8002208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000cd8:	483f      	ldr	r0, [pc, #252]	; (8000dd8 <MX_GPIO_Init+0x210>)
 8000cda:	f001 fa95 	bl	8002208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000ce4:	483d      	ldr	r0, [pc, #244]	; (8000ddc <MX_GPIO_Init+0x214>)
 8000ce6:	f001 fa8f 	bl	8002208 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000cea:	2316      	movs	r3, #22
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4833      	ldr	r0, [pc, #204]	; (8000dd0 <MX_GPIO_Init+0x208>)
 8000d02:	f001 f8d7 	bl	8001eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000d06:	f248 0307 	movw	r3, #32775	; 0x8007
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d0c:	4b34      	ldr	r3, [pc, #208]	; (8000de0 <MX_GPIO_Init+0x218>)
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d18:	4619      	mov	r1, r3
 8000d1a:	482e      	ldr	r0, [pc, #184]	; (8000dd4 <MX_GPIO_Init+0x20c>)
 8000d1c:	f001 f8ca 	bl	8001eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000d20:	2380      	movs	r3, #128	; 0x80
 8000d22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d24:	2301      	movs	r3, #1
 8000d26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d34:	4619      	mov	r1, r3
 8000d36:	4827      	ldr	r0, [pc, #156]	; (8000dd4 <MX_GPIO_Init+0x20c>)
 8000d38:	f001 f8bc 	bl	8001eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000d3c:	2320      	movs	r3, #32
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d40:	4b27      	ldr	r3, [pc, #156]	; (8000de0 <MX_GPIO_Init+0x218>)
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4820      	ldr	r0, [pc, #128]	; (8000dd0 <MX_GPIO_Init+0x208>)
 8000d50:	f001 f8b0 	bl	8001eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d54:	2304      	movs	r3, #4
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d64:	4619      	mov	r1, r3
 8000d66:	481f      	ldr	r0, [pc, #124]	; (8000de4 <MX_GPIO_Init+0x21c>)
 8000d68:	f001 f8a4 	bl	8001eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000d6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d72:	2300      	movs	r3, #0
 8000d74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4815      	ldr	r0, [pc, #84]	; (8000dd8 <MX_GPIO_Init+0x210>)
 8000d82:	f001 f897 	bl	8001eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000d86:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	2300      	movs	r3, #0
 8000d96:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	480e      	ldr	r0, [pc, #56]	; (8000dd8 <MX_GPIO_Init+0x210>)
 8000da0:	f001 f888 	bl	8001eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000da4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000daa:	2301      	movs	r3, #1
 8000dac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	2300      	movs	r3, #0
 8000db4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000db6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4807      	ldr	r0, [pc, #28]	; (8000ddc <MX_GPIO_Init+0x214>)
 8000dbe:	f001 f879 	bl	8001eb4 <HAL_GPIO_Init>

}
 8000dc2:	bf00      	nop
 8000dc4:	3738      	adds	r7, #56	; 0x38
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40020800 	.word	0x40020800
 8000dd4:	40020000 	.word	0x40020000
 8000dd8:	40020c00 	.word	0x40020c00
 8000ddc:	40021800 	.word	0x40021800
 8000de0:	10120000 	.word	0x10120000
 8000de4:	40020400 	.word	0x40020400

08000de8 <StartDefaultTask_LED>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask_LED */
void StartDefaultTask_LED(void *argument)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	LED3_TOG;
 8000df0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000df4:	4803      	ldr	r0, [pc, #12]	; (8000e04 <StartDefaultTask_LED+0x1c>)
 8000df6:	f001 fa20 	bl	800223a <HAL_GPIO_TogglePin>
	osDelay(500);
 8000dfa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dfe:	f005 ff03 	bl	8006c08 <osDelay>
	LED3_TOG;
 8000e02:	e7f5      	b.n	8000df0 <StartDefaultTask_LED+0x8>
 8000e04:	40021800 	.word	0x40021800

08000e08 <StartTask_UART_Tx>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_UART_Tx */
void StartTask_UART_Tx(void *argument)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_UART_Tx */
  /* Infinite loop */
  for(;;)
  {
	HAL_UART_Transmit(&huart5, "Hello ", 6, 100);
 8000e10:	2364      	movs	r3, #100	; 0x64
 8000e12:	2206      	movs	r2, #6
 8000e14:	4904      	ldr	r1, [pc, #16]	; (8000e28 <StartTask_UART_Tx+0x20>)
 8000e16:	4805      	ldr	r0, [pc, #20]	; (8000e2c <StartTask_UART_Tx+0x24>)
 8000e18:	f004 fced 	bl	80057f6 <HAL_UART_Transmit>
	//HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
    osDelay(1000);
 8000e1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e20:	f005 fef2 	bl	8006c08 <osDelay>
	HAL_UART_Transmit(&huart5, "Hello ", 6, 100);
 8000e24:	e7f4      	b.n	8000e10 <StartTask_UART_Tx+0x8>
 8000e26:	bf00      	nop
 8000e28:	0800956c 	.word	0x0800956c
 8000e2c:	20008ea0 	.word	0x20008ea0

08000e30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a04      	ldr	r2, [pc, #16]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d101      	bne.n	8000e46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e42:	f000 fd0b 	bl	800185c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40001000 	.word	0x40001000

08000e54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET); // turn on red led when execute error handler
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e5e:	4802      	ldr	r0, [pc, #8]	; (8000e68 <Error_Handler+0x14>)
 8000e60:	f001 f9d2 	bl	8002208 <HAL_GPIO_WritePin>
  /* USER CODE END Error_Handler_Debug */
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40021800 	.word	0x40021800

08000e6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <HAL_MspInit+0x54>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	4a11      	ldr	r2, [pc, #68]	; (8000ec0 <HAL_MspInit+0x54>)
 8000e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e80:	6453      	str	r3, [r2, #68]	; 0x44
 8000e82:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <HAL_MspInit+0x54>)
 8000e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	603b      	str	r3, [r7, #0]
 8000e92:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <HAL_MspInit+0x54>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	4a0a      	ldr	r2, [pc, #40]	; (8000ec0 <HAL_MspInit+0x54>)
 8000e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e9e:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <HAL_MspInit+0x54>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea6:	603b      	str	r3, [r7, #0]
 8000ea8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	210f      	movs	r1, #15
 8000eae:	f06f 0001 	mvn.w	r0, #1
 8000eb2:	f000 fdcd 	bl	8001a50 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40023800 	.word	0x40023800

08000ec4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <HAL_CRC_MspInit+0x3c>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d10d      	bne.n	8000ef2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <HAL_CRC_MspInit+0x40>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4a09      	ldr	r2, [pc, #36]	; (8000f04 <HAL_CRC_MspInit+0x40>)
 8000ee0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee6:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <HAL_CRC_MspInit+0x40>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000ef2:	bf00      	nop
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	40023000 	.word	0x40023000
 8000f04:	40023800 	.word	0x40023800

08000f08 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0e      	ldr	r2, [pc, #56]	; (8000f50 <HAL_DMA2D_MspInit+0x48>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d115      	bne.n	8000f46 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <HAL_DMA2D_MspInit+0x4c>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a0c      	ldr	r2, [pc, #48]	; (8000f54 <HAL_DMA2D_MspInit+0x4c>)
 8000f24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <HAL_DMA2D_MspInit+0x4c>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2105      	movs	r1, #5
 8000f3a:	205a      	movs	r0, #90	; 0x5a
 8000f3c:	f000 fd88 	bl	8001a50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000f40:	205a      	movs	r0, #90	; 0x5a
 8000f42:	f000 fda1 	bl	8001a88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	4002b000 	.word	0x4002b000
 8000f54:	40023800 	.word	0x40023800

08000f58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	; 0x28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a29      	ldr	r2, [pc, #164]	; (800101c <HAL_I2C_MspInit+0xc4>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d14b      	bne.n	8001012 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	4b28      	ldr	r3, [pc, #160]	; (8001020 <HAL_I2C_MspInit+0xc8>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a27      	ldr	r2, [pc, #156]	; (8001020 <HAL_I2C_MspInit+0xc8>)
 8000f84:	f043 0304 	orr.w	r3, r3, #4
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b25      	ldr	r3, [pc, #148]	; (8001020 <HAL_I2C_MspInit+0xc8>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0304 	and.w	r3, r3, #4
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	4b21      	ldr	r3, [pc, #132]	; (8001020 <HAL_I2C_MspInit+0xc8>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a20      	ldr	r2, [pc, #128]	; (8001020 <HAL_I2C_MspInit+0xc8>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b1e      	ldr	r3, [pc, #120]	; (8001020 <HAL_I2C_MspInit+0xc8>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000fb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fb8:	2312      	movs	r3, #18
 8000fba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000fc4:	2304      	movs	r3, #4
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4815      	ldr	r0, [pc, #84]	; (8001024 <HAL_I2C_MspInit+0xcc>)
 8000fd0:	f000 ff70 	bl	8001eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000fd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fda:	2312      	movs	r3, #18
 8000fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000fe6:	2304      	movs	r3, #4
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4619      	mov	r1, r3
 8000ff0:	480d      	ldr	r0, [pc, #52]	; (8001028 <HAL_I2C_MspInit+0xd0>)
 8000ff2:	f000 ff5f 	bl	8001eb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	4b09      	ldr	r3, [pc, #36]	; (8001020 <HAL_I2C_MspInit+0xc8>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	4a08      	ldr	r2, [pc, #32]	; (8001020 <HAL_I2C_MspInit+0xc8>)
 8001000:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001004:	6413      	str	r3, [r2, #64]	; 0x40
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_I2C_MspInit+0xc8>)
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001012:	bf00      	nop
 8001014:	3728      	adds	r7, #40	; 0x28
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40005c00 	.word	0x40005c00
 8001020:	40023800 	.word	0x40023800
 8001024:	40020800 	.word	0x40020800
 8001028:	40020000 	.word	0x40020000

0800102c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08e      	sub	sp, #56	; 0x38
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a7b      	ldr	r2, [pc, #492]	; (8001238 <HAL_LTDC_MspInit+0x20c>)
 800104a:	4293      	cmp	r3, r2
 800104c:	f040 80f0 	bne.w	8001230 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001050:	2300      	movs	r3, #0
 8001052:	623b      	str	r3, [r7, #32]
 8001054:	4b79      	ldr	r3, [pc, #484]	; (800123c <HAL_LTDC_MspInit+0x210>)
 8001056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001058:	4a78      	ldr	r2, [pc, #480]	; (800123c <HAL_LTDC_MspInit+0x210>)
 800105a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800105e:	6453      	str	r3, [r2, #68]	; 0x44
 8001060:	4b76      	ldr	r3, [pc, #472]	; (800123c <HAL_LTDC_MspInit+0x210>)
 8001062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001064:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001068:	623b      	str	r3, [r7, #32]
 800106a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800106c:	2300      	movs	r3, #0
 800106e:	61fb      	str	r3, [r7, #28]
 8001070:	4b72      	ldr	r3, [pc, #456]	; (800123c <HAL_LTDC_MspInit+0x210>)
 8001072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001074:	4a71      	ldr	r2, [pc, #452]	; (800123c <HAL_LTDC_MspInit+0x210>)
 8001076:	f043 0320 	orr.w	r3, r3, #32
 800107a:	6313      	str	r3, [r2, #48]	; 0x30
 800107c:	4b6f      	ldr	r3, [pc, #444]	; (800123c <HAL_LTDC_MspInit+0x210>)
 800107e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001080:	f003 0320 	and.w	r3, r3, #32
 8001084:	61fb      	str	r3, [r7, #28]
 8001086:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001088:	2300      	movs	r3, #0
 800108a:	61bb      	str	r3, [r7, #24]
 800108c:	4b6b      	ldr	r3, [pc, #428]	; (800123c <HAL_LTDC_MspInit+0x210>)
 800108e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001090:	4a6a      	ldr	r2, [pc, #424]	; (800123c <HAL_LTDC_MspInit+0x210>)
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	6313      	str	r3, [r2, #48]	; 0x30
 8001098:	4b68      	ldr	r3, [pc, #416]	; (800123c <HAL_LTDC_MspInit+0x210>)
 800109a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	61bb      	str	r3, [r7, #24]
 80010a2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
 80010a8:	4b64      	ldr	r3, [pc, #400]	; (800123c <HAL_LTDC_MspInit+0x210>)
 80010aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ac:	4a63      	ldr	r2, [pc, #396]	; (800123c <HAL_LTDC_MspInit+0x210>)
 80010ae:	f043 0302 	orr.w	r3, r3, #2
 80010b2:	6313      	str	r3, [r2, #48]	; 0x30
 80010b4:	4b61      	ldr	r3, [pc, #388]	; (800123c <HAL_LTDC_MspInit+0x210>)
 80010b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b8:	f003 0302 	and.w	r3, r3, #2
 80010bc:	617b      	str	r3, [r7, #20]
 80010be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80010c0:	2300      	movs	r3, #0
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	4b5d      	ldr	r3, [pc, #372]	; (800123c <HAL_LTDC_MspInit+0x210>)
 80010c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c8:	4a5c      	ldr	r2, [pc, #368]	; (800123c <HAL_LTDC_MspInit+0x210>)
 80010ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010ce:	6313      	str	r3, [r2, #48]	; 0x30
 80010d0:	4b5a      	ldr	r3, [pc, #360]	; (800123c <HAL_LTDC_MspInit+0x210>)
 80010d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010dc:	2300      	movs	r3, #0
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	4b56      	ldr	r3, [pc, #344]	; (800123c <HAL_LTDC_MspInit+0x210>)
 80010e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e4:	4a55      	ldr	r2, [pc, #340]	; (800123c <HAL_LTDC_MspInit+0x210>)
 80010e6:	f043 0304 	orr.w	r3, r3, #4
 80010ea:	6313      	str	r3, [r2, #48]	; 0x30
 80010ec:	4b53      	ldr	r3, [pc, #332]	; (800123c <HAL_LTDC_MspInit+0x210>)
 80010ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f0:	f003 0304 	and.w	r3, r3, #4
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f8:	2300      	movs	r3, #0
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	4b4f      	ldr	r3, [pc, #316]	; (800123c <HAL_LTDC_MspInit+0x210>)
 80010fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001100:	4a4e      	ldr	r2, [pc, #312]	; (800123c <HAL_LTDC_MspInit+0x210>)
 8001102:	f043 0308 	orr.w	r3, r3, #8
 8001106:	6313      	str	r3, [r2, #48]	; 0x30
 8001108:	4b4c      	ldr	r3, [pc, #304]	; (800123c <HAL_LTDC_MspInit+0x210>)
 800110a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110c:	f003 0308 	and.w	r3, r3, #8
 8001110:	60bb      	str	r3, [r7, #8]
 8001112:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001114:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2300      	movs	r3, #0
 8001124:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001126:	230e      	movs	r3, #14
 8001128:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800112a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112e:	4619      	mov	r1, r3
 8001130:	4843      	ldr	r0, [pc, #268]	; (8001240 <HAL_LTDC_MspInit+0x214>)
 8001132:	f000 febf 	bl	8001eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001136:	f641 0358 	movw	r3, #6232	; 0x1858
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001148:	230e      	movs	r3, #14
 800114a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001150:	4619      	mov	r1, r3
 8001152:	483c      	ldr	r0, [pc, #240]	; (8001244 <HAL_LTDC_MspInit+0x218>)
 8001154:	f000 feae 	bl	8001eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001158:	2303      	movs	r3, #3
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2300      	movs	r3, #0
 8001166:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001168:	2309      	movs	r3, #9
 800116a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001170:	4619      	mov	r1, r3
 8001172:	4835      	ldr	r0, [pc, #212]	; (8001248 <HAL_LTDC_MspInit+0x21c>)
 8001174:	f000 fe9e 	bl	8001eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001178:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	2302      	movs	r3, #2
 8001180:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	2300      	movs	r3, #0
 8001188:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800118a:	230e      	movs	r3, #14
 800118c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001192:	4619      	mov	r1, r3
 8001194:	482c      	ldr	r0, [pc, #176]	; (8001248 <HAL_LTDC_MspInit+0x21c>)
 8001196:	f000 fe8d 	bl	8001eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800119a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a0:	2302      	movs	r3, #2
 80011a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a8:	2300      	movs	r3, #0
 80011aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011ac:	230e      	movs	r3, #14
 80011ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b4:	4619      	mov	r1, r3
 80011b6:	4825      	ldr	r0, [pc, #148]	; (800124c <HAL_LTDC_MspInit+0x220>)
 80011b8:	f000 fe7c 	bl	8001eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80011bc:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c2:	2302      	movs	r3, #2
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	2300      	movs	r3, #0
 80011cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011ce:	230e      	movs	r3, #14
 80011d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d6:	4619      	mov	r1, r3
 80011d8:	481d      	ldr	r0, [pc, #116]	; (8001250 <HAL_LTDC_MspInit+0x224>)
 80011da:	f000 fe6b 	bl	8001eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80011de:	2348      	movs	r3, #72	; 0x48
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e2:	2302      	movs	r3, #2
 80011e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011ee:	230e      	movs	r3, #14
 80011f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f6:	4619      	mov	r1, r3
 80011f8:	4816      	ldr	r0, [pc, #88]	; (8001254 <HAL_LTDC_MspInit+0x228>)
 80011fa:	f000 fe5b 	bl	8001eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80011fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001210:	2309      	movs	r3, #9
 8001212:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001218:	4619      	mov	r1, r3
 800121a:	480c      	ldr	r0, [pc, #48]	; (800124c <HAL_LTDC_MspInit+0x220>)
 800121c:	f000 fe4a 	bl	8001eb4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001220:	2200      	movs	r2, #0
 8001222:	2105      	movs	r1, #5
 8001224:	2058      	movs	r0, #88	; 0x58
 8001226:	f000 fc13 	bl	8001a50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800122a:	2058      	movs	r0, #88	; 0x58
 800122c:	f000 fc2c 	bl	8001a88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001230:	bf00      	nop
 8001232:	3738      	adds	r7, #56	; 0x38
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40016800 	.word	0x40016800
 800123c:	40023800 	.word	0x40023800
 8001240:	40021400 	.word	0x40021400
 8001244:	40020000 	.word	0x40020000
 8001248:	40020400 	.word	0x40020400
 800124c:	40021800 	.word	0x40021800
 8001250:	40020800 	.word	0x40020800
 8001254:	40020c00 	.word	0x40020c00

08001258 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	; 0x28
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a19      	ldr	r2, [pc, #100]	; (80012dc <HAL_SPI_MspInit+0x84>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d12c      	bne.n	80012d4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <HAL_SPI_MspInit+0x88>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	4a17      	ldr	r2, [pc, #92]	; (80012e0 <HAL_SPI_MspInit+0x88>)
 8001284:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001288:	6453      	str	r3, [r2, #68]	; 0x44
 800128a:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <HAL_SPI_MspInit+0x88>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <HAL_SPI_MspInit+0x88>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a10      	ldr	r2, [pc, #64]	; (80012e0 <HAL_SPI_MspInit+0x88>)
 80012a0:	f043 0320 	orr.w	r3, r3, #32
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <HAL_SPI_MspInit+0x88>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0320 	and.w	r3, r3, #32
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80012b2:	f44f 7360 	mov.w	r3, #896	; 0x380
 80012b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b8:	2302      	movs	r3, #2
 80012ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2300      	movs	r3, #0
 80012c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80012c4:	2305      	movs	r3, #5
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	4619      	mov	r1, r3
 80012ce:	4805      	ldr	r0, [pc, #20]	; (80012e4 <HAL_SPI_MspInit+0x8c>)
 80012d0:	f000 fdf0 	bl	8001eb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80012d4:	bf00      	nop
 80012d6:	3728      	adds	r7, #40	; 0x28
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40015000 	.word	0x40015000
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40021400 	.word	0x40021400

080012e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a0b      	ldr	r2, [pc, #44]	; (8001324 <HAL_TIM_Base_MspInit+0x3c>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d10d      	bne.n	8001316 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <HAL_TIM_Base_MspInit+0x40>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	4a09      	ldr	r2, [pc, #36]	; (8001328 <HAL_TIM_Base_MspInit+0x40>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6453      	str	r3, [r2, #68]	; 0x44
 800130a:	4b07      	ldr	r3, [pc, #28]	; (8001328 <HAL_TIM_Base_MspInit+0x40>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001316:	bf00      	nop
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	40010000 	.word	0x40010000
 8001328:	40023800 	.word	0x40023800

0800132c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08c      	sub	sp, #48	; 0x30
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 031c 	add.w	r3, r7, #28
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a42      	ldr	r2, [pc, #264]	; (8001454 <HAL_UART_MspInit+0x128>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d14b      	bne.n	80013e6 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	61bb      	str	r3, [r7, #24]
 8001352:	4b41      	ldr	r3, [pc, #260]	; (8001458 <HAL_UART_MspInit+0x12c>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	4a40      	ldr	r2, [pc, #256]	; (8001458 <HAL_UART_MspInit+0x12c>)
 8001358:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800135c:	6413      	str	r3, [r2, #64]	; 0x40
 800135e:	4b3e      	ldr	r3, [pc, #248]	; (8001458 <HAL_UART_MspInit+0x12c>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001366:	61bb      	str	r3, [r7, #24]
 8001368:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
 800136e:	4b3a      	ldr	r3, [pc, #232]	; (8001458 <HAL_UART_MspInit+0x12c>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a39      	ldr	r2, [pc, #228]	; (8001458 <HAL_UART_MspInit+0x12c>)
 8001374:	f043 0304 	orr.w	r3, r3, #4
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b37      	ldr	r3, [pc, #220]	; (8001458 <HAL_UART_MspInit+0x12c>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0304 	and.w	r3, r3, #4
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	4b33      	ldr	r3, [pc, #204]	; (8001458 <HAL_UART_MspInit+0x12c>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a32      	ldr	r2, [pc, #200]	; (8001458 <HAL_UART_MspInit+0x12c>)
 8001390:	f043 0308 	orr.w	r3, r3, #8
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b30      	ldr	r3, [pc, #192]	; (8001458 <HAL_UART_MspInit+0x12c>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0308 	and.w	r3, r3, #8
 800139e:	613b      	str	r3, [r7, #16]
 80013a0:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a8:	2302      	movs	r3, #2
 80013aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b0:	2303      	movs	r3, #3
 80013b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80013b4:	2308      	movs	r3, #8
 80013b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b8:	f107 031c 	add.w	r3, r7, #28
 80013bc:	4619      	mov	r1, r3
 80013be:	4827      	ldr	r0, [pc, #156]	; (800145c <HAL_UART_MspInit+0x130>)
 80013c0:	f000 fd78 	bl	8001eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013c4:	2304      	movs	r3, #4
 80013c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c8:	2302      	movs	r3, #2
 80013ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013cc:	2301      	movs	r3, #1
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d0:	2303      	movs	r3, #3
 80013d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80013d4:	2308      	movs	r3, #8
 80013d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013d8:	f107 031c 	add.w	r3, r7, #28
 80013dc:	4619      	mov	r1, r3
 80013de:	4820      	ldr	r0, [pc, #128]	; (8001460 <HAL_UART_MspInit+0x134>)
 80013e0:	f000 fd68 	bl	8001eb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013e4:	e031      	b.n	800144a <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART1)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a1e      	ldr	r2, [pc, #120]	; (8001464 <HAL_UART_MspInit+0x138>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d12c      	bne.n	800144a <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART1_CLK_ENABLE();
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	4b18      	ldr	r3, [pc, #96]	; (8001458 <HAL_UART_MspInit+0x12c>)
 80013f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f8:	4a17      	ldr	r2, [pc, #92]	; (8001458 <HAL_UART_MspInit+0x12c>)
 80013fa:	f043 0310 	orr.w	r3, r3, #16
 80013fe:	6453      	str	r3, [r2, #68]	; 0x44
 8001400:	4b15      	ldr	r3, [pc, #84]	; (8001458 <HAL_UART_MspInit+0x12c>)
 8001402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001404:	f003 0310 	and.w	r3, r3, #16
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140c:	2300      	movs	r3, #0
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	4b11      	ldr	r3, [pc, #68]	; (8001458 <HAL_UART_MspInit+0x12c>)
 8001412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001414:	4a10      	ldr	r2, [pc, #64]	; (8001458 <HAL_UART_MspInit+0x12c>)
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	6313      	str	r3, [r2, #48]	; 0x30
 800141c:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <HAL_UART_MspInit+0x12c>)
 800141e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001420:	f003 0301 	and.w	r3, r3, #1
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001428:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800142c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	2302      	movs	r3, #2
 8001430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001436:	2303      	movs	r3, #3
 8001438:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800143a:	2307      	movs	r3, #7
 800143c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143e:	f107 031c 	add.w	r3, r7, #28
 8001442:	4619      	mov	r1, r3
 8001444:	4808      	ldr	r0, [pc, #32]	; (8001468 <HAL_UART_MspInit+0x13c>)
 8001446:	f000 fd35 	bl	8001eb4 <HAL_GPIO_Init>
}
 800144a:	bf00      	nop
 800144c:	3730      	adds	r7, #48	; 0x30
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40005000 	.word	0x40005000
 8001458:	40023800 	.word	0x40023800
 800145c:	40020800 	.word	0x40020800
 8001460:	40020c00 	.word	0x40020c00
 8001464:	40011000 	.word	0x40011000
 8001468:	40020000 	.word	0x40020000

0800146c <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	; 0x28
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_HS)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a24      	ldr	r2, [pc, #144]	; (800151c <HAL_HCD_MspInit+0xb0>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d141      	bne.n	8001512 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	4b23      	ldr	r3, [pc, #140]	; (8001520 <HAL_HCD_MspInit+0xb4>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a22      	ldr	r2, [pc, #136]	; (8001520 <HAL_HCD_MspInit+0xb4>)
 8001498:	f043 0302 	orr.w	r3, r3, #2
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b20      	ldr	r3, [pc, #128]	; (8001520 <HAL_HCD_MspInit+0xb4>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80014aa:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80014ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b0:	2302      	movs	r3, #2
 80014b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b8:	2300      	movs	r3, #0
 80014ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80014bc:	230c      	movs	r3, #12
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	4619      	mov	r1, r3
 80014c6:	4817      	ldr	r0, [pc, #92]	; (8001524 <HAL_HCD_MspInit+0xb8>)
 80014c8:	f000 fcf4 	bl	8001eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80014cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	4619      	mov	r1, r3
 80014e0:	4810      	ldr	r0, [pc, #64]	; (8001524 <HAL_HCD_MspInit+0xb8>)
 80014e2:	f000 fce7 	bl	8001eb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <HAL_HCD_MspInit+0xb4>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a0c      	ldr	r2, [pc, #48]	; (8001520 <HAL_HCD_MspInit+0xb4>)
 80014f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <HAL_HCD_MspInit+0xb4>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	2105      	movs	r1, #5
 8001506:	204d      	movs	r0, #77	; 0x4d
 8001508:	f000 faa2 	bl	8001a50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800150c:	204d      	movs	r0, #77	; 0x4d
 800150e:	f000 fabb 	bl	8001a88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 8001512:	bf00      	nop
 8001514:	3728      	adds	r7, #40	; 0x28
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40040000 	.word	0x40040000
 8001520:	40023800 	.word	0x40023800
 8001524:	40020400 	.word	0x40020400

08001528 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800153c:	4b3b      	ldr	r3, [pc, #236]	; (800162c <HAL_FMC_MspInit+0x104>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d16f      	bne.n	8001624 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001544:	4b39      	ldr	r3, [pc, #228]	; (800162c <HAL_FMC_MspInit+0x104>)
 8001546:	2201      	movs	r2, #1
 8001548:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	603b      	str	r3, [r7, #0]
 800154e:	4b38      	ldr	r3, [pc, #224]	; (8001630 <HAL_FMC_MspInit+0x108>)
 8001550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001552:	4a37      	ldr	r2, [pc, #220]	; (8001630 <HAL_FMC_MspInit+0x108>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6393      	str	r3, [r2, #56]	; 0x38
 800155a:	4b35      	ldr	r3, [pc, #212]	; (8001630 <HAL_FMC_MspInit+0x108>)
 800155c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	603b      	str	r3, [r7, #0]
 8001564:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001566:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800156a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001574:	2303      	movs	r3, #3
 8001576:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001578:	230c      	movs	r3, #12
 800157a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	4619      	mov	r1, r3
 8001580:	482c      	ldr	r0, [pc, #176]	; (8001634 <HAL_FMC_MspInit+0x10c>)
 8001582:	f000 fc97 	bl	8001eb4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001586:	2301      	movs	r3, #1
 8001588:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001592:	2303      	movs	r3, #3
 8001594:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001596:	230c      	movs	r3, #12
 8001598:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	4619      	mov	r1, r3
 800159e:	4826      	ldr	r0, [pc, #152]	; (8001638 <HAL_FMC_MspInit+0x110>)
 80015a0:	f000 fc88 	bl	8001eb4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80015a4:	f248 1333 	movw	r3, #33075	; 0x8133
 80015a8:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015aa:	2302      	movs	r3, #2
 80015ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b2:	2303      	movs	r3, #3
 80015b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015b6:	230c      	movs	r3, #12
 80015b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	4619      	mov	r1, r3
 80015be:	481f      	ldr	r0, [pc, #124]	; (800163c <HAL_FMC_MspInit+0x114>)
 80015c0:	f000 fc78 	bl	8001eb4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80015c4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80015c8:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d2:	2303      	movs	r3, #3
 80015d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015d6:	230c      	movs	r3, #12
 80015d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	4619      	mov	r1, r3
 80015de:	4818      	ldr	r0, [pc, #96]	; (8001640 <HAL_FMC_MspInit+0x118>)
 80015e0:	f000 fc68 	bl	8001eb4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80015e4:	f24c 7303 	movw	r3, #50947	; 0xc703
 80015e8:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ea:	2302      	movs	r3, #2
 80015ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f2:	2303      	movs	r3, #3
 80015f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015f6:	230c      	movs	r3, #12
 80015f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	4619      	mov	r1, r3
 80015fe:	4811      	ldr	r0, [pc, #68]	; (8001644 <HAL_FMC_MspInit+0x11c>)
 8001600:	f000 fc58 	bl	8001eb4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001604:	2360      	movs	r3, #96	; 0x60
 8001606:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001608:	2302      	movs	r3, #2
 800160a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001610:	2303      	movs	r3, #3
 8001612:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001614:	230c      	movs	r3, #12
 8001616:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	4619      	mov	r1, r3
 800161c:	480a      	ldr	r0, [pc, #40]	; (8001648 <HAL_FMC_MspInit+0x120>)
 800161e:	f000 fc49 	bl	8001eb4 <HAL_GPIO_Init>
 8001622:	e000      	b.n	8001626 <HAL_FMC_MspInit+0xfe>
    return;
 8001624:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	2000002c 	.word	0x2000002c
 8001630:	40023800 	.word	0x40023800
 8001634:	40021400 	.word	0x40021400
 8001638:	40020800 	.word	0x40020800
 800163c:	40021800 	.word	0x40021800
 8001640:	40021000 	.word	0x40021000
 8001644:	40020c00 	.word	0x40020c00
 8001648:	40020400 	.word	0x40020400

0800164c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001654:	f7ff ff68 	bl	8001528 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08c      	sub	sp, #48	; 0x30
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001670:	2200      	movs	r2, #0
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	2036      	movs	r0, #54	; 0x36
 8001676:	f000 f9eb 	bl	8001a50 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800167a:	2036      	movs	r0, #54	; 0x36
 800167c:	f000 fa04 	bl	8001a88 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001680:	2300      	movs	r3, #0
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	4b1f      	ldr	r3, [pc, #124]	; (8001704 <HAL_InitTick+0xa4>)
 8001686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001688:	4a1e      	ldr	r2, [pc, #120]	; (8001704 <HAL_InitTick+0xa4>)
 800168a:	f043 0310 	orr.w	r3, r3, #16
 800168e:	6413      	str	r3, [r2, #64]	; 0x40
 8001690:	4b1c      	ldr	r3, [pc, #112]	; (8001704 <HAL_InitTick+0xa4>)
 8001692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001694:	f003 0310 	and.w	r3, r3, #16
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800169c:	f107 0210 	add.w	r2, r7, #16
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	4611      	mov	r1, r2
 80016a6:	4618      	mov	r0, r3
 80016a8:	f003 f9d0 	bl	8004a4c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80016ac:	f003 f9a6 	bl	80049fc <HAL_RCC_GetPCLK1Freq>
 80016b0:	4603      	mov	r3, r0
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80016b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b8:	4a13      	ldr	r2, [pc, #76]	; (8001708 <HAL_InitTick+0xa8>)
 80016ba:	fba2 2303 	umull	r2, r3, r2, r3
 80016be:	0c9b      	lsrs	r3, r3, #18
 80016c0:	3b01      	subs	r3, #1
 80016c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80016c4:	4b11      	ldr	r3, [pc, #68]	; (800170c <HAL_InitTick+0xac>)
 80016c6:	4a12      	ldr	r2, [pc, #72]	; (8001710 <HAL_InitTick+0xb0>)
 80016c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80016ca:	4b10      	ldr	r3, [pc, #64]	; (800170c <HAL_InitTick+0xac>)
 80016cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016d0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016d2:	4a0e      	ldr	r2, [pc, #56]	; (800170c <HAL_InitTick+0xac>)
 80016d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <HAL_InitTick+0xac>)
 80016da:	2200      	movs	r2, #0
 80016dc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <HAL_InitTick+0xac>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80016e4:	4809      	ldr	r0, [pc, #36]	; (800170c <HAL_InitTick+0xac>)
 80016e6:	f003 fc39 	bl	8004f5c <HAL_TIM_Base_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d104      	bne.n	80016fa <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80016f0:	4806      	ldr	r0, [pc, #24]	; (800170c <HAL_InitTick+0xac>)
 80016f2:	f003 fc5e 	bl	8004fb2 <HAL_TIM_Base_Start_IT>
 80016f6:	4603      	mov	r3, r0
 80016f8:	e000      	b.n	80016fc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3730      	adds	r7, #48	; 0x30
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40023800 	.word	0x40023800
 8001708:	431bde83 	.word	0x431bde83
 800170c:	2000929c 	.word	0x2000929c
 8001710:	40001000 	.word	0x40001000

08001714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001726:	e7fe      	b.n	8001726 <HardFault_Handler+0x4>

08001728 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800172c:	e7fe      	b.n	800172c <MemManage_Handler+0x4>

0800172e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001732:	e7fe      	b.n	8001732 <BusFault_Handler+0x4>

08001734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001738:	e7fe      	b.n	8001738 <UsageFault_Handler+0x4>

0800173a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800174c:	4802      	ldr	r0, [pc, #8]	; (8001758 <TIM6_DAC_IRQHandler+0x10>)
 800174e:	f003 fc54 	bl	8004ffa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	2000929c 	.word	0x2000929c

0800175c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001760:	4802      	ldr	r0, [pc, #8]	; (800176c <OTG_HS_IRQHandler+0x10>)
 8001762:	f000 fde7 	bl	8002334 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20008f20 	.word	0x20008f20

08001770 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001774:	4802      	ldr	r0, [pc, #8]	; (8001780 <LTDC_IRQHandler+0x10>)
 8001776:	f002 fa6f 	bl	8003c58 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20008df8 	.word	0x20008df8

08001784 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001788:	4802      	ldr	r0, [pc, #8]	; (8001794 <DMA2D_IRQHandler+0x10>)
 800178a:	f000 f9f0 	bl	8001b6e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20009228 	.word	0x20009228

08001798 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800179c:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <SystemInit+0x28>)
 800179e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017a2:	4a07      	ldr	r2, [pc, #28]	; (80017c0 <SystemInit+0x28>)
 80017a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017ac:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <SystemInit+0x28>)
 80017ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017b2:	609a      	str	r2, [r3, #8]
#endif
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80017c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017fc <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80017c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80017ca:	e003      	b.n	80017d4 <LoopCopyDataInit>

080017cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80017ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80017d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80017d2:	3104      	adds	r1, #4

080017d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80017d4:	480b      	ldr	r0, [pc, #44]	; (8001804 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80017d6:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80017d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80017da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80017dc:	d3f6      	bcc.n	80017cc <CopyDataInit>
  ldr  r2, =_sbss
 80017de:	4a0b      	ldr	r2, [pc, #44]	; (800180c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80017e0:	e002      	b.n	80017e8 <LoopFillZerobss>

080017e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80017e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80017e4:	f842 3b04 	str.w	r3, [r2], #4

080017e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80017e8:	4b09      	ldr	r3, [pc, #36]	; (8001810 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80017ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80017ec:	d3f9      	bcc.n	80017e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017ee:	f7ff ffd3 	bl	8001798 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017f2:	f007 fe67 	bl	80094c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017f6:	f7fe fe95 	bl	8000524 <main>
  bx  lr    
 80017fa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80017fc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001800:	080095fc 	.word	0x080095fc
  ldr  r0, =_sdata
 8001804:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001808:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 800180c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001810:	20009320 	.word	0x20009320

08001814 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001814:	e7fe      	b.n	8001814 <ADC_IRQHandler>
	...

08001818 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800181c:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <HAL_Init+0x40>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a0d      	ldr	r2, [pc, #52]	; (8001858 <HAL_Init+0x40>)
 8001822:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001826:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001828:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <HAL_Init+0x40>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a0a      	ldr	r2, [pc, #40]	; (8001858 <HAL_Init+0x40>)
 800182e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001832:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001834:	4b08      	ldr	r3, [pc, #32]	; (8001858 <HAL_Init+0x40>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a07      	ldr	r2, [pc, #28]	; (8001858 <HAL_Init+0x40>)
 800183a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800183e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001840:	2003      	movs	r0, #3
 8001842:	f000 f8fa 	bl	8001a3a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001846:	2000      	movs	r0, #0
 8001848:	f7ff ff0a 	bl	8001660 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800184c:	f7ff fb0e 	bl	8000e6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40023c00 	.word	0x40023c00

0800185c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001860:	4b06      	ldr	r3, [pc, #24]	; (800187c <HAL_IncTick+0x20>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	461a      	mov	r2, r3
 8001866:	4b06      	ldr	r3, [pc, #24]	; (8001880 <HAL_IncTick+0x24>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4413      	add	r3, r2
 800186c:	4a04      	ldr	r2, [pc, #16]	; (8001880 <HAL_IncTick+0x24>)
 800186e:	6013      	str	r3, [r2, #0]
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	20000008 	.word	0x20000008
 8001880:	200092dc 	.word	0x200092dc

08001884 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  return uwTick;
 8001888:	4b03      	ldr	r3, [pc, #12]	; (8001898 <HAL_GetTick+0x14>)
 800188a:	681b      	ldr	r3, [r3, #0]
}
 800188c:	4618      	mov	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	200092dc 	.word	0x200092dc

0800189c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018a4:	f7ff ffee 	bl	8001884 <HAL_GetTick>
 80018a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b4:	d005      	beq.n	80018c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018b6:	4b09      	ldr	r3, [pc, #36]	; (80018dc <HAL_Delay+0x40>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	461a      	mov	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4413      	add	r3, r2
 80018c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018c2:	bf00      	nop
 80018c4:	f7ff ffde 	bl	8001884 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d8f7      	bhi.n	80018c4 <HAL_Delay+0x28>
  {
  }
}
 80018d4:	bf00      	nop
 80018d6:	3710      	adds	r7, #16
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000008 	.word	0x20000008

080018e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <__NVIC_SetPriorityGrouping+0x44>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018fc:	4013      	ands	r3, r2
 80018fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001908:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800190c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001912:	4a04      	ldr	r2, [pc, #16]	; (8001924 <__NVIC_SetPriorityGrouping+0x44>)
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	60d3      	str	r3, [r2, #12]
}
 8001918:	bf00      	nop
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800192c:	4b04      	ldr	r3, [pc, #16]	; (8001940 <__NVIC_GetPriorityGrouping+0x18>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	0a1b      	lsrs	r3, r3, #8
 8001932:	f003 0307 	and.w	r3, r3, #7
}
 8001936:	4618      	mov	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	2b00      	cmp	r3, #0
 8001954:	db0b      	blt.n	800196e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	f003 021f 	and.w	r2, r3, #31
 800195c:	4907      	ldr	r1, [pc, #28]	; (800197c <__NVIC_EnableIRQ+0x38>)
 800195e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001962:	095b      	lsrs	r3, r3, #5
 8001964:	2001      	movs	r0, #1
 8001966:	fa00 f202 	lsl.w	r2, r0, r2
 800196a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000e100 	.word	0xe000e100

08001980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	6039      	str	r1, [r7, #0]
 800198a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001990:	2b00      	cmp	r3, #0
 8001992:	db0a      	blt.n	80019aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	b2da      	uxtb	r2, r3
 8001998:	490c      	ldr	r1, [pc, #48]	; (80019cc <__NVIC_SetPriority+0x4c>)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	0112      	lsls	r2, r2, #4
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	440b      	add	r3, r1
 80019a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a8:	e00a      	b.n	80019c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	4908      	ldr	r1, [pc, #32]	; (80019d0 <__NVIC_SetPriority+0x50>)
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	3b04      	subs	r3, #4
 80019b8:	0112      	lsls	r2, r2, #4
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	440b      	add	r3, r1
 80019be:	761a      	strb	r2, [r3, #24]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000e100 	.word	0xe000e100
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b089      	sub	sp, #36	; 0x24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f1c3 0307 	rsb	r3, r3, #7
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	bf28      	it	cs
 80019f2:	2304      	movcs	r3, #4
 80019f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3304      	adds	r3, #4
 80019fa:	2b06      	cmp	r3, #6
 80019fc:	d902      	bls.n	8001a04 <NVIC_EncodePriority+0x30>
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3b03      	subs	r3, #3
 8001a02:	e000      	b.n	8001a06 <NVIC_EncodePriority+0x32>
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a08:	f04f 32ff 	mov.w	r2, #4294967295
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43da      	mvns	r2, r3
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	401a      	ands	r2, r3
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	fa01 f303 	lsl.w	r3, r1, r3
 8001a26:	43d9      	mvns	r1, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a2c:	4313      	orrs	r3, r2
         );
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3724      	adds	r7, #36	; 0x24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff ff4c 	bl	80018e0 <__NVIC_SetPriorityGrouping>
}
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
 8001a5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a62:	f7ff ff61 	bl	8001928 <__NVIC_GetPriorityGrouping>
 8001a66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	68b9      	ldr	r1, [r7, #8]
 8001a6c:	6978      	ldr	r0, [r7, #20]
 8001a6e:	f7ff ffb1 	bl	80019d4 <NVIC_EncodePriority>
 8001a72:	4602      	mov	r2, r0
 8001a74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a78:	4611      	mov	r1, r2
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff ff80 	bl	8001980 <__NVIC_SetPriority>
}
 8001a80:	bf00      	nop
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff ff54 	bl	8001944 <__NVIC_EnableIRQ>
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e00e      	b.n	8001ad4 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	795b      	ldrb	r3, [r3, #5]
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d105      	bne.n	8001acc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff f9fc 	bl	8000ec4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e03b      	b.n	8001b66 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d106      	bne.n	8001b08 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff fa00 	bl	8000f08 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b2c:	f023 0107 	bic.w	r1, r3, #7
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b46:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	68d1      	ldr	r1, [r2, #12]
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	6812      	ldr	r2, [r2, #0]
 8001b52:	430b      	orrs	r3, r1
 8001b54:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b084      	sub	sp, #16
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d026      	beq.n	8001bde <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d021      	beq.n	8001bde <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ba8:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bae:	f043 0201 	orr.w	r2, r3, #1
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2204      	movs	r2, #4
 8001bc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f003 0320 	and.w	r3, r3, #32
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d026      	beq.n	8001c36 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d021      	beq.n	8001c36 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c00:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2220      	movs	r2, #32
 8001c08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c0e:	f043 0202 	orr.w	r2, r3, #2
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2204      	movs	r2, #4
 8001c1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f003 0308 	and.w	r3, r3, #8
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d026      	beq.n	8001c8e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d021      	beq.n	8001c8e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c58:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2208      	movs	r2, #8
 8001c60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c66:	f043 0204 	orr.w	r2, r3, #4
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2204      	movs	r2, #4
 8001c72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d013      	beq.n	8001cc0 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00e      	beq.n	8001cc0 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cb0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2204      	movs	r2, #4
 8001cb8:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f853 	bl	8001d66 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d024      	beq.n	8001d14 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d01f      	beq.n	8001d14 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ce2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2202      	movs	r2, #2
 8001cea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f003 0310 	and.w	r3, r3, #16
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d01f      	beq.n	8001d5e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d01a      	beq.n	8001d5e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d36:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2210      	movs	r2, #16
 8001d3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 f80e 	bl	8001d7a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001d5e:	bf00      	nop
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b087      	sub	sp, #28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d101      	bne.n	8001db0 <HAL_DMA2D_ConfigLayer+0x20>
 8001dac:	2302      	movs	r3, #2
 8001dae:	e079      	b.n	8001ea4 <HAL_DMA2D_ConfigLayer+0x114>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2202      	movs	r2, #2
 8001dbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	011b      	lsls	r3, r3, #4
 8001dc4:	3318      	adds	r3, #24
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	041b      	lsls	r3, r3, #16
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001dda:	4b35      	ldr	r3, [pc, #212]	; (8001eb0 <HAL_DMA2D_ConfigLayer+0x120>)
 8001ddc:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b0a      	cmp	r3, #10
 8001de4:	d003      	beq.n	8001dee <HAL_DMA2D_ConfigLayer+0x5e>
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b09      	cmp	r3, #9
 8001dec:	d107      	bne.n	8001dfe <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	e005      	b.n	8001e0a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	061b      	lsls	r3, r3, #24
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d120      	bne.n	8001e52 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	ea02 0103 	and.w	r1, r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b0a      	cmp	r3, #10
 8001e38:	d003      	beq.n	8001e42 <HAL_DMA2D_ConfigLayer+0xb2>
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b09      	cmp	r3, #9
 8001e40:	d127      	bne.n	8001e92 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	68da      	ldr	r2, [r3, #12]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001e4e:	629a      	str	r2, [r3, #40]	; 0x28
 8001e50:	e01f      	b.n	8001e92 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	69da      	ldr	r2, [r3, #28]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	ea02 0103 	and.w	r1, r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	6812      	ldr	r2, [r2, #0]
 8001e72:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b0a      	cmp	r3, #10
 8001e7a:	d003      	beq.n	8001e84 <HAL_DMA2D_ConfigLayer+0xf4>
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b09      	cmp	r3, #9
 8001e82:	d106      	bne.n	8001e92 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	68da      	ldr	r2, [r3, #12]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001e90:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	371c      	adds	r7, #28
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	ff03000f 	.word	0xff03000f

08001eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b089      	sub	sp, #36	; 0x24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61fb      	str	r3, [r7, #28]
 8001ece:	e177      	b.n	80021c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	f040 8166 	bne.w	80021ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d00b      	beq.n	8001f0e <HAL_GPIO_Init+0x5a>
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d007      	beq.n	8001f0e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f02:	2b11      	cmp	r3, #17
 8001f04:	d003      	beq.n	8001f0e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b12      	cmp	r3, #18
 8001f0c:	d130      	bne.n	8001f70 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	2203      	movs	r2, #3
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4013      	ands	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	68da      	ldr	r2, [r3, #12]
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f44:	2201      	movs	r2, #1
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	091b      	lsrs	r3, r3, #4
 8001f5a:	f003 0201 	and.w	r2, r3, #1
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	2203      	movs	r2, #3
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d003      	beq.n	8001fb0 <HAL_GPIO_Init+0xfc>
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2b12      	cmp	r3, #18
 8001fae:	d123      	bne.n	8001ff8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	08da      	lsrs	r2, r3, #3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3208      	adds	r2, #8
 8001fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	220f      	movs	r2, #15
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	691a      	ldr	r2, [r3, #16]
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	08da      	lsrs	r2, r3, #3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3208      	adds	r2, #8
 8001ff2:	69b9      	ldr	r1, [r7, #24]
 8001ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	2203      	movs	r2, #3
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 0203 	and.w	r2, r3, #3
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4313      	orrs	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 80c0 	beq.w	80021ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	4b65      	ldr	r3, [pc, #404]	; (80021d4 <HAL_GPIO_Init+0x320>)
 8002040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002042:	4a64      	ldr	r2, [pc, #400]	; (80021d4 <HAL_GPIO_Init+0x320>)
 8002044:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002048:	6453      	str	r3, [r2, #68]	; 0x44
 800204a:	4b62      	ldr	r3, [pc, #392]	; (80021d4 <HAL_GPIO_Init+0x320>)
 800204c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002056:	4a60      	ldr	r2, [pc, #384]	; (80021d8 <HAL_GPIO_Init+0x324>)
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	089b      	lsrs	r3, r3, #2
 800205c:	3302      	adds	r3, #2
 800205e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002062:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	220f      	movs	r2, #15
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43db      	mvns	r3, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4013      	ands	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a57      	ldr	r2, [pc, #348]	; (80021dc <HAL_GPIO_Init+0x328>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d037      	beq.n	80020f2 <HAL_GPIO_Init+0x23e>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a56      	ldr	r2, [pc, #344]	; (80021e0 <HAL_GPIO_Init+0x32c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d031      	beq.n	80020ee <HAL_GPIO_Init+0x23a>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a55      	ldr	r2, [pc, #340]	; (80021e4 <HAL_GPIO_Init+0x330>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d02b      	beq.n	80020ea <HAL_GPIO_Init+0x236>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a54      	ldr	r2, [pc, #336]	; (80021e8 <HAL_GPIO_Init+0x334>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d025      	beq.n	80020e6 <HAL_GPIO_Init+0x232>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a53      	ldr	r2, [pc, #332]	; (80021ec <HAL_GPIO_Init+0x338>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d01f      	beq.n	80020e2 <HAL_GPIO_Init+0x22e>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a52      	ldr	r2, [pc, #328]	; (80021f0 <HAL_GPIO_Init+0x33c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d019      	beq.n	80020de <HAL_GPIO_Init+0x22a>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a51      	ldr	r2, [pc, #324]	; (80021f4 <HAL_GPIO_Init+0x340>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d013      	beq.n	80020da <HAL_GPIO_Init+0x226>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a50      	ldr	r2, [pc, #320]	; (80021f8 <HAL_GPIO_Init+0x344>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d00d      	beq.n	80020d6 <HAL_GPIO_Init+0x222>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a4f      	ldr	r2, [pc, #316]	; (80021fc <HAL_GPIO_Init+0x348>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d007      	beq.n	80020d2 <HAL_GPIO_Init+0x21e>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a4e      	ldr	r2, [pc, #312]	; (8002200 <HAL_GPIO_Init+0x34c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d101      	bne.n	80020ce <HAL_GPIO_Init+0x21a>
 80020ca:	2309      	movs	r3, #9
 80020cc:	e012      	b.n	80020f4 <HAL_GPIO_Init+0x240>
 80020ce:	230a      	movs	r3, #10
 80020d0:	e010      	b.n	80020f4 <HAL_GPIO_Init+0x240>
 80020d2:	2308      	movs	r3, #8
 80020d4:	e00e      	b.n	80020f4 <HAL_GPIO_Init+0x240>
 80020d6:	2307      	movs	r3, #7
 80020d8:	e00c      	b.n	80020f4 <HAL_GPIO_Init+0x240>
 80020da:	2306      	movs	r3, #6
 80020dc:	e00a      	b.n	80020f4 <HAL_GPIO_Init+0x240>
 80020de:	2305      	movs	r3, #5
 80020e0:	e008      	b.n	80020f4 <HAL_GPIO_Init+0x240>
 80020e2:	2304      	movs	r3, #4
 80020e4:	e006      	b.n	80020f4 <HAL_GPIO_Init+0x240>
 80020e6:	2303      	movs	r3, #3
 80020e8:	e004      	b.n	80020f4 <HAL_GPIO_Init+0x240>
 80020ea:	2302      	movs	r3, #2
 80020ec:	e002      	b.n	80020f4 <HAL_GPIO_Init+0x240>
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <HAL_GPIO_Init+0x240>
 80020f2:	2300      	movs	r3, #0
 80020f4:	69fa      	ldr	r2, [r7, #28]
 80020f6:	f002 0203 	and.w	r2, r2, #3
 80020fa:	0092      	lsls	r2, r2, #2
 80020fc:	4093      	lsls	r3, r2
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002104:	4934      	ldr	r1, [pc, #208]	; (80021d8 <HAL_GPIO_Init+0x324>)
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	089b      	lsrs	r3, r3, #2
 800210a:	3302      	adds	r3, #2
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002112:	4b3c      	ldr	r3, [pc, #240]	; (8002204 <HAL_GPIO_Init+0x350>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	43db      	mvns	r3, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4013      	ands	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002136:	4a33      	ldr	r2, [pc, #204]	; (8002204 <HAL_GPIO_Init+0x350>)
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800213c:	4b31      	ldr	r3, [pc, #196]	; (8002204 <HAL_GPIO_Init+0x350>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002160:	4a28      	ldr	r2, [pc, #160]	; (8002204 <HAL_GPIO_Init+0x350>)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002166:	4b27      	ldr	r3, [pc, #156]	; (8002204 <HAL_GPIO_Init+0x350>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	43db      	mvns	r3, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4013      	ands	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800218a:	4a1e      	ldr	r2, [pc, #120]	; (8002204 <HAL_GPIO_Init+0x350>)
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002190:	4b1c      	ldr	r3, [pc, #112]	; (8002204 <HAL_GPIO_Init+0x350>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021b4:	4a13      	ldr	r2, [pc, #76]	; (8002204 <HAL_GPIO_Init+0x350>)
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3301      	adds	r3, #1
 80021be:	61fb      	str	r3, [r7, #28]
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	2b0f      	cmp	r3, #15
 80021c4:	f67f ae84 	bls.w	8001ed0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021c8:	bf00      	nop
 80021ca:	3724      	adds	r7, #36	; 0x24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40013800 	.word	0x40013800
 80021dc:	40020000 	.word	0x40020000
 80021e0:	40020400 	.word	0x40020400
 80021e4:	40020800 	.word	0x40020800
 80021e8:	40020c00 	.word	0x40020c00
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40021400 	.word	0x40021400
 80021f4:	40021800 	.word	0x40021800
 80021f8:	40021c00 	.word	0x40021c00
 80021fc:	40022000 	.word	0x40022000
 8002200:	40022400 	.word	0x40022400
 8002204:	40013c00 	.word	0x40013c00

08002208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	807b      	strh	r3, [r7, #2]
 8002214:	4613      	mov	r3, r2
 8002216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002218:	787b      	ldrb	r3, [r7, #1]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800221e:	887a      	ldrh	r2, [r7, #2]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002224:	e003      	b.n	800222e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002226:	887b      	ldrh	r3, [r7, #2]
 8002228:	041a      	lsls	r2, r3, #16
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	619a      	str	r2, [r3, #24]
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
 8002242:	460b      	mov	r3, r1
 8002244:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	695a      	ldr	r2, [r3, #20]
 800224a:	887b      	ldrh	r3, [r7, #2]
 800224c:	401a      	ands	r2, r3
 800224e:	887b      	ldrh	r3, [r7, #2]
 8002250:	429a      	cmp	r2, r3
 8002252:	d104      	bne.n	800225e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002254:	887b      	ldrh	r3, [r7, #2]
 8002256:	041a      	lsls	r2, r3, #16
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800225c:	e002      	b.n	8002264 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800225e:	887a      	ldrh	r2, [r7, #2]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	619a      	str	r2, [r3, #24]
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002272:	b08f      	sub	sp, #60	; 0x3c
 8002274:	af0a      	add	r7, sp, #40	; 0x28
 8002276:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e054      	b.n	800232c <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	d106      	bne.n	80022a2 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7ff f8e5 	bl	800146c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2203      	movs	r2, #3
 80022a6:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d102      	bne.n	80022bc <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f004 f84a 	bl	800635a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	603b      	str	r3, [r7, #0]
 80022cc:	687e      	ldr	r6, [r7, #4]
 80022ce:	466d      	mov	r5, sp
 80022d0:	f106 0410 	add.w	r4, r6, #16
 80022d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80022e4:	1d33      	adds	r3, r6, #4
 80022e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022e8:	6838      	ldr	r0, [r7, #0]
 80022ea:	f003 ffd5 	bl	8006298 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2101      	movs	r1, #1
 80022f4:	4618      	mov	r0, r3
 80022f6:	f004 f841 	bl	800637c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	603b      	str	r3, [r7, #0]
 8002300:	687e      	ldr	r6, [r7, #4]
 8002302:	466d      	mov	r5, sp
 8002304:	f106 0410 	add.w	r4, r6, #16
 8002308:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800230a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800230c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800230e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002310:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002314:	e885 0003 	stmia.w	r5, {r0, r1}
 8002318:	1d33      	adds	r3, r6, #4
 800231a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800231c:	6838      	ldr	r0, [r7, #0]
 800231e:	f004 f91d 	bl	800655c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002334 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f004 f8c4 	bl	80064d8 <USB_GetMode>
 8002350:	4603      	mov	r3, r0
 8002352:	2b01      	cmp	r3, #1
 8002354:	f040 80ef 	bne.w	8002536 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f004 f8a8 	bl	80064b2 <USB_ReadInterrupts>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	f000 80e5 	beq.w	8002534 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f004 f89f 	bl	80064b2 <USB_ReadInterrupts>
 8002374:	4603      	mov	r3, r0
 8002376:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800237a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800237e:	d104      	bne.n	800238a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002388:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f004 f88f 	bl	80064b2 <USB_ReadInterrupts>
 8002394:	4603      	mov	r3, r0
 8002396:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800239a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800239e:	d104      	bne.n	80023aa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80023a8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f004 f87f 	bl	80064b2 <USB_ReadInterrupts>
 80023b4:	4603      	mov	r3, r0
 80023b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023be:	d104      	bne.n	80023ca <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80023c8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f004 f86f 	bl	80064b2 <USB_ReadInterrupts>
 80023d4:	4603      	mov	r3, r0
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d103      	bne.n	80023e6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2202      	movs	r2, #2
 80023e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f004 f861 	bl	80064b2 <USB_ReadInterrupts>
 80023f0:	4603      	mov	r3, r0
 80023f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023fa:	d115      	bne.n	8002428 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002404:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d108      	bne.n	8002428 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f8a4 	bl	8002564 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2101      	movs	r1, #1
 8002422:	4618      	mov	r0, r3
 8002424:	f004 f956 	bl	80066d4 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f004 f840 	bl	80064b2 <USB_ReadInterrupts>
 8002432:	4603      	mov	r3, r0
 8002434:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002438:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800243c:	d102      	bne.n	8002444 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f001 f912 	bl	8003668 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f004 f832 	bl	80064b2 <USB_ReadInterrupts>
 800244e:	4603      	mov	r3, r0
 8002450:	f003 0308 	and.w	r3, r3, #8
 8002454:	2b08      	cmp	r3, #8
 8002456:	d106      	bne.n	8002466 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 f86f 	bl	800253c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2208      	movs	r2, #8
 8002464:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f004 f821 	bl	80064b2 <USB_ReadInterrupts>
 8002470:	4603      	mov	r3, r0
 8002472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002476:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800247a:	d138      	bne.n	80024ee <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f004 f99a 	bl	80067ba <USB_HC_ReadInterrupt>
 8002486:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]
 800248c:	e025      	b.n	80024da <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	f003 030f 	and.w	r3, r3, #15
 8002494:	68ba      	ldr	r2, [r7, #8]
 8002496:	fa22 f303 	lsr.w	r3, r2, r3
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d018      	beq.n	80024d4 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	015a      	lsls	r2, r3, #5
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	4413      	add	r3, r2
 80024aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024b8:	d106      	bne.n	80024c8 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	4619      	mov	r1, r3
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 f87b 	bl	80025bc <HCD_HC_IN_IRQHandler>
 80024c6:	e005      	b.n	80024d4 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	4619      	mov	r1, r3
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 fca9 	bl	8002e26 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	3301      	adds	r3, #1
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d3d4      	bcc.n	800248e <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f003 ffdd 	bl	80064b2 <USB_ReadInterrupts>
 80024f8:	4603      	mov	r3, r0
 80024fa:	f003 0310 	and.w	r3, r3, #16
 80024fe:	2b10      	cmp	r3, #16
 8002500:	d101      	bne.n	8002506 <HAL_HCD_IRQHandler+0x1d2>
 8002502:	2301      	movs	r3, #1
 8002504:	e000      	b.n	8002508 <HAL_HCD_IRQHandler+0x1d4>
 8002506:	2300      	movs	r3, #0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d014      	beq.n	8002536 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	699a      	ldr	r2, [r3, #24]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0210 	bic.w	r2, r2, #16
 800251a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 fff7 	bl	8003510 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	699a      	ldr	r2, [r3, #24]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f042 0210 	orr.w	r2, r2, #16
 8002530:	619a      	str	r2, [r3, #24]
 8002532:	e000      	b.n	8002536 <HAL_HCD_IRQHandler+0x202>
      return;
 8002534:	bf00      	nop
    }
  }
}
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	460b      	mov	r3, r1
 80025aa:	70fb      	strb	r3, [r7, #3]
 80025ac:	4613      	mov	r3, r2
 80025ae:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80025d2:	78fb      	ldrb	r3, [r7, #3]
 80025d4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	015a      	lsls	r2, r3, #5
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	4413      	add	r3, r2
 80025de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 0304 	and.w	r3, r3, #4
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d119      	bne.n	8002620 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	015a      	lsls	r2, r3, #5
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	4413      	add	r3, r2
 80025f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f8:	461a      	mov	r2, r3
 80025fa:	2304      	movs	r3, #4
 80025fc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	015a      	lsls	r2, r3, #5
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	4413      	add	r3, r2
 8002606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	0151      	lsls	r1, r2, #5
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	440a      	add	r2, r1
 8002614:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002618:	f043 0302 	orr.w	r3, r3, #2
 800261c:	60d3      	str	r3, [r2, #12]
 800261e:	e0ce      	b.n	80027be <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	015a      	lsls	r2, r3, #5
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	4413      	add	r3, r2
 8002628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002632:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002636:	d12c      	bne.n	8002692 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	015a      	lsls	r2, r3, #5
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	4413      	add	r3, r2
 8002640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002644:	461a      	mov	r2, r3
 8002646:	f44f 7380 	mov.w	r3, #256	; 0x100
 800264a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	4613      	mov	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	440b      	add	r3, r1
 800265a:	335d      	adds	r3, #93	; 0x5d
 800265c:	2207      	movs	r2, #7
 800265e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	015a      	lsls	r2, r3, #5
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	4413      	add	r3, r2
 8002668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	0151      	lsls	r1, r2, #5
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	440a      	add	r2, r1
 8002676:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800267a:	f043 0302 	orr.w	r3, r3, #2
 800267e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	4611      	mov	r1, r2
 800268a:	4618      	mov	r0, r3
 800268c:	f004 f8a6 	bl	80067dc <USB_HC_Halt>
 8002690:	e095      	b.n	80027be <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	015a      	lsls	r2, r3, #5
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4413      	add	r3, r2
 800269a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 0320 	and.w	r3, r3, #32
 80026a4:	2b20      	cmp	r3, #32
 80026a6:	d109      	bne.n	80026bc <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	015a      	lsls	r2, r3, #5
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	4413      	add	r3, r2
 80026b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b4:	461a      	mov	r2, r3
 80026b6:	2320      	movs	r3, #32
 80026b8:	6093      	str	r3, [r2, #8]
 80026ba:	e080      	b.n	80027be <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	015a      	lsls	r2, r3, #5
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	4413      	add	r3, r2
 80026c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b08      	cmp	r3, #8
 80026d0:	d134      	bne.n	800273c <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	015a      	lsls	r2, r3, #5
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	4413      	add	r3, r2
 80026da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	0151      	lsls	r1, r2, #5
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	440a      	add	r2, r1
 80026e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026ec:	f043 0302 	orr.w	r3, r3, #2
 80026f0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	4613      	mov	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	440b      	add	r3, r1
 8002700:	335d      	adds	r3, #93	; 0x5d
 8002702:	2205      	movs	r2, #5
 8002704:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	015a      	lsls	r2, r3, #5
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	4413      	add	r3, r2
 800270e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002712:	461a      	mov	r2, r3
 8002714:	2310      	movs	r3, #16
 8002716:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	015a      	lsls	r2, r3, #5
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	4413      	add	r3, r2
 8002720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002724:	461a      	mov	r2, r3
 8002726:	2308      	movs	r3, #8
 8002728:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	4611      	mov	r1, r2
 8002734:	4618      	mov	r0, r3
 8002736:	f004 f851 	bl	80067dc <USB_HC_Halt>
 800273a:	e040      	b.n	80027be <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	015a      	lsls	r2, r3, #5
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	4413      	add	r3, r2
 8002744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800274e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002752:	d134      	bne.n	80027be <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	015a      	lsls	r2, r3, #5
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4413      	add	r3, r2
 800275c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	0151      	lsls	r1, r2, #5
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	440a      	add	r2, r1
 800276a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800276e:	f043 0302 	orr.w	r3, r3, #2
 8002772:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	4611      	mov	r1, r2
 800277e:	4618      	mov	r0, r3
 8002780:	f004 f82c 	bl	80067dc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	015a      	lsls	r2, r3, #5
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	4413      	add	r3, r2
 800278c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002790:	461a      	mov	r2, r3
 8002792:	2310      	movs	r3, #16
 8002794:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	4613      	mov	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	440b      	add	r3, r1
 80027a4:	335d      	adds	r3, #93	; 0x5d
 80027a6:	2208      	movs	r2, #8
 80027a8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	015a      	lsls	r2, r3, #5
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	4413      	add	r3, r2
 80027b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b6:	461a      	mov	r2, r3
 80027b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027bc:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	015a      	lsls	r2, r3, #5
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	4413      	add	r3, r2
 80027c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027d4:	d122      	bne.n	800281c <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	015a      	lsls	r2, r3, #5
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	4413      	add	r3, r2
 80027de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	0151      	lsls	r1, r2, #5
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	440a      	add	r2, r1
 80027ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027f0:	f043 0302 	orr.w	r3, r3, #2
 80027f4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	4611      	mov	r1, r2
 8002800:	4618      	mov	r0, r3
 8002802:	f003 ffeb 	bl	80067dc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	015a      	lsls	r2, r3, #5
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4413      	add	r3, r2
 800280e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002812:	461a      	mov	r2, r3
 8002814:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002818:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800281a:	e300      	b.n	8002e1e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	015a      	lsls	r2, r3, #5
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	4413      	add	r3, r2
 8002824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b01      	cmp	r3, #1
 8002830:	f040 80fd 	bne.w	8002a2e <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d01b      	beq.n	8002874 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	4613      	mov	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	440b      	add	r3, r1
 800284a:	3348      	adds	r3, #72	; 0x48
 800284c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	0159      	lsls	r1, r3, #5
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	440b      	add	r3, r1
 8002856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002860:	1ad1      	subs	r1, r2, r3
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	4613      	mov	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	4403      	add	r3, r0
 8002870:	334c      	adds	r3, #76	; 0x4c
 8002872:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	4613      	mov	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	440b      	add	r3, r1
 8002882:	335d      	adds	r3, #93	; 0x5d
 8002884:	2201      	movs	r2, #1
 8002886:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	4613      	mov	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	440b      	add	r3, r1
 8002896:	3358      	adds	r3, #88	; 0x58
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	015a      	lsls	r2, r3, #5
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	4413      	add	r3, r2
 80028a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a8:	461a      	mov	r2, r3
 80028aa:	2301      	movs	r3, #1
 80028ac:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	4613      	mov	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	440b      	add	r3, r1
 80028bc:	333f      	adds	r3, #63	; 0x3f
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00a      	beq.n	80028da <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80028c4:	6879      	ldr	r1, [r7, #4]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	4613      	mov	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	440b      	add	r3, r1
 80028d2:	333f      	adds	r3, #63	; 0x3f
 80028d4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d121      	bne.n	800291e <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	015a      	lsls	r2, r3, #5
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	4413      	add	r3, r2
 80028e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	0151      	lsls	r1, r2, #5
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	440a      	add	r2, r1
 80028f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028f4:	f043 0302 	orr.w	r3, r3, #2
 80028f8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	b2d2      	uxtb	r2, r2
 8002902:	4611      	mov	r1, r2
 8002904:	4618      	mov	r0, r3
 8002906:	f003 ff69 	bl	80067dc <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	015a      	lsls	r2, r3, #5
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4413      	add	r3, r2
 8002912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002916:	461a      	mov	r2, r3
 8002918:	2310      	movs	r3, #16
 800291a:	6093      	str	r3, [r2, #8]
 800291c:	e070      	b.n	8002a00 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	4613      	mov	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	440b      	add	r3, r1
 800292c:	333f      	adds	r3, #63	; 0x3f
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b03      	cmp	r3, #3
 8002932:	d12a      	bne.n	800298a <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	015a      	lsls	r2, r3, #5
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	4413      	add	r3, r2
 800293c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	0151      	lsls	r1, r2, #5
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	440a      	add	r2, r1
 800294a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800294e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002952:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002954:	6879      	ldr	r1, [r7, #4]
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	4613      	mov	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	440b      	add	r3, r1
 8002962:	335c      	adds	r3, #92	; 0x5c
 8002964:	2201      	movs	r2, #1
 8002966:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	b2d8      	uxtb	r0, r3
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	440b      	add	r3, r1
 800297a:	335c      	adds	r3, #92	; 0x5c
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	461a      	mov	r2, r3
 8002980:	4601      	mov	r1, r0
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7ff fe0c 	bl	80025a0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002988:	e03a      	b.n	8002a00 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	4613      	mov	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	440b      	add	r3, r1
 8002998:	333f      	adds	r3, #63	; 0x3f
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d12f      	bne.n	8002a00 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80029a0:	6879      	ldr	r1, [r7, #4]
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	4613      	mov	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	440b      	add	r3, r1
 80029ae:	335c      	adds	r3, #92	; 0x5c
 80029b0:	2201      	movs	r2, #1
 80029b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80029b4:	6879      	ldr	r1, [r7, #4]
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	4613      	mov	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	440b      	add	r3, r1
 80029c2:	3350      	adds	r3, #80	; 0x50
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	f083 0301 	eor.w	r3, r3, #1
 80029ca:	b2d8      	uxtb	r0, r3
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	4613      	mov	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4413      	add	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	440b      	add	r3, r1
 80029da:	3350      	adds	r3, #80	; 0x50
 80029dc:	4602      	mov	r2, r0
 80029de:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	b2d8      	uxtb	r0, r3
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	4613      	mov	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	440b      	add	r3, r1
 80029f2:	335c      	adds	r3, #92	; 0x5c
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	461a      	mov	r2, r3
 80029f8:	4601      	mov	r1, r0
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7ff fdd0 	bl	80025a0 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	4613      	mov	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	440b      	add	r3, r1
 8002a0e:	3350      	adds	r3, #80	; 0x50
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	f083 0301 	eor.w	r3, r3, #1
 8002a16:	b2d8      	uxtb	r0, r3
 8002a18:	6879      	ldr	r1, [r7, #4]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	440b      	add	r3, r1
 8002a26:	3350      	adds	r3, #80	; 0x50
 8002a28:	4602      	mov	r2, r0
 8002a2a:	701a      	strb	r2, [r3, #0]
}
 8002a2c:	e1f7      	b.n	8002e1e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	015a      	lsls	r2, r3, #5
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	4413      	add	r3, r2
 8002a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	f040 811a 	bne.w	8002c7a <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	015a      	lsls	r2, r3, #5
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	0151      	lsls	r1, r2, #5
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	440a      	add	r2, r1
 8002a5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a60:	f023 0302 	bic.w	r3, r3, #2
 8002a64:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	440b      	add	r3, r1
 8002a74:	335d      	adds	r3, #93	; 0x5d
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d10a      	bne.n	8002a92 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	4613      	mov	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	440b      	add	r3, r1
 8002a8a:	335c      	adds	r3, #92	; 0x5c
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	701a      	strb	r2, [r3, #0]
 8002a90:	e0d9      	b.n	8002c46 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	4613      	mov	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	440b      	add	r3, r1
 8002aa0:	335d      	adds	r3, #93	; 0x5d
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b05      	cmp	r3, #5
 8002aa6:	d10a      	bne.n	8002abe <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002aa8:	6879      	ldr	r1, [r7, #4]
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	440b      	add	r3, r1
 8002ab6:	335c      	adds	r3, #92	; 0x5c
 8002ab8:	2205      	movs	r2, #5
 8002aba:	701a      	strb	r2, [r3, #0]
 8002abc:	e0c3      	b.n	8002c46 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	440b      	add	r3, r1
 8002acc:	335d      	adds	r3, #93	; 0x5d
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b06      	cmp	r3, #6
 8002ad2:	d00a      	beq.n	8002aea <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	440b      	add	r3, r1
 8002ae2:	335d      	adds	r3, #93	; 0x5d
 8002ae4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d156      	bne.n	8002b98 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	4613      	mov	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	440b      	add	r3, r1
 8002af8:	3358      	adds	r3, #88	; 0x58
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	1c59      	adds	r1, r3, #1
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	4613      	mov	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	4403      	add	r3, r0
 8002b0c:	3358      	adds	r3, #88	; 0x58
 8002b0e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	4613      	mov	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	440b      	add	r3, r1
 8002b1e:	3358      	adds	r3, #88	; 0x58
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2b03      	cmp	r3, #3
 8002b24:	d914      	bls.n	8002b50 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	440b      	add	r3, r1
 8002b34:	3358      	adds	r3, #88	; 0x58
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	440b      	add	r3, r1
 8002b48:	335c      	adds	r3, #92	; 0x5c
 8002b4a:	2204      	movs	r2, #4
 8002b4c:	701a      	strb	r2, [r3, #0]
 8002b4e:	e009      	b.n	8002b64 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	4613      	mov	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	440b      	add	r3, r1
 8002b5e:	335c      	adds	r3, #92	; 0x5c
 8002b60:	2202      	movs	r2, #2
 8002b62:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	015a      	lsls	r2, r3, #5
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b7a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b82:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	015a      	lsls	r2, r3, #5
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b90:	461a      	mov	r2, r3
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	e056      	b.n	8002c46 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	440b      	add	r3, r1
 8002ba6:	335d      	adds	r3, #93	; 0x5d
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b03      	cmp	r3, #3
 8002bac:	d123      	bne.n	8002bf6 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	440b      	add	r3, r1
 8002bbc:	335c      	adds	r3, #92	; 0x5c
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	015a      	lsls	r2, r3, #5
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	4413      	add	r3, r2
 8002bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bd8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002be0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	015a      	lsls	r2, r3, #5
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	4413      	add	r3, r2
 8002bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bee:	461a      	mov	r2, r3
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	6013      	str	r3, [r2, #0]
 8002bf4:	e027      	b.n	8002c46 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	440b      	add	r3, r1
 8002c04:	335d      	adds	r3, #93	; 0x5d
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2b07      	cmp	r3, #7
 8002c0a:	d11c      	bne.n	8002c46 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	4613      	mov	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	440b      	add	r3, r1
 8002c1a:	3358      	adds	r3, #88	; 0x58
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	1c59      	adds	r1, r3, #1
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4403      	add	r3, r0
 8002c2e:	3358      	adds	r3, #88	; 0x58
 8002c30:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	4613      	mov	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	440b      	add	r3, r1
 8002c40:	335c      	adds	r3, #92	; 0x5c
 8002c42:	2204      	movs	r2, #4
 8002c44:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	015a      	lsls	r2, r3, #5
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c52:	461a      	mov	r2, r3
 8002c54:	2302      	movs	r3, #2
 8002c56:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	b2d8      	uxtb	r0, r3
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	4613      	mov	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	440b      	add	r3, r1
 8002c6a:	335c      	adds	r3, #92	; 0x5c
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	4601      	mov	r1, r0
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7ff fc94 	bl	80025a0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c78:	e0d1      	b.n	8002e1e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	015a      	lsls	r2, r3, #5
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	4413      	add	r3, r2
 8002c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c8c:	2b80      	cmp	r3, #128	; 0x80
 8002c8e:	d13e      	bne.n	8002d0e <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	015a      	lsls	r2, r3, #5
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	4413      	add	r3, r2
 8002c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	0151      	lsls	r1, r2, #5
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	440a      	add	r2, r1
 8002ca6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002caa:	f043 0302 	orr.w	r3, r3, #2
 8002cae:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	440b      	add	r3, r1
 8002cbe:	3358      	adds	r3, #88	; 0x58
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	1c59      	adds	r1, r3, #1
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	4403      	add	r3, r0
 8002cd2:	3358      	adds	r3, #88	; 0x58
 8002cd4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	440b      	add	r3, r1
 8002ce4:	335d      	adds	r3, #93	; 0x5d
 8002ce6:	2206      	movs	r2, #6
 8002ce8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f003 fd71 	bl	80067dc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	015a      	lsls	r2, r3, #5
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	4413      	add	r3, r2
 8002d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d06:	461a      	mov	r2, r3
 8002d08:	2380      	movs	r3, #128	; 0x80
 8002d0a:	6093      	str	r3, [r2, #8]
}
 8002d0c:	e087      	b.n	8002e1e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	015a      	lsls	r2, r3, #5
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	4413      	add	r3, r2
 8002d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 0310 	and.w	r3, r3, #16
 8002d20:	2b10      	cmp	r3, #16
 8002d22:	d17c      	bne.n	8002e1e <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	440b      	add	r3, r1
 8002d32:	333f      	adds	r3, #63	; 0x3f
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b03      	cmp	r3, #3
 8002d38:	d122      	bne.n	8002d80 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4413      	add	r3, r2
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	440b      	add	r3, r1
 8002d48:	3358      	adds	r3, #88	; 0x58
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	015a      	lsls	r2, r3, #5
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	4413      	add	r3, r2
 8002d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	0151      	lsls	r1, r2, #5
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	440a      	add	r2, r1
 8002d64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d68:	f043 0302 	orr.w	r3, r3, #2
 8002d6c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	b2d2      	uxtb	r2, r2
 8002d76:	4611      	mov	r1, r2
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f003 fd2f 	bl	80067dc <USB_HC_Halt>
 8002d7e:	e045      	b.n	8002e0c <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	4613      	mov	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	440b      	add	r3, r1
 8002d8e:	333f      	adds	r3, #63	; 0x3f
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00a      	beq.n	8002dac <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	440b      	add	r3, r1
 8002da4:	333f      	adds	r3, #63	; 0x3f
 8002da6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d12f      	bne.n	8002e0c <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	4613      	mov	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	440b      	add	r3, r1
 8002dba:	3358      	adds	r3, #88	; 0x58
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d121      	bne.n	8002e0c <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	440b      	add	r3, r1
 8002dd6:	335d      	adds	r3, #93	; 0x5d
 8002dd8:	2203      	movs	r2, #3
 8002dda:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	015a      	lsls	r2, r3, #5
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	0151      	lsls	r1, r2, #5
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	440a      	add	r2, r1
 8002df2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002df6:	f043 0302 	orr.w	r3, r3, #2
 8002dfa:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	b2d2      	uxtb	r2, r2
 8002e04:	4611      	mov	r1, r2
 8002e06:	4618      	mov	r0, r3
 8002e08:	f003 fce8 	bl	80067dc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	015a      	lsls	r2, r3, #5
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	4413      	add	r3, r2
 8002e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e18:	461a      	mov	r2, r3
 8002e1a:	2310      	movs	r3, #16
 8002e1c:	6093      	str	r3, [r2, #8]
}
 8002e1e:	bf00      	nop
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b086      	sub	sp, #24
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
 8002e2e:	460b      	mov	r3, r1
 8002e30:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002e3c:	78fb      	ldrb	r3, [r7, #3]
 8002e3e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	015a      	lsls	r2, r3, #5
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	4413      	add	r3, r2
 8002e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f003 0304 	and.w	r3, r3, #4
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d119      	bne.n	8002e8a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	015a      	lsls	r2, r3, #5
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e62:	461a      	mov	r2, r3
 8002e64:	2304      	movs	r3, #4
 8002e66:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	015a      	lsls	r2, r3, #5
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	4413      	add	r3, r2
 8002e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	0151      	lsls	r1, r2, #5
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	440a      	add	r2, r1
 8002e7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e82:	f043 0302 	orr.w	r3, r3, #2
 8002e86:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002e88:	e33e      	b.n	8003508 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	015a      	lsls	r2, r3, #5
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	4413      	add	r3, r2
 8002e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f003 0320 	and.w	r3, r3, #32
 8002e9c:	2b20      	cmp	r3, #32
 8002e9e:	d141      	bne.n	8002f24 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	015a      	lsls	r2, r3, #5
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eac:	461a      	mov	r2, r3
 8002eae:	2320      	movs	r3, #32
 8002eb0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4413      	add	r3, r2
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	440b      	add	r3, r1
 8002ec0:	333d      	adds	r3, #61	; 0x3d
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	f040 831f 	bne.w	8003508 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	4413      	add	r3, r2
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	440b      	add	r3, r1
 8002ed8:	333d      	adds	r3, #61	; 0x3d
 8002eda:	2200      	movs	r2, #0
 8002edc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	440b      	add	r3, r1
 8002eec:	335c      	adds	r3, #92	; 0x5c
 8002eee:	2202      	movs	r2, #2
 8002ef0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	015a      	lsls	r2, r3, #5
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	4413      	add	r3, r2
 8002efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	0151      	lsls	r1, r2, #5
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	440a      	add	r2, r1
 8002f08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f0c:	f043 0302 	orr.w	r3, r3, #2
 8002f10:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	b2d2      	uxtb	r2, r2
 8002f1a:	4611      	mov	r1, r2
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f003 fc5d 	bl	80067dc <USB_HC_Halt>
}
 8002f22:	e2f1      	b.n	8003508 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	015a      	lsls	r2, r3, #5
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f36:	2b40      	cmp	r3, #64	; 0x40
 8002f38:	d13f      	bne.n	8002fba <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	440b      	add	r3, r1
 8002f48:	335d      	adds	r3, #93	; 0x5d
 8002f4a:	2204      	movs	r2, #4
 8002f4c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	4613      	mov	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	440b      	add	r3, r1
 8002f5c:	333d      	adds	r3, #61	; 0x3d
 8002f5e:	2201      	movs	r2, #1
 8002f60:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	4613      	mov	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4413      	add	r3, r2
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	440b      	add	r3, r1
 8002f70:	3358      	adds	r3, #88	; 0x58
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	015a      	lsls	r2, r3, #5
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	0151      	lsls	r1, r2, #5
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	440a      	add	r2, r1
 8002f8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f90:	f043 0302 	orr.w	r3, r3, #2
 8002f94:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f003 fc1b 	bl	80067dc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	015a      	lsls	r2, r3, #5
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4413      	add	r3, r2
 8002fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	2340      	movs	r3, #64	; 0x40
 8002fb6:	6093      	str	r3, [r2, #8]
}
 8002fb8:	e2a6      	b.n	8003508 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	015a      	lsls	r2, r3, #5
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fd0:	d122      	bne.n	8003018 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	015a      	lsls	r2, r3, #5
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	4413      	add	r3, r2
 8002fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	0151      	lsls	r1, r2, #5
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	440a      	add	r2, r1
 8002fe8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fec:	f043 0302 	orr.w	r3, r3, #2
 8002ff0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	b2d2      	uxtb	r2, r2
 8002ffa:	4611      	mov	r1, r2
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f003 fbed 	bl	80067dc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	015a      	lsls	r2, r3, #5
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	4413      	add	r3, r2
 800300a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800300e:	461a      	mov	r2, r3
 8003010:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003014:	6093      	str	r3, [r2, #8]
}
 8003016:	e277      	b.n	8003508 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	015a      	lsls	r2, r3, #5
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	4413      	add	r3, r2
 8003020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b01      	cmp	r3, #1
 800302c:	d135      	bne.n	800309a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	4613      	mov	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	440b      	add	r3, r1
 800303c:	3358      	adds	r3, #88	; 0x58
 800303e:	2200      	movs	r2, #0
 8003040:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	015a      	lsls	r2, r3, #5
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	4413      	add	r3, r2
 800304a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	0151      	lsls	r1, r2, #5
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	440a      	add	r2, r1
 8003058:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800305c:	f043 0302 	orr.w	r3, r3, #2
 8003060:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	4611      	mov	r1, r2
 800306c:	4618      	mov	r0, r3
 800306e:	f003 fbb5 	bl	80067dc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	015a      	lsls	r2, r3, #5
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	4413      	add	r3, r2
 800307a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800307e:	461a      	mov	r2, r3
 8003080:	2301      	movs	r3, #1
 8003082:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	4613      	mov	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4413      	add	r3, r2
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	440b      	add	r3, r1
 8003092:	335d      	adds	r3, #93	; 0x5d
 8003094:	2201      	movs	r2, #1
 8003096:	701a      	strb	r2, [r3, #0]
}
 8003098:	e236      	b.n	8003508 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	015a      	lsls	r2, r3, #5
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	4413      	add	r3, r2
 80030a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 0308 	and.w	r3, r3, #8
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d12b      	bne.n	8003108 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	015a      	lsls	r2, r3, #5
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030bc:	461a      	mov	r2, r3
 80030be:	2308      	movs	r3, #8
 80030c0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	015a      	lsls	r2, r3, #5
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	4413      	add	r3, r2
 80030ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	0151      	lsls	r1, r2, #5
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	440a      	add	r2, r1
 80030d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030dc:	f043 0302 	orr.w	r3, r3, #2
 80030e0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	4611      	mov	r1, r2
 80030ec:	4618      	mov	r0, r3
 80030ee:	f003 fb75 	bl	80067dc <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	4613      	mov	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4413      	add	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	440b      	add	r3, r1
 8003100:	335d      	adds	r3, #93	; 0x5d
 8003102:	2205      	movs	r2, #5
 8003104:	701a      	strb	r2, [r3, #0]
}
 8003106:	e1ff      	b.n	8003508 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	015a      	lsls	r2, r3, #5
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	4413      	add	r3, r2
 8003110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 0310 	and.w	r3, r3, #16
 800311a:	2b10      	cmp	r3, #16
 800311c:	d155      	bne.n	80031ca <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800311e:	6879      	ldr	r1, [r7, #4]
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	4613      	mov	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	440b      	add	r3, r1
 800312c:	3358      	adds	r3, #88	; 0x58
 800312e:	2200      	movs	r2, #0
 8003130:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	4613      	mov	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4413      	add	r3, r2
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	440b      	add	r3, r1
 8003140:	335d      	adds	r3, #93	; 0x5d
 8003142:	2203      	movs	r2, #3
 8003144:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	4613      	mov	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4413      	add	r3, r2
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	440b      	add	r3, r1
 8003154:	333d      	adds	r3, #61	; 0x3d
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d114      	bne.n	8003186 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	4613      	mov	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4413      	add	r3, r2
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	440b      	add	r3, r1
 800316a:	333c      	adds	r3, #60	; 0x3c
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d109      	bne.n	8003186 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	4613      	mov	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	440b      	add	r3, r1
 8003180:	333d      	adds	r3, #61	; 0x3d
 8003182:	2201      	movs	r2, #1
 8003184:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	015a      	lsls	r2, r3, #5
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	4413      	add	r3, r2
 800318e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	0151      	lsls	r1, r2, #5
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	440a      	add	r2, r1
 800319c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031a0:	f043 0302 	orr.w	r3, r3, #2
 80031a4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	4611      	mov	r1, r2
 80031b0:	4618      	mov	r0, r3
 80031b2:	f003 fb13 	bl	80067dc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	015a      	lsls	r2, r3, #5
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	4413      	add	r3, r2
 80031be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c2:	461a      	mov	r2, r3
 80031c4:	2310      	movs	r3, #16
 80031c6:	6093      	str	r3, [r2, #8]
}
 80031c8:	e19e      	b.n	8003508 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	015a      	lsls	r2, r3, #5
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	4413      	add	r3, r2
 80031d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031dc:	2b80      	cmp	r3, #128	; 0x80
 80031de:	d12b      	bne.n	8003238 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	015a      	lsls	r2, r3, #5
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	4413      	add	r3, r2
 80031e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	0151      	lsls	r1, r2, #5
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	440a      	add	r2, r1
 80031f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031fa:	f043 0302 	orr.w	r3, r3, #2
 80031fe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	4611      	mov	r1, r2
 800320a:	4618      	mov	r0, r3
 800320c:	f003 fae6 	bl	80067dc <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	440b      	add	r3, r1
 800321e:	335d      	adds	r3, #93	; 0x5d
 8003220:	2206      	movs	r2, #6
 8003222:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	015a      	lsls	r2, r3, #5
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	4413      	add	r3, r2
 800322c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003230:	461a      	mov	r2, r3
 8003232:	2380      	movs	r3, #128	; 0x80
 8003234:	6093      	str	r3, [r2, #8]
}
 8003236:	e167      	b.n	8003508 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	015a      	lsls	r2, r3, #5
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	4413      	add	r3, r2
 8003240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800324a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800324e:	d135      	bne.n	80032bc <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	015a      	lsls	r2, r3, #5
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	4413      	add	r3, r2
 8003258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	0151      	lsls	r1, r2, #5
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	440a      	add	r2, r1
 8003266:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800326a:	f043 0302 	orr.w	r3, r3, #2
 800326e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	4611      	mov	r1, r2
 800327a:	4618      	mov	r0, r3
 800327c:	f003 faae 	bl	80067dc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	015a      	lsls	r2, r3, #5
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	4413      	add	r3, r2
 8003288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800328c:	461a      	mov	r2, r3
 800328e:	2310      	movs	r3, #16
 8003290:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	015a      	lsls	r2, r3, #5
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	4413      	add	r3, r2
 800329a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800329e:	461a      	mov	r2, r3
 80032a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032a4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	440b      	add	r3, r1
 80032b4:	335d      	adds	r3, #93	; 0x5d
 80032b6:	2208      	movs	r2, #8
 80032b8:	701a      	strb	r2, [r3, #0]
}
 80032ba:	e125      	b.n	8003508 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	015a      	lsls	r2, r3, #5
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	4413      	add	r3, r2
 80032c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	f040 811a 	bne.w	8003508 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	015a      	lsls	r2, r3, #5
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	4413      	add	r3, r2
 80032dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	0151      	lsls	r1, r2, #5
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	440a      	add	r2, r1
 80032ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032ee:	f023 0302 	bic.w	r3, r3, #2
 80032f2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80032f4:	6879      	ldr	r1, [r7, #4]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	4613      	mov	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	440b      	add	r3, r1
 8003302:	335d      	adds	r3, #93	; 0x5d
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d137      	bne.n	800337a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800330a:	6879      	ldr	r1, [r7, #4]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	4613      	mov	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	440b      	add	r3, r1
 8003318:	335c      	adds	r3, #92	; 0x5c
 800331a:	2201      	movs	r2, #1
 800331c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	4613      	mov	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	440b      	add	r3, r1
 800332c:	333f      	adds	r3, #63	; 0x3f
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b02      	cmp	r3, #2
 8003332:	d00b      	beq.n	800334c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003334:	6879      	ldr	r1, [r7, #4]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	4613      	mov	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	440b      	add	r3, r1
 8003342:	333f      	adds	r3, #63	; 0x3f
 8003344:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003346:	2b03      	cmp	r3, #3
 8003348:	f040 80c5 	bne.w	80034d6 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800334c:	6879      	ldr	r1, [r7, #4]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	4613      	mov	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	440b      	add	r3, r1
 800335a:	3351      	adds	r3, #81	; 0x51
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	f083 0301 	eor.w	r3, r3, #1
 8003362:	b2d8      	uxtb	r0, r3
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	4613      	mov	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	440b      	add	r3, r1
 8003372:	3351      	adds	r3, #81	; 0x51
 8003374:	4602      	mov	r2, r0
 8003376:	701a      	strb	r2, [r3, #0]
 8003378:	e0ad      	b.n	80034d6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	4613      	mov	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	440b      	add	r3, r1
 8003388:	335d      	adds	r3, #93	; 0x5d
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	2b03      	cmp	r3, #3
 800338e:	d10a      	bne.n	80033a6 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	4613      	mov	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	440b      	add	r3, r1
 800339e:	335c      	adds	r3, #92	; 0x5c
 80033a0:	2202      	movs	r2, #2
 80033a2:	701a      	strb	r2, [r3, #0]
 80033a4:	e097      	b.n	80034d6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4613      	mov	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	440b      	add	r3, r1
 80033b4:	335d      	adds	r3, #93	; 0x5d
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b04      	cmp	r3, #4
 80033ba:	d10a      	bne.n	80033d2 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	4613      	mov	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	440b      	add	r3, r1
 80033ca:	335c      	adds	r3, #92	; 0x5c
 80033cc:	2202      	movs	r2, #2
 80033ce:	701a      	strb	r2, [r3, #0]
 80033d0:	e081      	b.n	80034d6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	4613      	mov	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4413      	add	r3, r2
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	440b      	add	r3, r1
 80033e0:	335d      	adds	r3, #93	; 0x5d
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b05      	cmp	r3, #5
 80033e6:	d10a      	bne.n	80033fe <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	4613      	mov	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	440b      	add	r3, r1
 80033f6:	335c      	adds	r3, #92	; 0x5c
 80033f8:	2205      	movs	r2, #5
 80033fa:	701a      	strb	r2, [r3, #0]
 80033fc:	e06b      	b.n	80034d6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	4613      	mov	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	440b      	add	r3, r1
 800340c:	335d      	adds	r3, #93	; 0x5d
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	2b06      	cmp	r3, #6
 8003412:	d00a      	beq.n	800342a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	4613      	mov	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	440b      	add	r3, r1
 8003422:	335d      	adds	r3, #93	; 0x5d
 8003424:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003426:	2b08      	cmp	r3, #8
 8003428:	d155      	bne.n	80034d6 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	4613      	mov	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	440b      	add	r3, r1
 8003438:	3358      	adds	r3, #88	; 0x58
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	1c59      	adds	r1, r3, #1
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	4403      	add	r3, r0
 800344c:	3358      	adds	r3, #88	; 0x58
 800344e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	4613      	mov	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	440b      	add	r3, r1
 800345e:	3358      	adds	r3, #88	; 0x58
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2b03      	cmp	r3, #3
 8003464:	d914      	bls.n	8003490 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	4613      	mov	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4413      	add	r3, r2
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	440b      	add	r3, r1
 8003474:	3358      	adds	r3, #88	; 0x58
 8003476:	2200      	movs	r2, #0
 8003478:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	4613      	mov	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	440b      	add	r3, r1
 8003488:	335c      	adds	r3, #92	; 0x5c
 800348a:	2204      	movs	r2, #4
 800348c:	701a      	strb	r2, [r3, #0]
 800348e:	e009      	b.n	80034a4 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	4613      	mov	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	440b      	add	r3, r1
 800349e:	335c      	adds	r3, #92	; 0x5c
 80034a0:	2202      	movs	r2, #2
 80034a2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	015a      	lsls	r2, r3, #5
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	4413      	add	r3, r2
 80034ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034ba:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034c2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	015a      	lsls	r2, r3, #5
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	4413      	add	r3, r2
 80034cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034d0:	461a      	mov	r2, r3
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	015a      	lsls	r2, r3, #5
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	4413      	add	r3, r2
 80034de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e2:	461a      	mov	r2, r3
 80034e4:	2302      	movs	r3, #2
 80034e6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	b2d8      	uxtb	r0, r3
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	4613      	mov	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	440b      	add	r3, r1
 80034fa:	335c      	adds	r3, #92	; 0x5c
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	461a      	mov	r2, r3
 8003500:	4601      	mov	r1, r0
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7ff f84c 	bl	80025a0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003508:	bf00      	nop
 800350a:	3718      	adds	r7, #24
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b08a      	sub	sp, #40	; 0x28
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	f003 030f 	and.w	r3, r3, #15
 8003530:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	0c5b      	lsrs	r3, r3, #17
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	091b      	lsrs	r3, r3, #4
 8003540:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003544:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2b02      	cmp	r3, #2
 800354a:	d003      	beq.n	8003554 <HCD_RXQLVL_IRQHandler+0x44>
 800354c:	2b05      	cmp	r3, #5
 800354e:	f000 8082 	beq.w	8003656 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003552:	e083      	b.n	800365c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d07f      	beq.n	800365a <HCD_RXQLVL_IRQHandler+0x14a>
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	4613      	mov	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4413      	add	r3, r2
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	440b      	add	r3, r1
 8003568:	3344      	adds	r3, #68	; 0x44
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d074      	beq.n	800365a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6818      	ldr	r0, [r3, #0]
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	4613      	mov	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4413      	add	r3, r2
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	440b      	add	r3, r1
 8003582:	3344      	adds	r3, #68	; 0x44
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	b292      	uxth	r2, r2
 800358a:	4619      	mov	r1, r3
 800358c:	f002 ff68 	bl	8006460 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	4613      	mov	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	440b      	add	r3, r1
 800359e:	3344      	adds	r3, #68	; 0x44
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	18d1      	adds	r1, r2, r3
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	4613      	mov	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4413      	add	r3, r2
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	4403      	add	r3, r0
 80035b4:	3344      	adds	r3, #68	; 0x44
 80035b6:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	4613      	mov	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	440b      	add	r3, r1
 80035c6:	334c      	adds	r3, #76	; 0x4c
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	18d1      	adds	r1, r2, r3
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	4613      	mov	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4413      	add	r3, r2
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	4403      	add	r3, r0
 80035dc:	334c      	adds	r3, #76	; 0x4c
 80035de:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	015a      	lsls	r2, r3, #5
 80035e4:	6a3b      	ldr	r3, [r7, #32]
 80035e6:	4413      	add	r3, r2
 80035e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ec:	691a      	ldr	r2, [r3, #16]
 80035ee:	4b1d      	ldr	r3, [pc, #116]	; (8003664 <HCD_RXQLVL_IRQHandler+0x154>)
 80035f0:	4013      	ands	r3, r2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d031      	beq.n	800365a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	015a      	lsls	r2, r3, #5
 80035fa:	6a3b      	ldr	r3, [r7, #32]
 80035fc:	4413      	add	r3, r2
 80035fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800360c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003614:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	015a      	lsls	r2, r3, #5
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	4413      	add	r3, r2
 800361e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003622:	461a      	mov	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	4613      	mov	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	440b      	add	r3, r1
 8003636:	3350      	adds	r3, #80	; 0x50
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	f083 0301 	eor.w	r3, r3, #1
 800363e:	b2d8      	uxtb	r0, r3
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	4613      	mov	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	440b      	add	r3, r1
 800364e:	3350      	adds	r3, #80	; 0x50
 8003650:	4602      	mov	r2, r0
 8003652:	701a      	strb	r2, [r3, #0]
      break;
 8003654:	e001      	b.n	800365a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003656:	bf00      	nop
 8003658:	e000      	b.n	800365c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800365a:	bf00      	nop
  }
}
 800365c:	bf00      	nop
 800365e:	3728      	adds	r7, #40	; 0x28
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	1ff80000 	.word	0x1ff80000

08003668 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003694:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b02      	cmp	r3, #2
 800369e:	d10b      	bne.n	80036b8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d102      	bne.n	80036b0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7fe ff50 	bl	8002550 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	f043 0302 	orr.w	r3, r3, #2
 80036b6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b08      	cmp	r3, #8
 80036c0:	d132      	bne.n	8003728 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	f043 0308 	orr.w	r3, r3, #8
 80036c8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d126      	bne.n	8003722 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d113      	bne.n	8003704 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80036e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036e6:	d106      	bne.n	80036f6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2102      	movs	r1, #2
 80036ee:	4618      	mov	r0, r3
 80036f0:	f002 fff0 	bl	80066d4 <USB_InitFSLSPClkSel>
 80036f4:	e011      	b.n	800371a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2101      	movs	r1, #1
 80036fc:	4618      	mov	r0, r3
 80036fe:	f002 ffe9 	bl	80066d4 <USB_InitFSLSPClkSel>
 8003702:	e00a      	b.n	800371a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d106      	bne.n	800371a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003712:	461a      	mov	r2, r3
 8003714:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003718:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7fe ff2c 	bl	8002578 <HAL_HCD_PortEnabled_Callback>
 8003720:	e002      	b.n	8003728 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7fe ff32 	bl	800258c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f003 0320 	and.w	r3, r3, #32
 800372e:	2b20      	cmp	r3, #32
 8003730:	d103      	bne.n	800373a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	f043 0320 	orr.w	r3, r3, #32
 8003738:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003740:	461a      	mov	r2, r3
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	6013      	str	r3, [r2, #0]
}
 8003746:	bf00      	nop
 8003748:	3718      	adds	r7, #24
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
	...

08003750 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e11f      	b.n	80039a2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d106      	bne.n	800377c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7fd fbee 	bl	8000f58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2224      	movs	r2, #36	; 0x24
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 0201 	bic.w	r2, r2, #1
 8003792:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037b4:	f001 f922 	bl	80049fc <HAL_RCC_GetPCLK1Freq>
 80037b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	4a7b      	ldr	r2, [pc, #492]	; (80039ac <HAL_I2C_Init+0x25c>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d807      	bhi.n	80037d4 <HAL_I2C_Init+0x84>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4a7a      	ldr	r2, [pc, #488]	; (80039b0 <HAL_I2C_Init+0x260>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	bf94      	ite	ls
 80037cc:	2301      	movls	r3, #1
 80037ce:	2300      	movhi	r3, #0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	e006      	b.n	80037e2 <HAL_I2C_Init+0x92>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4a77      	ldr	r2, [pc, #476]	; (80039b4 <HAL_I2C_Init+0x264>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	bf94      	ite	ls
 80037dc:	2301      	movls	r3, #1
 80037de:	2300      	movhi	r3, #0
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e0db      	b.n	80039a2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	4a72      	ldr	r2, [pc, #456]	; (80039b8 <HAL_I2C_Init+0x268>)
 80037ee:	fba2 2303 	umull	r2, r3, r2, r3
 80037f2:	0c9b      	lsrs	r3, r3, #18
 80037f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	430a      	orrs	r2, r1
 8003808:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	4a64      	ldr	r2, [pc, #400]	; (80039ac <HAL_I2C_Init+0x25c>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d802      	bhi.n	8003824 <HAL_I2C_Init+0xd4>
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	3301      	adds	r3, #1
 8003822:	e009      	b.n	8003838 <HAL_I2C_Init+0xe8>
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800382a:	fb02 f303 	mul.w	r3, r2, r3
 800382e:	4a63      	ldr	r2, [pc, #396]	; (80039bc <HAL_I2C_Init+0x26c>)
 8003830:	fba2 2303 	umull	r2, r3, r2, r3
 8003834:	099b      	lsrs	r3, r3, #6
 8003836:	3301      	adds	r3, #1
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	6812      	ldr	r2, [r2, #0]
 800383c:	430b      	orrs	r3, r1
 800383e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800384a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	4956      	ldr	r1, [pc, #344]	; (80039ac <HAL_I2C_Init+0x25c>)
 8003854:	428b      	cmp	r3, r1
 8003856:	d80d      	bhi.n	8003874 <HAL_I2C_Init+0x124>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	1e59      	subs	r1, r3, #1
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	fbb1 f3f3 	udiv	r3, r1, r3
 8003866:	3301      	adds	r3, #1
 8003868:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800386c:	2b04      	cmp	r3, #4
 800386e:	bf38      	it	cc
 8003870:	2304      	movcc	r3, #4
 8003872:	e04f      	b.n	8003914 <HAL_I2C_Init+0x1c4>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d111      	bne.n	80038a0 <HAL_I2C_Init+0x150>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	1e58      	subs	r0, r3, #1
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6859      	ldr	r1, [r3, #4]
 8003884:	460b      	mov	r3, r1
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	440b      	add	r3, r1
 800388a:	fbb0 f3f3 	udiv	r3, r0, r3
 800388e:	3301      	adds	r3, #1
 8003890:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003894:	2b00      	cmp	r3, #0
 8003896:	bf0c      	ite	eq
 8003898:	2301      	moveq	r3, #1
 800389a:	2300      	movne	r3, #0
 800389c:	b2db      	uxtb	r3, r3
 800389e:	e012      	b.n	80038c6 <HAL_I2C_Init+0x176>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	1e58      	subs	r0, r3, #1
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6859      	ldr	r1, [r3, #4]
 80038a8:	460b      	mov	r3, r1
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	0099      	lsls	r1, r3, #2
 80038b0:	440b      	add	r3, r1
 80038b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80038b6:	3301      	adds	r3, #1
 80038b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038bc:	2b00      	cmp	r3, #0
 80038be:	bf0c      	ite	eq
 80038c0:	2301      	moveq	r3, #1
 80038c2:	2300      	movne	r3, #0
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <HAL_I2C_Init+0x17e>
 80038ca:	2301      	movs	r3, #1
 80038cc:	e022      	b.n	8003914 <HAL_I2C_Init+0x1c4>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10e      	bne.n	80038f4 <HAL_I2C_Init+0x1a4>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	1e58      	subs	r0, r3, #1
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6859      	ldr	r1, [r3, #4]
 80038de:	460b      	mov	r3, r1
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	440b      	add	r3, r1
 80038e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80038e8:	3301      	adds	r3, #1
 80038ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038f2:	e00f      	b.n	8003914 <HAL_I2C_Init+0x1c4>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	1e58      	subs	r0, r3, #1
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6859      	ldr	r1, [r3, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	0099      	lsls	r1, r3, #2
 8003904:	440b      	add	r3, r1
 8003906:	fbb0 f3f3 	udiv	r3, r0, r3
 800390a:	3301      	adds	r3, #1
 800390c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003910:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	6809      	ldr	r1, [r1, #0]
 8003918:	4313      	orrs	r3, r2
 800391a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	69da      	ldr	r2, [r3, #28]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003942:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6911      	ldr	r1, [r2, #16]
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	68d2      	ldr	r2, [r2, #12]
 800394e:	4311      	orrs	r1, r2
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6812      	ldr	r2, [r2, #0]
 8003954:	430b      	orrs	r3, r1
 8003956:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	695a      	ldr	r2, [r3, #20]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 0201 	orr.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2220      	movs	r2, #32
 800398e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	000186a0 	.word	0x000186a0
 80039b0:	001e847f 	.word	0x001e847f
 80039b4:	003d08ff 	.word	0x003d08ff
 80039b8:	431bde83 	.word	0x431bde83
 80039bc:	10624dd3 	.word	0x10624dd3

080039c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b20      	cmp	r3, #32
 80039d4:	d129      	bne.n	8003a2a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2224      	movs	r2, #36	; 0x24
 80039da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 0201 	bic.w	r2, r2, #1
 80039ec:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 0210 	bic.w	r2, r2, #16
 80039fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f042 0201 	orr.w	r2, r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2220      	movs	r2, #32
 8003a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a26:	2300      	movs	r3, #0
 8003a28:	e000      	b.n	8003a2c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003a2a:	2302      	movs	r3, #2
  }
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003a42:	2300      	movs	r3, #0
 8003a44:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b20      	cmp	r3, #32
 8003a50:	d12a      	bne.n	8003aa8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2224      	movs	r2, #36	; 0x24
 8003a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 0201 	bic.w	r2, r2, #1
 8003a68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003a72:	89fb      	ldrh	r3, [r7, #14]
 8003a74:	f023 030f 	bic.w	r3, r3, #15
 8003a78:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	89fb      	ldrh	r3, [r7, #14]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	89fa      	ldrh	r2, [r7, #14]
 8003a8a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0201 	orr.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	e000      	b.n	8003aaa <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003aa8:	2302      	movs	r3, #2
  }
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3714      	adds	r7, #20
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
	...

08003ab8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e0bf      	b.n	8003c4a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d106      	bne.n	8003ae4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7fd faa4 	bl	800102c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	699a      	ldr	r2, [r3, #24]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003afa:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6999      	ldr	r1, [r3, #24]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003b10:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6899      	ldr	r1, [r3, #8]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	4b4a      	ldr	r3, [pc, #296]	; (8003c54 <HAL_LTDC_Init+0x19c>)
 8003b2c:	400b      	ands	r3, r1
 8003b2e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	041b      	lsls	r3, r3, #16
 8003b36:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6899      	ldr	r1, [r3, #8]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	699a      	ldr	r2, [r3, #24]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	431a      	orrs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68d9      	ldr	r1, [r3, #12]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	4b3e      	ldr	r3, [pc, #248]	; (8003c54 <HAL_LTDC_Init+0x19c>)
 8003b5a:	400b      	ands	r3, r1
 8003b5c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	041b      	lsls	r3, r3, #16
 8003b64:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68d9      	ldr	r1, [r3, #12]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a1a      	ldr	r2, [r3, #32]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6919      	ldr	r1, [r3, #16]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	4b33      	ldr	r3, [pc, #204]	; (8003c54 <HAL_LTDC_Init+0x19c>)
 8003b88:	400b      	ands	r3, r1
 8003b8a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	041b      	lsls	r3, r3, #16
 8003b92:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6919      	ldr	r1, [r3, #16]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6959      	ldr	r1, [r3, #20]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	4b27      	ldr	r3, [pc, #156]	; (8003c54 <HAL_LTDC_Init+0x19c>)
 8003bb6:	400b      	ands	r3, r1
 8003bb8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbe:	041b      	lsls	r3, r3, #16
 8003bc0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6959      	ldr	r1, [r3, #20]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bde:	021b      	lsls	r3, r3, #8
 8003be0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003be8:	041b      	lsls	r3, r3, #16
 8003bea:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003bfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	430a      	orrs	r2, r1
 8003c16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0206 	orr.w	r2, r2, #6
 8003c26:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699a      	ldr	r2, [r3, #24]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f042 0201 	orr.w	r2, r2, #1
 8003c36:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	f000f800 	.word	0xf000f800

08003c58 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c66:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c6e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f003 0304 	and.w	r3, r3, #4
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d023      	beq.n	8003cc2 <HAL_LTDC_IRQHandler+0x6a>
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d01e      	beq.n	8003cc2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 0204 	bic.w	r2, r2, #4
 8003c92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2204      	movs	r2, #4
 8003c9a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ca2:	f043 0201 	orr.w	r2, r3, #1
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2204      	movs	r2, #4
 8003cb0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 f86f 	bl	8003da0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d023      	beq.n	8003d14 <HAL_LTDC_IRQHandler+0xbc>
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d01e      	beq.n	8003d14 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0202 	bic.w	r2, r2, #2
 8003ce4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2202      	movs	r2, #2
 8003cec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003cf4:	f043 0202 	orr.w	r2, r3, #2
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2204      	movs	r2, #4
 8003d02:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f846 	bl	8003da0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d01b      	beq.n	8003d56 <HAL_LTDC_IRQHandler+0xfe>
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d016      	beq.n	8003d56 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 0201 	bic.w	r2, r2, #1
 8003d36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 f82f 	bl	8003db4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f003 0308 	and.w	r3, r3, #8
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d01b      	beq.n	8003d98 <HAL_LTDC_IRQHandler+0x140>
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	f003 0308 	and.w	r3, r3, #8
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d016      	beq.n	8003d98 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 0208 	bic.w	r2, r2, #8
 8003d78:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2208      	movs	r2, #8
 8003d80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f818 	bl	8003dc8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8003d98:	bf00      	nop
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003ddc:	b5b0      	push	{r4, r5, r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d101      	bne.n	8003df6 <HAL_LTDC_ConfigLayer+0x1a>
 8003df2:	2302      	movs	r3, #2
 8003df4:	e02c      	b.n	8003e50 <HAL_LTDC_ConfigLayer+0x74>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2202      	movs	r2, #2
 8003e02:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2134      	movs	r1, #52	; 0x34
 8003e0c:	fb01 f303 	mul.w	r3, r1, r3
 8003e10:	4413      	add	r3, r2
 8003e12:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	4614      	mov	r4, r2
 8003e1a:	461d      	mov	r5, r3
 8003e1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e28:	682b      	ldr	r3, [r5, #0]
 8003e2a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	68b9      	ldr	r1, [r7, #8]
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f000 f811 	bl	8003e58 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bdb0      	pop	{r4, r5, r7, pc}

08003e58 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b089      	sub	sp, #36	; 0x24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	0c1b      	lsrs	r3, r3, #16
 8003e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e74:	4413      	add	r3, r2
 8003e76:	041b      	lsls	r3, r3, #16
 8003e78:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	01db      	lsls	r3, r3, #7
 8003e84:	4413      	add	r3, r2
 8003e86:	3384      	adds	r3, #132	; 0x84
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	6812      	ldr	r2, [r2, #0]
 8003e8e:	4611      	mov	r1, r2
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	01d2      	lsls	r2, r2, #7
 8003e94:	440a      	add	r2, r1
 8003e96:	3284      	adds	r2, #132	; 0x84
 8003e98:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003e9c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	0c1b      	lsrs	r3, r3, #16
 8003eaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eae:	4413      	add	r3, r2
 8003eb0:	1c5a      	adds	r2, r3, #1
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	01db      	lsls	r3, r3, #7
 8003ebc:	440b      	add	r3, r1
 8003ebe:	3384      	adds	r3, #132	; 0x84
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	68da      	ldr	r2, [r3, #12]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ed6:	4413      	add	r3, r2
 8003ed8:	041b      	lsls	r3, r3, #16
 8003eda:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	01db      	lsls	r3, r3, #7
 8003ee6:	4413      	add	r3, r2
 8003ee8:	3384      	adds	r3, #132	; 0x84
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	6812      	ldr	r2, [r2, #0]
 8003ef0:	4611      	mov	r1, r2
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	01d2      	lsls	r2, r2, #7
 8003ef6:	440a      	add	r2, r1
 8003ef8:	3284      	adds	r2, #132	; 0x84
 8003efa:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003efe:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f0e:	4413      	add	r3, r2
 8003f10:	1c5a      	adds	r2, r3, #1
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4619      	mov	r1, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	01db      	lsls	r3, r3, #7
 8003f1c:	440b      	add	r3, r1
 8003f1e:	3384      	adds	r3, #132	; 0x84
 8003f20:	4619      	mov	r1, r3
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	01db      	lsls	r3, r3, #7
 8003f32:	4413      	add	r3, r2
 8003f34:	3384      	adds	r3, #132	; 0x84
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	6812      	ldr	r2, [r2, #0]
 8003f3c:	4611      	mov	r1, r2
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	01d2      	lsls	r2, r2, #7
 8003f42:	440a      	add	r2, r1
 8003f44:	3284      	adds	r2, #132	; 0x84
 8003f46:	f023 0307 	bic.w	r3, r3, #7
 8003f4a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	461a      	mov	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	01db      	lsls	r3, r3, #7
 8003f56:	4413      	add	r3, r2
 8003f58:	3384      	adds	r3, #132	; 0x84
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003f68:	021b      	lsls	r3, r3, #8
 8003f6a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003f72:	041b      	lsls	r3, r3, #16
 8003f74:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	061b      	lsls	r3, r3, #24
 8003f7c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	461a      	mov	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	01db      	lsls	r3, r3, #7
 8003f88:	4413      	add	r3, r2
 8003f8a:	3384      	adds	r3, #132	; 0x84
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	461a      	mov	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	01db      	lsls	r3, r3, #7
 8003f98:	4413      	add	r3, r2
 8003f9a:	3384      	adds	r3, #132	; 0x84
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003fa8:	461a      	mov	r2, r3
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	431a      	orrs	r2, r3
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	01db      	lsls	r3, r3, #7
 8003fbc:	440b      	add	r3, r1
 8003fbe:	3384      	adds	r3, #132	; 0x84
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	461a      	mov	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	01db      	lsls	r3, r3, #7
 8003fd2:	4413      	add	r3, r2
 8003fd4:	3384      	adds	r3, #132	; 0x84
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	6812      	ldr	r2, [r2, #0]
 8003fdc:	4611      	mov	r1, r2
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	01d2      	lsls	r2, r2, #7
 8003fe2:	440a      	add	r2, r1
 8003fe4:	3284      	adds	r2, #132	; 0x84
 8003fe6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003fea:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	01db      	lsls	r3, r3, #7
 8003ff6:	4413      	add	r3, r2
 8003ff8:	3384      	adds	r3, #132	; 0x84
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	461a      	mov	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	01db      	lsls	r3, r3, #7
 800400c:	4413      	add	r3, r2
 800400e:	3384      	adds	r3, #132	; 0x84
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	6812      	ldr	r2, [r2, #0]
 8004016:	4611      	mov	r1, r2
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	01d2      	lsls	r2, r2, #7
 800401c:	440a      	add	r2, r1
 800401e:	3284      	adds	r2, #132	; 0x84
 8004020:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004024:	f023 0307 	bic.w	r3, r3, #7
 8004028:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	69da      	ldr	r2, [r3, #28]
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	68f9      	ldr	r1, [r7, #12]
 8004034:	6809      	ldr	r1, [r1, #0]
 8004036:	4608      	mov	r0, r1
 8004038:	6879      	ldr	r1, [r7, #4]
 800403a:	01c9      	lsls	r1, r1, #7
 800403c:	4401      	add	r1, r0
 800403e:	3184      	adds	r1, #132	; 0x84
 8004040:	4313      	orrs	r3, r2
 8004042:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	461a      	mov	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	01db      	lsls	r3, r3, #7
 800404e:	4413      	add	r3, r2
 8004050:	3384      	adds	r3, #132	; 0x84
 8004052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	461a      	mov	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	01db      	lsls	r3, r3, #7
 800405e:	4413      	add	r3, r2
 8004060:	3384      	adds	r3, #132	; 0x84
 8004062:	461a      	mov	r2, r3
 8004064:	2300      	movs	r3, #0
 8004066:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	461a      	mov	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	01db      	lsls	r3, r3, #7
 8004072:	4413      	add	r3, r2
 8004074:	3384      	adds	r3, #132	; 0x84
 8004076:	461a      	mov	r2, r3
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d102      	bne.n	800408c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004086:	2304      	movs	r3, #4
 8004088:	61fb      	str	r3, [r7, #28]
 800408a:	e01b      	b.n	80040c4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d102      	bne.n	800409a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004094:	2303      	movs	r3, #3
 8004096:	61fb      	str	r3, [r7, #28]
 8004098:	e014      	b.n	80040c4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	2b04      	cmp	r3, #4
 80040a0:	d00b      	beq.n	80040ba <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d007      	beq.n	80040ba <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80040ae:	2b03      	cmp	r3, #3
 80040b0:	d003      	beq.n	80040ba <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80040b6:	2b07      	cmp	r3, #7
 80040b8:	d102      	bne.n	80040c0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80040ba:	2302      	movs	r3, #2
 80040bc:	61fb      	str	r3, [r7, #28]
 80040be:	e001      	b.n	80040c4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80040c0:	2301      	movs	r3, #1
 80040c2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	461a      	mov	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	01db      	lsls	r3, r3, #7
 80040ce:	4413      	add	r3, r2
 80040d0:	3384      	adds	r3, #132	; 0x84
 80040d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	6812      	ldr	r2, [r2, #0]
 80040d8:	4611      	mov	r1, r2
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	01d2      	lsls	r2, r2, #7
 80040de:	440a      	add	r2, r1
 80040e0:	3284      	adds	r2, #132	; 0x84
 80040e2:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80040e6:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ec:	69fa      	ldr	r2, [r7, #28]
 80040ee:	fb02 f303 	mul.w	r3, r2, r3
 80040f2:	041a      	lsls	r2, r3, #16
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	6859      	ldr	r1, [r3, #4]
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	1acb      	subs	r3, r1, r3
 80040fe:	69f9      	ldr	r1, [r7, #28]
 8004100:	fb01 f303 	mul.w	r3, r1, r3
 8004104:	3303      	adds	r3, #3
 8004106:	68f9      	ldr	r1, [r7, #12]
 8004108:	6809      	ldr	r1, [r1, #0]
 800410a:	4608      	mov	r0, r1
 800410c:	6879      	ldr	r1, [r7, #4]
 800410e:	01c9      	lsls	r1, r1, #7
 8004110:	4401      	add	r1, r0
 8004112:	3184      	adds	r1, #132	; 0x84
 8004114:	4313      	orrs	r3, r2
 8004116:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	461a      	mov	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	01db      	lsls	r3, r3, #7
 8004122:	4413      	add	r3, r2
 8004124:	3384      	adds	r3, #132	; 0x84
 8004126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	6812      	ldr	r2, [r2, #0]
 800412c:	4611      	mov	r1, r2
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	01d2      	lsls	r2, r2, #7
 8004132:	440a      	add	r2, r1
 8004134:	3284      	adds	r2, #132	; 0x84
 8004136:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800413a:	f023 0307 	bic.w	r3, r3, #7
 800413e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	461a      	mov	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	01db      	lsls	r3, r3, #7
 800414a:	4413      	add	r3, r2
 800414c:	3384      	adds	r3, #132	; 0x84
 800414e:	461a      	mov	r2, r3
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004154:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	461a      	mov	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	01db      	lsls	r3, r3, #7
 8004160:	4413      	add	r3, r2
 8004162:	3384      	adds	r3, #132	; 0x84
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	6812      	ldr	r2, [r2, #0]
 800416a:	4611      	mov	r1, r2
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	01d2      	lsls	r2, r2, #7
 8004170:	440a      	add	r2, r1
 8004172:	3284      	adds	r2, #132	; 0x84
 8004174:	f043 0301 	orr.w	r3, r3, #1
 8004178:	6013      	str	r3, [r2, #0]
}
 800417a:	bf00      	nop
 800417c:	3724      	adds	r7, #36	; 0x24
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
	...

08004188 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e25b      	b.n	8004652 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d075      	beq.n	8004292 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041a6:	4ba3      	ldr	r3, [pc, #652]	; (8004434 <HAL_RCC_OscConfig+0x2ac>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f003 030c 	and.w	r3, r3, #12
 80041ae:	2b04      	cmp	r3, #4
 80041b0:	d00c      	beq.n	80041cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041b2:	4ba0      	ldr	r3, [pc, #640]	; (8004434 <HAL_RCC_OscConfig+0x2ac>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041ba:	2b08      	cmp	r3, #8
 80041bc:	d112      	bne.n	80041e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041be:	4b9d      	ldr	r3, [pc, #628]	; (8004434 <HAL_RCC_OscConfig+0x2ac>)
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041ca:	d10b      	bne.n	80041e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041cc:	4b99      	ldr	r3, [pc, #612]	; (8004434 <HAL_RCC_OscConfig+0x2ac>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d05b      	beq.n	8004290 <HAL_RCC_OscConfig+0x108>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d157      	bne.n	8004290 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e236      	b.n	8004652 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ec:	d106      	bne.n	80041fc <HAL_RCC_OscConfig+0x74>
 80041ee:	4b91      	ldr	r3, [pc, #580]	; (8004434 <HAL_RCC_OscConfig+0x2ac>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a90      	ldr	r2, [pc, #576]	; (8004434 <HAL_RCC_OscConfig+0x2ac>)
 80041f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	e01d      	b.n	8004238 <HAL_RCC_OscConfig+0xb0>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004204:	d10c      	bne.n	8004220 <HAL_RCC_OscConfig+0x98>
 8004206:	4b8b      	ldr	r3, [pc, #556]	; (8004434 <HAL_RCC_OscConfig+0x2ac>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a8a      	ldr	r2, [pc, #552]	; (8004434 <HAL_RCC_OscConfig+0x2ac>)
 800420c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004210:	6013      	str	r3, [r2, #0]
 8004212:	4b88      	ldr	r3, [pc, #544]	; (8004434 <HAL_RCC_OscConfig+0x2ac>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a87      	ldr	r2, [pc, #540]	; (8004434 <HAL_RCC_OscConfig+0x2ac>)
 8004218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	e00b      	b.n	8004238 <HAL_RCC_OscConfig+0xb0>
 8004220:	4b84      	ldr	r3, [pc, #528]	; (8004434 <HAL_RCC_OscConfig+0x2ac>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a83      	ldr	r2, [pc, #524]	; (8004434 <HAL_RCC_OscConfig+0x2ac>)
 8004226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800422a:	6013      	str	r3, [r2, #0]
 800422c:	4b81      	ldr	r3, [pc, #516]	; (8004434 <HAL_RCC_OscConfig+0x2ac>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a80      	ldr	r2, [pc, #512]	; (8004434 <HAL_RCC_OscConfig+0x2ac>)
 8004232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004236:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d013      	beq.n	8004268 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004240:	f7fd fb20 	bl	8001884 <HAL_GetTick>
 8004244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004246:	e008      	b.n	800425a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004248:	f7fd fb1c 	bl	8001884 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b64      	cmp	r3, #100	; 0x64
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e1fb      	b.n	8004652 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800425a:	4b76      	ldr	r3, [pc, #472]	; (8004434 <HAL_RCC_OscConfig+0x2ac>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d0f0      	beq.n	8004248 <HAL_RCC_OscConfig+0xc0>
 8004266:	e014      	b.n	8004292 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004268:	f7fd fb0c 	bl	8001884 <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004270:	f7fd fb08 	bl	8001884 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b64      	cmp	r3, #100	; 0x64
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e1e7      	b.n	8004652 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004282:	4b6c      	ldr	r3, [pc, #432]	; (8004434 <HAL_RCC_OscConfig+0x2ac>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1f0      	bne.n	8004270 <HAL_RCC_OscConfig+0xe8>
 800428e:	e000      	b.n	8004292 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d063      	beq.n	8004366 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800429e:	4b65      	ldr	r3, [pc, #404]	; (8004434 <HAL_RCC_OscConfig+0x2ac>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 030c 	and.w	r3, r3, #12
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00b      	beq.n	80042c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042aa:	4b62      	ldr	r3, [pc, #392]	; (8004434 <HAL_RCC_OscConfig+0x2ac>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042b2:	2b08      	cmp	r3, #8
 80042b4:	d11c      	bne.n	80042f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042b6:	4b5f      	ldr	r3, [pc, #380]	; (8004434 <HAL_RCC_OscConfig+0x2ac>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d116      	bne.n	80042f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042c2:	4b5c      	ldr	r3, [pc, #368]	; (8004434 <HAL_RCC_OscConfig+0x2ac>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d005      	beq.n	80042da <HAL_RCC_OscConfig+0x152>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d001      	beq.n	80042da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e1bb      	b.n	8004652 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042da:	4b56      	ldr	r3, [pc, #344]	; (8004434 <HAL_RCC_OscConfig+0x2ac>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	00db      	lsls	r3, r3, #3
 80042e8:	4952      	ldr	r1, [pc, #328]	; (8004434 <HAL_RCC_OscConfig+0x2ac>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ee:	e03a      	b.n	8004366 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d020      	beq.n	800433a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042f8:	4b4f      	ldr	r3, [pc, #316]	; (8004438 <HAL_RCC_OscConfig+0x2b0>)
 80042fa:	2201      	movs	r2, #1
 80042fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fe:	f7fd fac1 	bl	8001884 <HAL_GetTick>
 8004302:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004304:	e008      	b.n	8004318 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004306:	f7fd fabd 	bl	8001884 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d901      	bls.n	8004318 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e19c      	b.n	8004652 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004318:	4b46      	ldr	r3, [pc, #280]	; (8004434 <HAL_RCC_OscConfig+0x2ac>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0302 	and.w	r3, r3, #2
 8004320:	2b00      	cmp	r3, #0
 8004322:	d0f0      	beq.n	8004306 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004324:	4b43      	ldr	r3, [pc, #268]	; (8004434 <HAL_RCC_OscConfig+0x2ac>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	4940      	ldr	r1, [pc, #256]	; (8004434 <HAL_RCC_OscConfig+0x2ac>)
 8004334:	4313      	orrs	r3, r2
 8004336:	600b      	str	r3, [r1, #0]
 8004338:	e015      	b.n	8004366 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800433a:	4b3f      	ldr	r3, [pc, #252]	; (8004438 <HAL_RCC_OscConfig+0x2b0>)
 800433c:	2200      	movs	r2, #0
 800433e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004340:	f7fd faa0 	bl	8001884 <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004346:	e008      	b.n	800435a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004348:	f7fd fa9c 	bl	8001884 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b02      	cmp	r3, #2
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e17b      	b.n	8004652 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800435a:	4b36      	ldr	r3, [pc, #216]	; (8004434 <HAL_RCC_OscConfig+0x2ac>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1f0      	bne.n	8004348 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0308 	and.w	r3, r3, #8
 800436e:	2b00      	cmp	r3, #0
 8004370:	d030      	beq.n	80043d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d016      	beq.n	80043a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800437a:	4b30      	ldr	r3, [pc, #192]	; (800443c <HAL_RCC_OscConfig+0x2b4>)
 800437c:	2201      	movs	r2, #1
 800437e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004380:	f7fd fa80 	bl	8001884 <HAL_GetTick>
 8004384:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004386:	e008      	b.n	800439a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004388:	f7fd fa7c 	bl	8001884 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e15b      	b.n	8004652 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800439a:	4b26      	ldr	r3, [pc, #152]	; (8004434 <HAL_RCC_OscConfig+0x2ac>)
 800439c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d0f0      	beq.n	8004388 <HAL_RCC_OscConfig+0x200>
 80043a6:	e015      	b.n	80043d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043a8:	4b24      	ldr	r3, [pc, #144]	; (800443c <HAL_RCC_OscConfig+0x2b4>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ae:	f7fd fa69 	bl	8001884 <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043b4:	e008      	b.n	80043c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043b6:	f7fd fa65 	bl	8001884 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d901      	bls.n	80043c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e144      	b.n	8004652 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043c8:	4b1a      	ldr	r3, [pc, #104]	; (8004434 <HAL_RCC_OscConfig+0x2ac>)
 80043ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1f0      	bne.n	80043b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0304 	and.w	r3, r3, #4
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f000 80a0 	beq.w	8004522 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043e2:	2300      	movs	r3, #0
 80043e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043e6:	4b13      	ldr	r3, [pc, #76]	; (8004434 <HAL_RCC_OscConfig+0x2ac>)
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10f      	bne.n	8004412 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043f2:	2300      	movs	r3, #0
 80043f4:	60bb      	str	r3, [r7, #8]
 80043f6:	4b0f      	ldr	r3, [pc, #60]	; (8004434 <HAL_RCC_OscConfig+0x2ac>)
 80043f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fa:	4a0e      	ldr	r2, [pc, #56]	; (8004434 <HAL_RCC_OscConfig+0x2ac>)
 80043fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004400:	6413      	str	r3, [r2, #64]	; 0x40
 8004402:	4b0c      	ldr	r3, [pc, #48]	; (8004434 <HAL_RCC_OscConfig+0x2ac>)
 8004404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800440a:	60bb      	str	r3, [r7, #8]
 800440c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800440e:	2301      	movs	r3, #1
 8004410:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004412:	4b0b      	ldr	r3, [pc, #44]	; (8004440 <HAL_RCC_OscConfig+0x2b8>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441a:	2b00      	cmp	r3, #0
 800441c:	d121      	bne.n	8004462 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800441e:	4b08      	ldr	r3, [pc, #32]	; (8004440 <HAL_RCC_OscConfig+0x2b8>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a07      	ldr	r2, [pc, #28]	; (8004440 <HAL_RCC_OscConfig+0x2b8>)
 8004424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004428:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800442a:	f7fd fa2b 	bl	8001884 <HAL_GetTick>
 800442e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004430:	e011      	b.n	8004456 <HAL_RCC_OscConfig+0x2ce>
 8004432:	bf00      	nop
 8004434:	40023800 	.word	0x40023800
 8004438:	42470000 	.word	0x42470000
 800443c:	42470e80 	.word	0x42470e80
 8004440:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004444:	f7fd fa1e 	bl	8001884 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e0fd      	b.n	8004652 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004456:	4b81      	ldr	r3, [pc, #516]	; (800465c <HAL_RCC_OscConfig+0x4d4>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0f0      	beq.n	8004444 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d106      	bne.n	8004478 <HAL_RCC_OscConfig+0x2f0>
 800446a:	4b7d      	ldr	r3, [pc, #500]	; (8004660 <HAL_RCC_OscConfig+0x4d8>)
 800446c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446e:	4a7c      	ldr	r2, [pc, #496]	; (8004660 <HAL_RCC_OscConfig+0x4d8>)
 8004470:	f043 0301 	orr.w	r3, r3, #1
 8004474:	6713      	str	r3, [r2, #112]	; 0x70
 8004476:	e01c      	b.n	80044b2 <HAL_RCC_OscConfig+0x32a>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	2b05      	cmp	r3, #5
 800447e:	d10c      	bne.n	800449a <HAL_RCC_OscConfig+0x312>
 8004480:	4b77      	ldr	r3, [pc, #476]	; (8004660 <HAL_RCC_OscConfig+0x4d8>)
 8004482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004484:	4a76      	ldr	r2, [pc, #472]	; (8004660 <HAL_RCC_OscConfig+0x4d8>)
 8004486:	f043 0304 	orr.w	r3, r3, #4
 800448a:	6713      	str	r3, [r2, #112]	; 0x70
 800448c:	4b74      	ldr	r3, [pc, #464]	; (8004660 <HAL_RCC_OscConfig+0x4d8>)
 800448e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004490:	4a73      	ldr	r2, [pc, #460]	; (8004660 <HAL_RCC_OscConfig+0x4d8>)
 8004492:	f043 0301 	orr.w	r3, r3, #1
 8004496:	6713      	str	r3, [r2, #112]	; 0x70
 8004498:	e00b      	b.n	80044b2 <HAL_RCC_OscConfig+0x32a>
 800449a:	4b71      	ldr	r3, [pc, #452]	; (8004660 <HAL_RCC_OscConfig+0x4d8>)
 800449c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449e:	4a70      	ldr	r2, [pc, #448]	; (8004660 <HAL_RCC_OscConfig+0x4d8>)
 80044a0:	f023 0301 	bic.w	r3, r3, #1
 80044a4:	6713      	str	r3, [r2, #112]	; 0x70
 80044a6:	4b6e      	ldr	r3, [pc, #440]	; (8004660 <HAL_RCC_OscConfig+0x4d8>)
 80044a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044aa:	4a6d      	ldr	r2, [pc, #436]	; (8004660 <HAL_RCC_OscConfig+0x4d8>)
 80044ac:	f023 0304 	bic.w	r3, r3, #4
 80044b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d015      	beq.n	80044e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ba:	f7fd f9e3 	bl	8001884 <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044c0:	e00a      	b.n	80044d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044c2:	f7fd f9df 	bl	8001884 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e0bc      	b.n	8004652 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044d8:	4b61      	ldr	r3, [pc, #388]	; (8004660 <HAL_RCC_OscConfig+0x4d8>)
 80044da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d0ee      	beq.n	80044c2 <HAL_RCC_OscConfig+0x33a>
 80044e4:	e014      	b.n	8004510 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044e6:	f7fd f9cd 	bl	8001884 <HAL_GetTick>
 80044ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044ec:	e00a      	b.n	8004504 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044ee:	f7fd f9c9 	bl	8001884 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d901      	bls.n	8004504 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e0a6      	b.n	8004652 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004504:	4b56      	ldr	r3, [pc, #344]	; (8004660 <HAL_RCC_OscConfig+0x4d8>)
 8004506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1ee      	bne.n	80044ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004510:	7dfb      	ldrb	r3, [r7, #23]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d105      	bne.n	8004522 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004516:	4b52      	ldr	r3, [pc, #328]	; (8004660 <HAL_RCC_OscConfig+0x4d8>)
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	4a51      	ldr	r2, [pc, #324]	; (8004660 <HAL_RCC_OscConfig+0x4d8>)
 800451c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004520:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	2b00      	cmp	r3, #0
 8004528:	f000 8092 	beq.w	8004650 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800452c:	4b4c      	ldr	r3, [pc, #304]	; (8004660 <HAL_RCC_OscConfig+0x4d8>)
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f003 030c 	and.w	r3, r3, #12
 8004534:	2b08      	cmp	r3, #8
 8004536:	d05c      	beq.n	80045f2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	2b02      	cmp	r3, #2
 800453e:	d141      	bne.n	80045c4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004540:	4b48      	ldr	r3, [pc, #288]	; (8004664 <HAL_RCC_OscConfig+0x4dc>)
 8004542:	2200      	movs	r2, #0
 8004544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004546:	f7fd f99d 	bl	8001884 <HAL_GetTick>
 800454a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800454c:	e008      	b.n	8004560 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800454e:	f7fd f999 	bl	8001884 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b02      	cmp	r3, #2
 800455a:	d901      	bls.n	8004560 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e078      	b.n	8004652 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004560:	4b3f      	ldr	r3, [pc, #252]	; (8004660 <HAL_RCC_OscConfig+0x4d8>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1f0      	bne.n	800454e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	69da      	ldr	r2, [r3, #28]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a1b      	ldr	r3, [r3, #32]
 8004574:	431a      	orrs	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457a:	019b      	lsls	r3, r3, #6
 800457c:	431a      	orrs	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004582:	085b      	lsrs	r3, r3, #1
 8004584:	3b01      	subs	r3, #1
 8004586:	041b      	lsls	r3, r3, #16
 8004588:	431a      	orrs	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458e:	061b      	lsls	r3, r3, #24
 8004590:	4933      	ldr	r1, [pc, #204]	; (8004660 <HAL_RCC_OscConfig+0x4d8>)
 8004592:	4313      	orrs	r3, r2
 8004594:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004596:	4b33      	ldr	r3, [pc, #204]	; (8004664 <HAL_RCC_OscConfig+0x4dc>)
 8004598:	2201      	movs	r2, #1
 800459a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800459c:	f7fd f972 	bl	8001884 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045a4:	f7fd f96e 	bl	8001884 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e04d      	b.n	8004652 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045b6:	4b2a      	ldr	r3, [pc, #168]	; (8004660 <HAL_RCC_OscConfig+0x4d8>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0f0      	beq.n	80045a4 <HAL_RCC_OscConfig+0x41c>
 80045c2:	e045      	b.n	8004650 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045c4:	4b27      	ldr	r3, [pc, #156]	; (8004664 <HAL_RCC_OscConfig+0x4dc>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ca:	f7fd f95b 	bl	8001884 <HAL_GetTick>
 80045ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045d0:	e008      	b.n	80045e4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045d2:	f7fd f957 	bl	8001884 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d901      	bls.n	80045e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e036      	b.n	8004652 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045e4:	4b1e      	ldr	r3, [pc, #120]	; (8004660 <HAL_RCC_OscConfig+0x4d8>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1f0      	bne.n	80045d2 <HAL_RCC_OscConfig+0x44a>
 80045f0:	e02e      	b.n	8004650 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d101      	bne.n	80045fe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e029      	b.n	8004652 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045fe:	4b18      	ldr	r3, [pc, #96]	; (8004660 <HAL_RCC_OscConfig+0x4d8>)
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	429a      	cmp	r2, r3
 8004610:	d11c      	bne.n	800464c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800461c:	429a      	cmp	r2, r3
 800461e:	d115      	bne.n	800464c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004626:	4013      	ands	r3, r2
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800462c:	4293      	cmp	r3, r2
 800462e:	d10d      	bne.n	800464c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800463a:	429a      	cmp	r2, r3
 800463c:	d106      	bne.n	800464c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004648:	429a      	cmp	r2, r3
 800464a:	d001      	beq.n	8004650 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e000      	b.n	8004652 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3718      	adds	r7, #24
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	40007000 	.word	0x40007000
 8004660:	40023800 	.word	0x40023800
 8004664:	42470060 	.word	0x42470060

08004668 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d101      	bne.n	800467c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e0cc      	b.n	8004816 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800467c:	4b68      	ldr	r3, [pc, #416]	; (8004820 <HAL_RCC_ClockConfig+0x1b8>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 030f 	and.w	r3, r3, #15
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	429a      	cmp	r2, r3
 8004688:	d90c      	bls.n	80046a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800468a:	4b65      	ldr	r3, [pc, #404]	; (8004820 <HAL_RCC_ClockConfig+0x1b8>)
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	b2d2      	uxtb	r2, r2
 8004690:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004692:	4b63      	ldr	r3, [pc, #396]	; (8004820 <HAL_RCC_ClockConfig+0x1b8>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 030f 	and.w	r3, r3, #15
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	429a      	cmp	r2, r3
 800469e:	d001      	beq.n	80046a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e0b8      	b.n	8004816 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d020      	beq.n	80046f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0304 	and.w	r3, r3, #4
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d005      	beq.n	80046c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046bc:	4b59      	ldr	r3, [pc, #356]	; (8004824 <HAL_RCC_ClockConfig+0x1bc>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	4a58      	ldr	r2, [pc, #352]	; (8004824 <HAL_RCC_ClockConfig+0x1bc>)
 80046c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0308 	and.w	r3, r3, #8
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d005      	beq.n	80046e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046d4:	4b53      	ldr	r3, [pc, #332]	; (8004824 <HAL_RCC_ClockConfig+0x1bc>)
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	4a52      	ldr	r2, [pc, #328]	; (8004824 <HAL_RCC_ClockConfig+0x1bc>)
 80046da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046e0:	4b50      	ldr	r3, [pc, #320]	; (8004824 <HAL_RCC_ClockConfig+0x1bc>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	494d      	ldr	r1, [pc, #308]	; (8004824 <HAL_RCC_ClockConfig+0x1bc>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d044      	beq.n	8004788 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d107      	bne.n	8004716 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004706:	4b47      	ldr	r3, [pc, #284]	; (8004824 <HAL_RCC_ClockConfig+0x1bc>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d119      	bne.n	8004746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e07f      	b.n	8004816 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	2b02      	cmp	r3, #2
 800471c:	d003      	beq.n	8004726 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004722:	2b03      	cmp	r3, #3
 8004724:	d107      	bne.n	8004736 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004726:	4b3f      	ldr	r3, [pc, #252]	; (8004824 <HAL_RCC_ClockConfig+0x1bc>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d109      	bne.n	8004746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e06f      	b.n	8004816 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004736:	4b3b      	ldr	r3, [pc, #236]	; (8004824 <HAL_RCC_ClockConfig+0x1bc>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e067      	b.n	8004816 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004746:	4b37      	ldr	r3, [pc, #220]	; (8004824 <HAL_RCC_ClockConfig+0x1bc>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f023 0203 	bic.w	r2, r3, #3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	4934      	ldr	r1, [pc, #208]	; (8004824 <HAL_RCC_ClockConfig+0x1bc>)
 8004754:	4313      	orrs	r3, r2
 8004756:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004758:	f7fd f894 	bl	8001884 <HAL_GetTick>
 800475c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800475e:	e00a      	b.n	8004776 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004760:	f7fd f890 	bl	8001884 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	f241 3288 	movw	r2, #5000	; 0x1388
 800476e:	4293      	cmp	r3, r2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e04f      	b.n	8004816 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004776:	4b2b      	ldr	r3, [pc, #172]	; (8004824 <HAL_RCC_ClockConfig+0x1bc>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f003 020c 	and.w	r2, r3, #12
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	429a      	cmp	r2, r3
 8004786:	d1eb      	bne.n	8004760 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004788:	4b25      	ldr	r3, [pc, #148]	; (8004820 <HAL_RCC_ClockConfig+0x1b8>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 030f 	and.w	r3, r3, #15
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	429a      	cmp	r2, r3
 8004794:	d20c      	bcs.n	80047b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004796:	4b22      	ldr	r3, [pc, #136]	; (8004820 <HAL_RCC_ClockConfig+0x1b8>)
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	b2d2      	uxtb	r2, r2
 800479c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800479e:	4b20      	ldr	r3, [pc, #128]	; (8004820 <HAL_RCC_ClockConfig+0x1b8>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 030f 	and.w	r3, r3, #15
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d001      	beq.n	80047b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e032      	b.n	8004816 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0304 	and.w	r3, r3, #4
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d008      	beq.n	80047ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047bc:	4b19      	ldr	r3, [pc, #100]	; (8004824 <HAL_RCC_ClockConfig+0x1bc>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	4916      	ldr	r1, [pc, #88]	; (8004824 <HAL_RCC_ClockConfig+0x1bc>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0308 	and.w	r3, r3, #8
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d009      	beq.n	80047ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047da:	4b12      	ldr	r3, [pc, #72]	; (8004824 <HAL_RCC_ClockConfig+0x1bc>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	490e      	ldr	r1, [pc, #56]	; (8004824 <HAL_RCC_ClockConfig+0x1bc>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047ee:	f000 f821 	bl	8004834 <HAL_RCC_GetSysClockFreq>
 80047f2:	4601      	mov	r1, r0
 80047f4:	4b0b      	ldr	r3, [pc, #44]	; (8004824 <HAL_RCC_ClockConfig+0x1bc>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	091b      	lsrs	r3, r3, #4
 80047fa:	f003 030f 	and.w	r3, r3, #15
 80047fe:	4a0a      	ldr	r2, [pc, #40]	; (8004828 <HAL_RCC_ClockConfig+0x1c0>)
 8004800:	5cd3      	ldrb	r3, [r2, r3]
 8004802:	fa21 f303 	lsr.w	r3, r1, r3
 8004806:	4a09      	ldr	r2, [pc, #36]	; (800482c <HAL_RCC_ClockConfig+0x1c4>)
 8004808:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800480a:	4b09      	ldr	r3, [pc, #36]	; (8004830 <HAL_RCC_ClockConfig+0x1c8>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4618      	mov	r0, r3
 8004810:	f7fc ff26 	bl	8001660 <HAL_InitTick>

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3710      	adds	r7, #16
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	40023c00 	.word	0x40023c00
 8004824:	40023800 	.word	0x40023800
 8004828:	080095d4 	.word	0x080095d4
 800482c:	20000000 	.word	0x20000000
 8004830:	20000004 	.word	0x20000004

08004834 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800483a:	2300      	movs	r3, #0
 800483c:	607b      	str	r3, [r7, #4]
 800483e:	2300      	movs	r3, #0
 8004840:	60fb      	str	r3, [r7, #12]
 8004842:	2300      	movs	r3, #0
 8004844:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004846:	2300      	movs	r3, #0
 8004848:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800484a:	4b63      	ldr	r3, [pc, #396]	; (80049d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f003 030c 	and.w	r3, r3, #12
 8004852:	2b04      	cmp	r3, #4
 8004854:	d007      	beq.n	8004866 <HAL_RCC_GetSysClockFreq+0x32>
 8004856:	2b08      	cmp	r3, #8
 8004858:	d008      	beq.n	800486c <HAL_RCC_GetSysClockFreq+0x38>
 800485a:	2b00      	cmp	r3, #0
 800485c:	f040 80b4 	bne.w	80049c8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004860:	4b5e      	ldr	r3, [pc, #376]	; (80049dc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004862:	60bb      	str	r3, [r7, #8]
       break;
 8004864:	e0b3      	b.n	80049ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004866:	4b5e      	ldr	r3, [pc, #376]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004868:	60bb      	str	r3, [r7, #8]
      break;
 800486a:	e0b0      	b.n	80049ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800486c:	4b5a      	ldr	r3, [pc, #360]	; (80049d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004874:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004876:	4b58      	ldr	r3, [pc, #352]	; (80049d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d04a      	beq.n	8004918 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004882:	4b55      	ldr	r3, [pc, #340]	; (80049d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	099b      	lsrs	r3, r3, #6
 8004888:	f04f 0400 	mov.w	r4, #0
 800488c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004890:	f04f 0200 	mov.w	r2, #0
 8004894:	ea03 0501 	and.w	r5, r3, r1
 8004898:	ea04 0602 	and.w	r6, r4, r2
 800489c:	4629      	mov	r1, r5
 800489e:	4632      	mov	r2, r6
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	f04f 0400 	mov.w	r4, #0
 80048a8:	0154      	lsls	r4, r2, #5
 80048aa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80048ae:	014b      	lsls	r3, r1, #5
 80048b0:	4619      	mov	r1, r3
 80048b2:	4622      	mov	r2, r4
 80048b4:	1b49      	subs	r1, r1, r5
 80048b6:	eb62 0206 	sbc.w	r2, r2, r6
 80048ba:	f04f 0300 	mov.w	r3, #0
 80048be:	f04f 0400 	mov.w	r4, #0
 80048c2:	0194      	lsls	r4, r2, #6
 80048c4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80048c8:	018b      	lsls	r3, r1, #6
 80048ca:	1a5b      	subs	r3, r3, r1
 80048cc:	eb64 0402 	sbc.w	r4, r4, r2
 80048d0:	f04f 0100 	mov.w	r1, #0
 80048d4:	f04f 0200 	mov.w	r2, #0
 80048d8:	00e2      	lsls	r2, r4, #3
 80048da:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80048de:	00d9      	lsls	r1, r3, #3
 80048e0:	460b      	mov	r3, r1
 80048e2:	4614      	mov	r4, r2
 80048e4:	195b      	adds	r3, r3, r5
 80048e6:	eb44 0406 	adc.w	r4, r4, r6
 80048ea:	f04f 0100 	mov.w	r1, #0
 80048ee:	f04f 0200 	mov.w	r2, #0
 80048f2:	0262      	lsls	r2, r4, #9
 80048f4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80048f8:	0259      	lsls	r1, r3, #9
 80048fa:	460b      	mov	r3, r1
 80048fc:	4614      	mov	r4, r2
 80048fe:	4618      	mov	r0, r3
 8004900:	4621      	mov	r1, r4
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f04f 0400 	mov.w	r4, #0
 8004908:	461a      	mov	r2, r3
 800490a:	4623      	mov	r3, r4
 800490c:	f7fb fc70 	bl	80001f0 <__aeabi_uldivmod>
 8004910:	4603      	mov	r3, r0
 8004912:	460c      	mov	r4, r1
 8004914:	60fb      	str	r3, [r7, #12]
 8004916:	e049      	b.n	80049ac <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004918:	4b2f      	ldr	r3, [pc, #188]	; (80049d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	099b      	lsrs	r3, r3, #6
 800491e:	f04f 0400 	mov.w	r4, #0
 8004922:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004926:	f04f 0200 	mov.w	r2, #0
 800492a:	ea03 0501 	and.w	r5, r3, r1
 800492e:	ea04 0602 	and.w	r6, r4, r2
 8004932:	4629      	mov	r1, r5
 8004934:	4632      	mov	r2, r6
 8004936:	f04f 0300 	mov.w	r3, #0
 800493a:	f04f 0400 	mov.w	r4, #0
 800493e:	0154      	lsls	r4, r2, #5
 8004940:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004944:	014b      	lsls	r3, r1, #5
 8004946:	4619      	mov	r1, r3
 8004948:	4622      	mov	r2, r4
 800494a:	1b49      	subs	r1, r1, r5
 800494c:	eb62 0206 	sbc.w	r2, r2, r6
 8004950:	f04f 0300 	mov.w	r3, #0
 8004954:	f04f 0400 	mov.w	r4, #0
 8004958:	0194      	lsls	r4, r2, #6
 800495a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800495e:	018b      	lsls	r3, r1, #6
 8004960:	1a5b      	subs	r3, r3, r1
 8004962:	eb64 0402 	sbc.w	r4, r4, r2
 8004966:	f04f 0100 	mov.w	r1, #0
 800496a:	f04f 0200 	mov.w	r2, #0
 800496e:	00e2      	lsls	r2, r4, #3
 8004970:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004974:	00d9      	lsls	r1, r3, #3
 8004976:	460b      	mov	r3, r1
 8004978:	4614      	mov	r4, r2
 800497a:	195b      	adds	r3, r3, r5
 800497c:	eb44 0406 	adc.w	r4, r4, r6
 8004980:	f04f 0100 	mov.w	r1, #0
 8004984:	f04f 0200 	mov.w	r2, #0
 8004988:	02a2      	lsls	r2, r4, #10
 800498a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800498e:	0299      	lsls	r1, r3, #10
 8004990:	460b      	mov	r3, r1
 8004992:	4614      	mov	r4, r2
 8004994:	4618      	mov	r0, r3
 8004996:	4621      	mov	r1, r4
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f04f 0400 	mov.w	r4, #0
 800499e:	461a      	mov	r2, r3
 80049a0:	4623      	mov	r3, r4
 80049a2:	f7fb fc25 	bl	80001f0 <__aeabi_uldivmod>
 80049a6:	4603      	mov	r3, r0
 80049a8:	460c      	mov	r4, r1
 80049aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049ac:	4b0a      	ldr	r3, [pc, #40]	; (80049d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	0c1b      	lsrs	r3, r3, #16
 80049b2:	f003 0303 	and.w	r3, r3, #3
 80049b6:	3301      	adds	r3, #1
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c4:	60bb      	str	r3, [r7, #8]
      break;
 80049c6:	e002      	b.n	80049ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049c8:	4b04      	ldr	r3, [pc, #16]	; (80049dc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80049ca:	60bb      	str	r3, [r7, #8]
      break;
 80049cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049ce:	68bb      	ldr	r3, [r7, #8]
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049d8:	40023800 	.word	0x40023800
 80049dc:	00f42400 	.word	0x00f42400
 80049e0:	007a1200 	.word	0x007a1200

080049e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049e8:	4b03      	ldr	r3, [pc, #12]	; (80049f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80049ea:	681b      	ldr	r3, [r3, #0]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	20000000 	.word	0x20000000

080049fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a00:	f7ff fff0 	bl	80049e4 <HAL_RCC_GetHCLKFreq>
 8004a04:	4601      	mov	r1, r0
 8004a06:	4b05      	ldr	r3, [pc, #20]	; (8004a1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	0a9b      	lsrs	r3, r3, #10
 8004a0c:	f003 0307 	and.w	r3, r3, #7
 8004a10:	4a03      	ldr	r2, [pc, #12]	; (8004a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a12:	5cd3      	ldrb	r3, [r2, r3]
 8004a14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	40023800 	.word	0x40023800
 8004a20:	080095e4 	.word	0x080095e4

08004a24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a28:	f7ff ffdc 	bl	80049e4 <HAL_RCC_GetHCLKFreq>
 8004a2c:	4601      	mov	r1, r0
 8004a2e:	4b05      	ldr	r3, [pc, #20]	; (8004a44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	0b5b      	lsrs	r3, r3, #13
 8004a34:	f003 0307 	and.w	r3, r3, #7
 8004a38:	4a03      	ldr	r2, [pc, #12]	; (8004a48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a3a:	5cd3      	ldrb	r3, [r2, r3]
 8004a3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	40023800 	.word	0x40023800
 8004a48:	080095e4 	.word	0x080095e4

08004a4c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	220f      	movs	r2, #15
 8004a5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004a5c:	4b12      	ldr	r3, [pc, #72]	; (8004aa8 <HAL_RCC_GetClockConfig+0x5c>)
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f003 0203 	and.w	r2, r3, #3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004a68:	4b0f      	ldr	r3, [pc, #60]	; (8004aa8 <HAL_RCC_GetClockConfig+0x5c>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004a74:	4b0c      	ldr	r3, [pc, #48]	; (8004aa8 <HAL_RCC_GetClockConfig+0x5c>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004a80:	4b09      	ldr	r3, [pc, #36]	; (8004aa8 <HAL_RCC_GetClockConfig+0x5c>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	08db      	lsrs	r3, r3, #3
 8004a86:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a8e:	4b07      	ldr	r3, [pc, #28]	; (8004aac <HAL_RCC_GetClockConfig+0x60>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 020f 	and.w	r2, r3, #15
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	601a      	str	r2, [r3, #0]
}
 8004a9a:	bf00      	nop
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	40023800 	.word	0x40023800
 8004aac:	40023c00 	.word	0x40023c00

08004ab0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004abc:	2300      	movs	r3, #0
 8004abe:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0301 	and.w	r3, r3, #1
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d10b      	bne.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d105      	bne.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d075      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ae4:	4bad      	ldr	r3, [pc, #692]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004aea:	f7fc fecb 	bl	8001884 <HAL_GetTick>
 8004aee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004af0:	e008      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004af2:	f7fc fec7 	bl	8001884 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d901      	bls.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e18b      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b04:	4ba6      	ldr	r3, [pc, #664]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1f0      	bne.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d009      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	019a      	lsls	r2, r3, #6
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	071b      	lsls	r3, r3, #28
 8004b28:	499d      	ldr	r1, [pc, #628]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0302 	and.w	r3, r3, #2
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d01f      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b3c:	4b98      	ldr	r3, [pc, #608]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b42:	0f1b      	lsrs	r3, r3, #28
 8004b44:	f003 0307 	and.w	r3, r3, #7
 8004b48:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	019a      	lsls	r2, r3, #6
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	061b      	lsls	r3, r3, #24
 8004b56:	431a      	orrs	r2, r3
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	071b      	lsls	r3, r3, #28
 8004b5c:	4990      	ldr	r1, [pc, #576]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b64:	4b8e      	ldr	r3, [pc, #568]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004b66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b6a:	f023 021f 	bic.w	r2, r3, #31
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	3b01      	subs	r3, #1
 8004b74:	498a      	ldr	r1, [pc, #552]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00d      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	019a      	lsls	r2, r3, #6
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	061b      	lsls	r3, r3, #24
 8004b94:	431a      	orrs	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	071b      	lsls	r3, r3, #28
 8004b9c:	4980      	ldr	r1, [pc, #512]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ba4:	4b7d      	ldr	r3, [pc, #500]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004baa:	f7fc fe6b 	bl	8001884 <HAL_GetTick>
 8004bae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bb0:	e008      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004bb2:	f7fc fe67 	bl	8001884 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d901      	bls.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e12b      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bc4:	4b76      	ldr	r3, [pc, #472]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d0f0      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0304 	and.w	r3, r3, #4
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d105      	bne.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d079      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004be8:	4b6e      	ldr	r3, [pc, #440]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bee:	f7fc fe49 	bl	8001884 <HAL_GetTick>
 8004bf2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004bf4:	e008      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004bf6:	f7fc fe45 	bl	8001884 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d901      	bls.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e109      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c08:	4b65      	ldr	r3, [pc, #404]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c14:	d0ef      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0304 	and.w	r3, r3, #4
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d020      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c22:	4b5f      	ldr	r3, [pc, #380]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c28:	0f1b      	lsrs	r3, r3, #28
 8004c2a:	f003 0307 	and.w	r3, r3, #7
 8004c2e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	019a      	lsls	r2, r3, #6
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	061b      	lsls	r3, r3, #24
 8004c3c:	431a      	orrs	r2, r3
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	071b      	lsls	r3, r3, #28
 8004c42:	4957      	ldr	r1, [pc, #348]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004c4a:	4b55      	ldr	r3, [pc, #340]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c50:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	021b      	lsls	r3, r3, #8
 8004c5c:	4950      	ldr	r1, [pc, #320]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0308 	and.w	r3, r3, #8
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d01e      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c70:	4b4b      	ldr	r3, [pc, #300]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c76:	0e1b      	lsrs	r3, r3, #24
 8004c78:	f003 030f 	and.w	r3, r3, #15
 8004c7c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	019a      	lsls	r2, r3, #6
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	061b      	lsls	r3, r3, #24
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	071b      	lsls	r3, r3, #28
 8004c90:	4943      	ldr	r1, [pc, #268]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004c98:	4b41      	ldr	r3, [pc, #260]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c9e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca6:	493e      	ldr	r1, [pc, #248]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004cae:	4b3d      	ldr	r3, [pc, #244]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cb4:	f7fc fde6 	bl	8001884 <HAL_GetTick>
 8004cb8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004cba:	e008      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004cbc:	f7fc fde2 	bl	8001884 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e0a6      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004cce:	4b34      	ldr	r3, [pc, #208]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cda:	d1ef      	bne.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0320 	and.w	r3, r3, #32
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f000 808d 	beq.w	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cea:	2300      	movs	r3, #0
 8004cec:	60fb      	str	r3, [r7, #12]
 8004cee:	4b2c      	ldr	r3, [pc, #176]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf2:	4a2b      	ldr	r2, [pc, #172]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8004cfa:	4b29      	ldr	r3, [pc, #164]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d02:	60fb      	str	r3, [r7, #12]
 8004d04:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d06:	4b28      	ldr	r3, [pc, #160]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a27      	ldr	r2, [pc, #156]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d10:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d12:	f7fc fdb7 	bl	8001884 <HAL_GetTick>
 8004d16:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d18:	e008      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d1a:	f7fc fdb3 	bl	8001884 <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d901      	bls.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e077      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d2c:	4b1e      	ldr	r3, [pc, #120]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d0f0      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d38:	4b19      	ldr	r3, [pc, #100]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d40:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d039      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d032      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d56:	4b12      	ldr	r3, [pc, #72]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d5e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d60:	4b12      	ldr	r3, [pc, #72]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004d62:	2201      	movs	r2, #1
 8004d64:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d66:	4b11      	ldr	r3, [pc, #68]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d6c:	4a0c      	ldr	r2, [pc, #48]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d72:	4b0b      	ldr	r3, [pc, #44]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d11e      	bne.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d7e:	f7fc fd81 	bl	8001884 <HAL_GetTick>
 8004d82:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d84:	e014      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d86:	f7fc fd7d 	bl	8001884 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d90b      	bls.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e03f      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8004d9c:	42470068 	.word	0x42470068
 8004da0:	40023800 	.word	0x40023800
 8004da4:	42470070 	.word	0x42470070
 8004da8:	40007000 	.word	0x40007000
 8004dac:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004db0:	4b1c      	ldr	r3, [pc, #112]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d0e4      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dc8:	d10d      	bne.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004dca:	4b16      	ldr	r3, [pc, #88]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004dda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dde:	4911      	ldr	r1, [pc, #68]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	608b      	str	r3, [r1, #8]
 8004de4:	e005      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004de6:	4b0f      	ldr	r3, [pc, #60]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	4a0e      	ldr	r2, [pc, #56]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004dec:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004df0:	6093      	str	r3, [r2, #8]
 8004df2:	4b0c      	ldr	r3, [pc, #48]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004df4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dfe:	4909      	ldr	r1, [pc, #36]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0310 	and.w	r3, r3, #16
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d004      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004e16:	4b04      	ldr	r3, [pc, #16]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004e18:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3718      	adds	r7, #24
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	40023800 	.word	0x40023800
 8004e28:	424711e0 	.word	0x424711e0

08004e2c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d101      	bne.n	8004e40 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e025      	b.n	8004e8c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d106      	bne.n	8004e5a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f7fc fbf9 	bl	800164c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2202      	movs	r2, #2
 8004e5e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	3304      	adds	r3, #4
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	4610      	mov	r0, r2
 8004e6e:	f001 f921 	bl	80060b4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6818      	ldr	r0, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	6839      	ldr	r1, [r7, #0]
 8004e7e:	f001 f98c 	bl	800619a <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3708      	adds	r7, #8
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e056      	b.n	8004f54 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d106      	bne.n	8004ec6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f7fc f9c9 	bl	8001258 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2202      	movs	r2, #2
 8004eca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004edc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685a      	ldr	r2, [r3, #4]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	431a      	orrs	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f02:	431a      	orrs	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	69db      	ldr	r3, [r3, #28]
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	ea42 0103 	orr.w	r1, r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	0c1b      	lsrs	r3, r3, #16
 8004f24:	f003 0104 	and.w	r1, r3, #4
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	69da      	ldr	r2, [r3, #28]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f42:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3708      	adds	r7, #8
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e01d      	b.n	8004faa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d106      	bne.n	8004f88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7fc f9b0 	bl	80012e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	3304      	adds	r3, #4
 8004f98:	4619      	mov	r1, r3
 8004f9a:	4610      	mov	r0, r2
 8004f9c:	f000 fa14 	bl	80053c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3708      	adds	r7, #8
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b085      	sub	sp, #20
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68da      	ldr	r2, [r3, #12]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f042 0201 	orr.w	r2, r2, #1
 8004fc8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f003 0307 	and.w	r3, r3, #7
 8004fd4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2b06      	cmp	r3, #6
 8004fda:	d007      	beq.n	8004fec <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f042 0201 	orr.w	r2, r2, #1
 8004fea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3714      	adds	r7, #20
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr

08004ffa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b082      	sub	sp, #8
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b02      	cmp	r3, #2
 800500e:	d122      	bne.n	8005056 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	f003 0302 	and.w	r3, r3, #2
 800501a:	2b02      	cmp	r3, #2
 800501c:	d11b      	bne.n	8005056 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f06f 0202 	mvn.w	r2, #2
 8005026:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	f003 0303 	and.w	r3, r3, #3
 8005038:	2b00      	cmp	r3, #0
 800503a:	d003      	beq.n	8005044 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 f9a5 	bl	800538c <HAL_TIM_IC_CaptureCallback>
 8005042:	e005      	b.n	8005050 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f997 	bl	8005378 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f9a8 	bl	80053a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	f003 0304 	and.w	r3, r3, #4
 8005060:	2b04      	cmp	r3, #4
 8005062:	d122      	bne.n	80050aa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	f003 0304 	and.w	r3, r3, #4
 800506e:	2b04      	cmp	r3, #4
 8005070:	d11b      	bne.n	80050aa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f06f 0204 	mvn.w	r2, #4
 800507a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2202      	movs	r2, #2
 8005080:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800508c:	2b00      	cmp	r3, #0
 800508e:	d003      	beq.n	8005098 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 f97b 	bl	800538c <HAL_TIM_IC_CaptureCallback>
 8005096:	e005      	b.n	80050a4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 f96d 	bl	8005378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f97e 	bl	80053a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	f003 0308 	and.w	r3, r3, #8
 80050b4:	2b08      	cmp	r3, #8
 80050b6:	d122      	bne.n	80050fe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	f003 0308 	and.w	r3, r3, #8
 80050c2:	2b08      	cmp	r3, #8
 80050c4:	d11b      	bne.n	80050fe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f06f 0208 	mvn.w	r2, #8
 80050ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2204      	movs	r2, #4
 80050d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	69db      	ldr	r3, [r3, #28]
 80050dc:	f003 0303 	and.w	r3, r3, #3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d003      	beq.n	80050ec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 f951 	bl	800538c <HAL_TIM_IC_CaptureCallback>
 80050ea:	e005      	b.n	80050f8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 f943 	bl	8005378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f954 	bl	80053a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	f003 0310 	and.w	r3, r3, #16
 8005108:	2b10      	cmp	r3, #16
 800510a:	d122      	bne.n	8005152 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	f003 0310 	and.w	r3, r3, #16
 8005116:	2b10      	cmp	r3, #16
 8005118:	d11b      	bne.n	8005152 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f06f 0210 	mvn.w	r2, #16
 8005122:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2208      	movs	r2, #8
 8005128:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	69db      	ldr	r3, [r3, #28]
 8005130:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005134:	2b00      	cmp	r3, #0
 8005136:	d003      	beq.n	8005140 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f927 	bl	800538c <HAL_TIM_IC_CaptureCallback>
 800513e:	e005      	b.n	800514c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 f919 	bl	8005378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f92a 	bl	80053a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	2b01      	cmp	r3, #1
 800515e:	d10e      	bne.n	800517e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b01      	cmp	r3, #1
 800516c:	d107      	bne.n	800517e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f06f 0201 	mvn.w	r2, #1
 8005176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f7fb fe59 	bl	8000e30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005188:	2b80      	cmp	r3, #128	; 0x80
 800518a:	d10e      	bne.n	80051aa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005196:	2b80      	cmp	r3, #128	; 0x80
 8005198:	d107      	bne.n	80051aa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 facf 	bl	8005748 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b4:	2b40      	cmp	r3, #64	; 0x40
 80051b6:	d10e      	bne.n	80051d6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c2:	2b40      	cmp	r3, #64	; 0x40
 80051c4:	d107      	bne.n	80051d6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 f8ef 	bl	80053b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	f003 0320 	and.w	r3, r3, #32
 80051e0:	2b20      	cmp	r3, #32
 80051e2:	d10e      	bne.n	8005202 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	f003 0320 	and.w	r3, r3, #32
 80051ee:	2b20      	cmp	r3, #32
 80051f0:	d107      	bne.n	8005202 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f06f 0220 	mvn.w	r2, #32
 80051fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 fa99 	bl	8005734 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005202:	bf00      	nop
 8005204:	3708      	adds	r7, #8
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800520a:	b580      	push	{r7, lr}
 800520c:	b084      	sub	sp, #16
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
 8005212:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800521a:	2b01      	cmp	r3, #1
 800521c:	d101      	bne.n	8005222 <HAL_TIM_ConfigClockSource+0x18>
 800521e:	2302      	movs	r3, #2
 8005220:	e0a6      	b.n	8005370 <HAL_TIM_ConfigClockSource+0x166>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2202      	movs	r2, #2
 800522e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005240:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005248:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2b40      	cmp	r3, #64	; 0x40
 8005258:	d067      	beq.n	800532a <HAL_TIM_ConfigClockSource+0x120>
 800525a:	2b40      	cmp	r3, #64	; 0x40
 800525c:	d80b      	bhi.n	8005276 <HAL_TIM_ConfigClockSource+0x6c>
 800525e:	2b10      	cmp	r3, #16
 8005260:	d073      	beq.n	800534a <HAL_TIM_ConfigClockSource+0x140>
 8005262:	2b10      	cmp	r3, #16
 8005264:	d802      	bhi.n	800526c <HAL_TIM_ConfigClockSource+0x62>
 8005266:	2b00      	cmp	r3, #0
 8005268:	d06f      	beq.n	800534a <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800526a:	e078      	b.n	800535e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800526c:	2b20      	cmp	r3, #32
 800526e:	d06c      	beq.n	800534a <HAL_TIM_ConfigClockSource+0x140>
 8005270:	2b30      	cmp	r3, #48	; 0x30
 8005272:	d06a      	beq.n	800534a <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005274:	e073      	b.n	800535e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005276:	2b70      	cmp	r3, #112	; 0x70
 8005278:	d00d      	beq.n	8005296 <HAL_TIM_ConfigClockSource+0x8c>
 800527a:	2b70      	cmp	r3, #112	; 0x70
 800527c:	d804      	bhi.n	8005288 <HAL_TIM_ConfigClockSource+0x7e>
 800527e:	2b50      	cmp	r3, #80	; 0x50
 8005280:	d033      	beq.n	80052ea <HAL_TIM_ConfigClockSource+0xe0>
 8005282:	2b60      	cmp	r3, #96	; 0x60
 8005284:	d041      	beq.n	800530a <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005286:	e06a      	b.n	800535e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800528c:	d066      	beq.n	800535c <HAL_TIM_ConfigClockSource+0x152>
 800528e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005292:	d017      	beq.n	80052c4 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005294:	e063      	b.n	800535e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6818      	ldr	r0, [r3, #0]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	6899      	ldr	r1, [r3, #8]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	685a      	ldr	r2, [r3, #4]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	f000 f9a9 	bl	80055fc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	609a      	str	r2, [r3, #8]
      break;
 80052c2:	e04c      	b.n	800535e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6818      	ldr	r0, [r3, #0]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	6899      	ldr	r1, [r3, #8]
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	685a      	ldr	r2, [r3, #4]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	f000 f992 	bl	80055fc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689a      	ldr	r2, [r3, #8]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052e6:	609a      	str	r2, [r3, #8]
      break;
 80052e8:	e039      	b.n	800535e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6818      	ldr	r0, [r3, #0]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	6859      	ldr	r1, [r3, #4]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	461a      	mov	r2, r3
 80052f8:	f000 f906 	bl	8005508 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2150      	movs	r1, #80	; 0x50
 8005302:	4618      	mov	r0, r3
 8005304:	f000 f95f 	bl	80055c6 <TIM_ITRx_SetConfig>
      break;
 8005308:	e029      	b.n	800535e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6818      	ldr	r0, [r3, #0]
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	6859      	ldr	r1, [r3, #4]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	461a      	mov	r2, r3
 8005318:	f000 f925 	bl	8005566 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2160      	movs	r1, #96	; 0x60
 8005322:	4618      	mov	r0, r3
 8005324:	f000 f94f 	bl	80055c6 <TIM_ITRx_SetConfig>
      break;
 8005328:	e019      	b.n	800535e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6818      	ldr	r0, [r3, #0]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	6859      	ldr	r1, [r3, #4]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	461a      	mov	r2, r3
 8005338:	f000 f8e6 	bl	8005508 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2140      	movs	r1, #64	; 0x40
 8005342:	4618      	mov	r0, r3
 8005344:	f000 f93f 	bl	80055c6 <TIM_ITRx_SetConfig>
      break;
 8005348:	e009      	b.n	800535e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4619      	mov	r1, r3
 8005354:	4610      	mov	r0, r2
 8005356:	f000 f936 	bl	80055c6 <TIM_ITRx_SetConfig>
      break;
 800535a:	e000      	b.n	800535e <HAL_TIM_ConfigClockSource+0x154>
      break;
 800535c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3710      	adds	r7, #16
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005380:	bf00      	nop
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a40      	ldr	r2, [pc, #256]	; (80054dc <TIM_Base_SetConfig+0x114>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d013      	beq.n	8005408 <TIM_Base_SetConfig+0x40>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053e6:	d00f      	beq.n	8005408 <TIM_Base_SetConfig+0x40>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a3d      	ldr	r2, [pc, #244]	; (80054e0 <TIM_Base_SetConfig+0x118>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d00b      	beq.n	8005408 <TIM_Base_SetConfig+0x40>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a3c      	ldr	r2, [pc, #240]	; (80054e4 <TIM_Base_SetConfig+0x11c>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d007      	beq.n	8005408 <TIM_Base_SetConfig+0x40>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a3b      	ldr	r2, [pc, #236]	; (80054e8 <TIM_Base_SetConfig+0x120>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d003      	beq.n	8005408 <TIM_Base_SetConfig+0x40>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a3a      	ldr	r2, [pc, #232]	; (80054ec <TIM_Base_SetConfig+0x124>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d108      	bne.n	800541a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800540e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	4313      	orrs	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a2f      	ldr	r2, [pc, #188]	; (80054dc <TIM_Base_SetConfig+0x114>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d02b      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005428:	d027      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a2c      	ldr	r2, [pc, #176]	; (80054e0 <TIM_Base_SetConfig+0x118>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d023      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a2b      	ldr	r2, [pc, #172]	; (80054e4 <TIM_Base_SetConfig+0x11c>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d01f      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a2a      	ldr	r2, [pc, #168]	; (80054e8 <TIM_Base_SetConfig+0x120>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d01b      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a29      	ldr	r2, [pc, #164]	; (80054ec <TIM_Base_SetConfig+0x124>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d017      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a28      	ldr	r2, [pc, #160]	; (80054f0 <TIM_Base_SetConfig+0x128>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d013      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a27      	ldr	r2, [pc, #156]	; (80054f4 <TIM_Base_SetConfig+0x12c>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d00f      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a26      	ldr	r2, [pc, #152]	; (80054f8 <TIM_Base_SetConfig+0x130>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d00b      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a25      	ldr	r2, [pc, #148]	; (80054fc <TIM_Base_SetConfig+0x134>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d007      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a24      	ldr	r2, [pc, #144]	; (8005500 <TIM_Base_SetConfig+0x138>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d003      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a23      	ldr	r2, [pc, #140]	; (8005504 <TIM_Base_SetConfig+0x13c>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d108      	bne.n	800548c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005480:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	4313      	orrs	r3, r2
 800548a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	4313      	orrs	r3, r2
 8005498:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	689a      	ldr	r2, [r3, #8]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a0a      	ldr	r2, [pc, #40]	; (80054dc <TIM_Base_SetConfig+0x114>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d003      	beq.n	80054c0 <TIM_Base_SetConfig+0xf8>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a0c      	ldr	r2, [pc, #48]	; (80054ec <TIM_Base_SetConfig+0x124>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d103      	bne.n	80054c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	691a      	ldr	r2, [r3, #16]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	615a      	str	r2, [r3, #20]
}
 80054ce:	bf00      	nop
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	40010000 	.word	0x40010000
 80054e0:	40000400 	.word	0x40000400
 80054e4:	40000800 	.word	0x40000800
 80054e8:	40000c00 	.word	0x40000c00
 80054ec:	40010400 	.word	0x40010400
 80054f0:	40014000 	.word	0x40014000
 80054f4:	40014400 	.word	0x40014400
 80054f8:	40014800 	.word	0x40014800
 80054fc:	40001800 	.word	0x40001800
 8005500:	40001c00 	.word	0x40001c00
 8005504:	40002000 	.word	0x40002000

08005508 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005508:	b480      	push	{r7}
 800550a:	b087      	sub	sp, #28
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6a1b      	ldr	r3, [r3, #32]
 8005518:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	f023 0201 	bic.w	r2, r3, #1
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005532:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	011b      	lsls	r3, r3, #4
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	4313      	orrs	r3, r2
 800553c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f023 030a 	bic.w	r3, r3, #10
 8005544:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	4313      	orrs	r3, r2
 800554c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	621a      	str	r2, [r3, #32]
}
 800555a:	bf00      	nop
 800555c:	371c      	adds	r7, #28
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005566:	b480      	push	{r7}
 8005568:	b087      	sub	sp, #28
 800556a:	af00      	add	r7, sp, #0
 800556c:	60f8      	str	r0, [r7, #12]
 800556e:	60b9      	str	r1, [r7, #8]
 8005570:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	f023 0210 	bic.w	r2, r3, #16
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005590:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	031b      	lsls	r3, r3, #12
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	4313      	orrs	r3, r2
 800559a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	011b      	lsls	r3, r3, #4
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	621a      	str	r2, [r3, #32]
}
 80055ba:	bf00      	nop
 80055bc:	371c      	adds	r7, #28
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b085      	sub	sp, #20
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
 80055ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055de:	683a      	ldr	r2, [r7, #0]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	f043 0307 	orr.w	r3, r3, #7
 80055e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	609a      	str	r2, [r3, #8]
}
 80055f0:	bf00      	nop
 80055f2:	3714      	adds	r7, #20
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b087      	sub	sp, #28
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]
 8005608:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005616:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	021a      	lsls	r2, r3, #8
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	431a      	orrs	r2, r3
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	4313      	orrs	r3, r2
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	4313      	orrs	r3, r2
 8005628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	609a      	str	r2, [r3, #8]
}
 8005630:	bf00      	nop
 8005632:	371c      	adds	r7, #28
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800564c:	2b01      	cmp	r3, #1
 800564e:	d101      	bne.n	8005654 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005650:	2302      	movs	r3, #2
 8005652:	e05a      	b.n	800570a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2202      	movs	r2, #2
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800567a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	4313      	orrs	r3, r2
 8005684:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a21      	ldr	r2, [pc, #132]	; (8005718 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d022      	beq.n	80056de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a0:	d01d      	beq.n	80056de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a1d      	ldr	r2, [pc, #116]	; (800571c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d018      	beq.n	80056de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a1b      	ldr	r2, [pc, #108]	; (8005720 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d013      	beq.n	80056de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a1a      	ldr	r2, [pc, #104]	; (8005724 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d00e      	beq.n	80056de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a18      	ldr	r2, [pc, #96]	; (8005728 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d009      	beq.n	80056de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a17      	ldr	r2, [pc, #92]	; (800572c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d004      	beq.n	80056de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a15      	ldr	r2, [pc, #84]	; (8005730 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d10c      	bne.n	80056f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	68ba      	ldr	r2, [r7, #8]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68ba      	ldr	r2, [r7, #8]
 80056f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	40010000 	.word	0x40010000
 800571c:	40000400 	.word	0x40000400
 8005720:	40000800 	.word	0x40000800
 8005724:	40000c00 	.word	0x40000c00
 8005728:	40010400 	.word	0x40010400
 800572c:	40014000 	.word	0x40014000
 8005730:	40001800 	.word	0x40001800

08005734 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e03f      	b.n	80057ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d106      	bne.n	8005788 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f7fb fdd2 	bl	800132c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2224      	movs	r2, #36	; 0x24
 800578c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68da      	ldr	r2, [r3, #12]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800579e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 f90b 	bl	80059bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	691a      	ldr	r2, [r3, #16]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	695a      	ldr	r2, [r3, #20]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68da      	ldr	r2, [r3, #12]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2220      	movs	r2, #32
 80057e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2220      	movs	r2, #32
 80057e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b088      	sub	sp, #32
 80057fa:	af02      	add	r7, sp, #8
 80057fc:	60f8      	str	r0, [r7, #12]
 80057fe:	60b9      	str	r1, [r7, #8]
 8005800:	603b      	str	r3, [r7, #0]
 8005802:	4613      	mov	r3, r2
 8005804:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005806:	2300      	movs	r3, #0
 8005808:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b20      	cmp	r3, #32
 8005814:	f040 8083 	bne.w	800591e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d002      	beq.n	8005824 <HAL_UART_Transmit+0x2e>
 800581e:	88fb      	ldrh	r3, [r7, #6]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d101      	bne.n	8005828 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e07b      	b.n	8005920 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800582e:	2b01      	cmp	r3, #1
 8005830:	d101      	bne.n	8005836 <HAL_UART_Transmit+0x40>
 8005832:	2302      	movs	r3, #2
 8005834:	e074      	b.n	8005920 <HAL_UART_Transmit+0x12a>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2221      	movs	r2, #33	; 0x21
 8005848:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800584c:	f7fc f81a 	bl	8001884 <HAL_GetTick>
 8005850:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	88fa      	ldrh	r2, [r7, #6]
 8005856:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	88fa      	ldrh	r2, [r7, #6]
 800585c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005866:	e042      	b.n	80058ee <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800586c:	b29b      	uxth	r3, r3
 800586e:	3b01      	subs	r3, #1
 8005870:	b29a      	uxth	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800587e:	d122      	bne.n	80058c6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	9300      	str	r3, [sp, #0]
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	2200      	movs	r2, #0
 8005888:	2180      	movs	r1, #128	; 0x80
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f000 f84c 	bl	8005928 <UART_WaitOnFlagUntilTimeout>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d001      	beq.n	800589a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e042      	b.n	8005920 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	881b      	ldrh	r3, [r3, #0]
 80058a2:	461a      	mov	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058ac:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d103      	bne.n	80058be <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	3302      	adds	r3, #2
 80058ba:	60bb      	str	r3, [r7, #8]
 80058bc:	e017      	b.n	80058ee <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	3301      	adds	r3, #1
 80058c2:	60bb      	str	r3, [r7, #8]
 80058c4:	e013      	b.n	80058ee <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	2200      	movs	r2, #0
 80058ce:	2180      	movs	r1, #128	; 0x80
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f000 f829 	bl	8005928 <UART_WaitOnFlagUntilTimeout>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d001      	beq.n	80058e0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e01f      	b.n	8005920 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	1c5a      	adds	r2, r3, #1
 80058e4:	60ba      	str	r2, [r7, #8]
 80058e6:	781a      	ldrb	r2, [r3, #0]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1b7      	bne.n	8005868 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	9300      	str	r3, [sp, #0]
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	2200      	movs	r2, #0
 8005900:	2140      	movs	r1, #64	; 0x40
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f000 f810 	bl	8005928 <UART_WaitOnFlagUntilTimeout>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d001      	beq.n	8005912 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e006      	b.n	8005920 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2220      	movs	r2, #32
 8005916:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800591a:	2300      	movs	r3, #0
 800591c:	e000      	b.n	8005920 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800591e:	2302      	movs	r3, #2
  }
}
 8005920:	4618      	mov	r0, r3
 8005922:	3718      	adds	r7, #24
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	603b      	str	r3, [r7, #0]
 8005934:	4613      	mov	r3, r2
 8005936:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005938:	e02c      	b.n	8005994 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005940:	d028      	beq.n	8005994 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d007      	beq.n	8005958 <UART_WaitOnFlagUntilTimeout+0x30>
 8005948:	f7fb ff9c 	bl	8001884 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	69ba      	ldr	r2, [r7, #24]
 8005954:	429a      	cmp	r2, r3
 8005956:	d21d      	bcs.n	8005994 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68da      	ldr	r2, [r3, #12]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005966:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	695a      	ldr	r2, [r3, #20]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f022 0201 	bic.w	r2, r2, #1
 8005976:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2220      	movs	r2, #32
 800597c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2220      	movs	r2, #32
 8005984:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e00f      	b.n	80059b4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	4013      	ands	r3, r2
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	bf0c      	ite	eq
 80059a4:	2301      	moveq	r3, #1
 80059a6:	2300      	movne	r3, #0
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	461a      	mov	r2, r3
 80059ac:	79fb      	ldrb	r3, [r7, #7]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d0c3      	beq.n	800593a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059c0:	b085      	sub	sp, #20
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	68da      	ldr	r2, [r3, #12]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	430a      	orrs	r2, r1
 80059da:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689a      	ldr	r2, [r3, #8]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	431a      	orrs	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	431a      	orrs	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	69db      	ldr	r3, [r3, #28]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80059fe:	f023 030c 	bic.w	r3, r3, #12
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	6812      	ldr	r2, [r2, #0]
 8005a06:	68f9      	ldr	r1, [r7, #12]
 8005a08:	430b      	orrs	r3, r1
 8005a0a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	699a      	ldr	r2, [r3, #24]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	69db      	ldr	r3, [r3, #28]
 8005a26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a2a:	f040 818b 	bne.w	8005d44 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4ac1      	ldr	r2, [pc, #772]	; (8005d38 <UART_SetConfig+0x37c>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d005      	beq.n	8005a44 <UART_SetConfig+0x88>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4abf      	ldr	r2, [pc, #764]	; (8005d3c <UART_SetConfig+0x380>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	f040 80bd 	bne.w	8005bbe <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a44:	f7fe ffee 	bl	8004a24 <HAL_RCC_GetPCLK2Freq>
 8005a48:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	461d      	mov	r5, r3
 8005a4e:	f04f 0600 	mov.w	r6, #0
 8005a52:	46a8      	mov	r8, r5
 8005a54:	46b1      	mov	r9, r6
 8005a56:	eb18 0308 	adds.w	r3, r8, r8
 8005a5a:	eb49 0409 	adc.w	r4, r9, r9
 8005a5e:	4698      	mov	r8, r3
 8005a60:	46a1      	mov	r9, r4
 8005a62:	eb18 0805 	adds.w	r8, r8, r5
 8005a66:	eb49 0906 	adc.w	r9, r9, r6
 8005a6a:	f04f 0100 	mov.w	r1, #0
 8005a6e:	f04f 0200 	mov.w	r2, #0
 8005a72:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005a76:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005a7a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005a7e:	4688      	mov	r8, r1
 8005a80:	4691      	mov	r9, r2
 8005a82:	eb18 0005 	adds.w	r0, r8, r5
 8005a86:	eb49 0106 	adc.w	r1, r9, r6
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	461d      	mov	r5, r3
 8005a90:	f04f 0600 	mov.w	r6, #0
 8005a94:	196b      	adds	r3, r5, r5
 8005a96:	eb46 0406 	adc.w	r4, r6, r6
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	4623      	mov	r3, r4
 8005a9e:	f7fa fba7 	bl	80001f0 <__aeabi_uldivmod>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	460c      	mov	r4, r1
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	4ba5      	ldr	r3, [pc, #660]	; (8005d40 <UART_SetConfig+0x384>)
 8005aaa:	fba3 2302 	umull	r2, r3, r3, r2
 8005aae:	095b      	lsrs	r3, r3, #5
 8005ab0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	461d      	mov	r5, r3
 8005ab8:	f04f 0600 	mov.w	r6, #0
 8005abc:	46a9      	mov	r9, r5
 8005abe:	46b2      	mov	sl, r6
 8005ac0:	eb19 0309 	adds.w	r3, r9, r9
 8005ac4:	eb4a 040a 	adc.w	r4, sl, sl
 8005ac8:	4699      	mov	r9, r3
 8005aca:	46a2      	mov	sl, r4
 8005acc:	eb19 0905 	adds.w	r9, r9, r5
 8005ad0:	eb4a 0a06 	adc.w	sl, sl, r6
 8005ad4:	f04f 0100 	mov.w	r1, #0
 8005ad8:	f04f 0200 	mov.w	r2, #0
 8005adc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ae0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ae4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ae8:	4689      	mov	r9, r1
 8005aea:	4692      	mov	sl, r2
 8005aec:	eb19 0005 	adds.w	r0, r9, r5
 8005af0:	eb4a 0106 	adc.w	r1, sl, r6
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	461d      	mov	r5, r3
 8005afa:	f04f 0600 	mov.w	r6, #0
 8005afe:	196b      	adds	r3, r5, r5
 8005b00:	eb46 0406 	adc.w	r4, r6, r6
 8005b04:	461a      	mov	r2, r3
 8005b06:	4623      	mov	r3, r4
 8005b08:	f7fa fb72 	bl	80001f0 <__aeabi_uldivmod>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	460c      	mov	r4, r1
 8005b10:	461a      	mov	r2, r3
 8005b12:	4b8b      	ldr	r3, [pc, #556]	; (8005d40 <UART_SetConfig+0x384>)
 8005b14:	fba3 1302 	umull	r1, r3, r3, r2
 8005b18:	095b      	lsrs	r3, r3, #5
 8005b1a:	2164      	movs	r1, #100	; 0x64
 8005b1c:	fb01 f303 	mul.w	r3, r1, r3
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	00db      	lsls	r3, r3, #3
 8005b24:	3332      	adds	r3, #50	; 0x32
 8005b26:	4a86      	ldr	r2, [pc, #536]	; (8005d40 <UART_SetConfig+0x384>)
 8005b28:	fba2 2303 	umull	r2, r3, r2, r3
 8005b2c:	095b      	lsrs	r3, r3, #5
 8005b2e:	005b      	lsls	r3, r3, #1
 8005b30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b34:	4498      	add	r8, r3
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	461d      	mov	r5, r3
 8005b3a:	f04f 0600 	mov.w	r6, #0
 8005b3e:	46a9      	mov	r9, r5
 8005b40:	46b2      	mov	sl, r6
 8005b42:	eb19 0309 	adds.w	r3, r9, r9
 8005b46:	eb4a 040a 	adc.w	r4, sl, sl
 8005b4a:	4699      	mov	r9, r3
 8005b4c:	46a2      	mov	sl, r4
 8005b4e:	eb19 0905 	adds.w	r9, r9, r5
 8005b52:	eb4a 0a06 	adc.w	sl, sl, r6
 8005b56:	f04f 0100 	mov.w	r1, #0
 8005b5a:	f04f 0200 	mov.w	r2, #0
 8005b5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b6a:	4689      	mov	r9, r1
 8005b6c:	4692      	mov	sl, r2
 8005b6e:	eb19 0005 	adds.w	r0, r9, r5
 8005b72:	eb4a 0106 	adc.w	r1, sl, r6
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	461d      	mov	r5, r3
 8005b7c:	f04f 0600 	mov.w	r6, #0
 8005b80:	196b      	adds	r3, r5, r5
 8005b82:	eb46 0406 	adc.w	r4, r6, r6
 8005b86:	461a      	mov	r2, r3
 8005b88:	4623      	mov	r3, r4
 8005b8a:	f7fa fb31 	bl	80001f0 <__aeabi_uldivmod>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	460c      	mov	r4, r1
 8005b92:	461a      	mov	r2, r3
 8005b94:	4b6a      	ldr	r3, [pc, #424]	; (8005d40 <UART_SetConfig+0x384>)
 8005b96:	fba3 1302 	umull	r1, r3, r3, r2
 8005b9a:	095b      	lsrs	r3, r3, #5
 8005b9c:	2164      	movs	r1, #100	; 0x64
 8005b9e:	fb01 f303 	mul.w	r3, r1, r3
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	00db      	lsls	r3, r3, #3
 8005ba6:	3332      	adds	r3, #50	; 0x32
 8005ba8:	4a65      	ldr	r2, [pc, #404]	; (8005d40 <UART_SetConfig+0x384>)
 8005baa:	fba2 2303 	umull	r2, r3, r2, r3
 8005bae:	095b      	lsrs	r3, r3, #5
 8005bb0:	f003 0207 	and.w	r2, r3, #7
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4442      	add	r2, r8
 8005bba:	609a      	str	r2, [r3, #8]
 8005bbc:	e26f      	b.n	800609e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005bbe:	f7fe ff1d 	bl	80049fc <HAL_RCC_GetPCLK1Freq>
 8005bc2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	461d      	mov	r5, r3
 8005bc8:	f04f 0600 	mov.w	r6, #0
 8005bcc:	46a8      	mov	r8, r5
 8005bce:	46b1      	mov	r9, r6
 8005bd0:	eb18 0308 	adds.w	r3, r8, r8
 8005bd4:	eb49 0409 	adc.w	r4, r9, r9
 8005bd8:	4698      	mov	r8, r3
 8005bda:	46a1      	mov	r9, r4
 8005bdc:	eb18 0805 	adds.w	r8, r8, r5
 8005be0:	eb49 0906 	adc.w	r9, r9, r6
 8005be4:	f04f 0100 	mov.w	r1, #0
 8005be8:	f04f 0200 	mov.w	r2, #0
 8005bec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005bf0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005bf4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005bf8:	4688      	mov	r8, r1
 8005bfa:	4691      	mov	r9, r2
 8005bfc:	eb18 0005 	adds.w	r0, r8, r5
 8005c00:	eb49 0106 	adc.w	r1, r9, r6
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	461d      	mov	r5, r3
 8005c0a:	f04f 0600 	mov.w	r6, #0
 8005c0e:	196b      	adds	r3, r5, r5
 8005c10:	eb46 0406 	adc.w	r4, r6, r6
 8005c14:	461a      	mov	r2, r3
 8005c16:	4623      	mov	r3, r4
 8005c18:	f7fa faea 	bl	80001f0 <__aeabi_uldivmod>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	460c      	mov	r4, r1
 8005c20:	461a      	mov	r2, r3
 8005c22:	4b47      	ldr	r3, [pc, #284]	; (8005d40 <UART_SetConfig+0x384>)
 8005c24:	fba3 2302 	umull	r2, r3, r3, r2
 8005c28:	095b      	lsrs	r3, r3, #5
 8005c2a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	461d      	mov	r5, r3
 8005c32:	f04f 0600 	mov.w	r6, #0
 8005c36:	46a9      	mov	r9, r5
 8005c38:	46b2      	mov	sl, r6
 8005c3a:	eb19 0309 	adds.w	r3, r9, r9
 8005c3e:	eb4a 040a 	adc.w	r4, sl, sl
 8005c42:	4699      	mov	r9, r3
 8005c44:	46a2      	mov	sl, r4
 8005c46:	eb19 0905 	adds.w	r9, r9, r5
 8005c4a:	eb4a 0a06 	adc.w	sl, sl, r6
 8005c4e:	f04f 0100 	mov.w	r1, #0
 8005c52:	f04f 0200 	mov.w	r2, #0
 8005c56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c5a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c5e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c62:	4689      	mov	r9, r1
 8005c64:	4692      	mov	sl, r2
 8005c66:	eb19 0005 	adds.w	r0, r9, r5
 8005c6a:	eb4a 0106 	adc.w	r1, sl, r6
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	461d      	mov	r5, r3
 8005c74:	f04f 0600 	mov.w	r6, #0
 8005c78:	196b      	adds	r3, r5, r5
 8005c7a:	eb46 0406 	adc.w	r4, r6, r6
 8005c7e:	461a      	mov	r2, r3
 8005c80:	4623      	mov	r3, r4
 8005c82:	f7fa fab5 	bl	80001f0 <__aeabi_uldivmod>
 8005c86:	4603      	mov	r3, r0
 8005c88:	460c      	mov	r4, r1
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	4b2c      	ldr	r3, [pc, #176]	; (8005d40 <UART_SetConfig+0x384>)
 8005c8e:	fba3 1302 	umull	r1, r3, r3, r2
 8005c92:	095b      	lsrs	r3, r3, #5
 8005c94:	2164      	movs	r1, #100	; 0x64
 8005c96:	fb01 f303 	mul.w	r3, r1, r3
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	00db      	lsls	r3, r3, #3
 8005c9e:	3332      	adds	r3, #50	; 0x32
 8005ca0:	4a27      	ldr	r2, [pc, #156]	; (8005d40 <UART_SetConfig+0x384>)
 8005ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca6:	095b      	lsrs	r3, r3, #5
 8005ca8:	005b      	lsls	r3, r3, #1
 8005caa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005cae:	4498      	add	r8, r3
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	461d      	mov	r5, r3
 8005cb4:	f04f 0600 	mov.w	r6, #0
 8005cb8:	46a9      	mov	r9, r5
 8005cba:	46b2      	mov	sl, r6
 8005cbc:	eb19 0309 	adds.w	r3, r9, r9
 8005cc0:	eb4a 040a 	adc.w	r4, sl, sl
 8005cc4:	4699      	mov	r9, r3
 8005cc6:	46a2      	mov	sl, r4
 8005cc8:	eb19 0905 	adds.w	r9, r9, r5
 8005ccc:	eb4a 0a06 	adc.w	sl, sl, r6
 8005cd0:	f04f 0100 	mov.w	r1, #0
 8005cd4:	f04f 0200 	mov.w	r2, #0
 8005cd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cdc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ce0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ce4:	4689      	mov	r9, r1
 8005ce6:	4692      	mov	sl, r2
 8005ce8:	eb19 0005 	adds.w	r0, r9, r5
 8005cec:	eb4a 0106 	adc.w	r1, sl, r6
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	461d      	mov	r5, r3
 8005cf6:	f04f 0600 	mov.w	r6, #0
 8005cfa:	196b      	adds	r3, r5, r5
 8005cfc:	eb46 0406 	adc.w	r4, r6, r6
 8005d00:	461a      	mov	r2, r3
 8005d02:	4623      	mov	r3, r4
 8005d04:	f7fa fa74 	bl	80001f0 <__aeabi_uldivmod>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	460c      	mov	r4, r1
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	4b0c      	ldr	r3, [pc, #48]	; (8005d40 <UART_SetConfig+0x384>)
 8005d10:	fba3 1302 	umull	r1, r3, r3, r2
 8005d14:	095b      	lsrs	r3, r3, #5
 8005d16:	2164      	movs	r1, #100	; 0x64
 8005d18:	fb01 f303 	mul.w	r3, r1, r3
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	00db      	lsls	r3, r3, #3
 8005d20:	3332      	adds	r3, #50	; 0x32
 8005d22:	4a07      	ldr	r2, [pc, #28]	; (8005d40 <UART_SetConfig+0x384>)
 8005d24:	fba2 2303 	umull	r2, r3, r2, r3
 8005d28:	095b      	lsrs	r3, r3, #5
 8005d2a:	f003 0207 	and.w	r2, r3, #7
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4442      	add	r2, r8
 8005d34:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005d36:	e1b2      	b.n	800609e <UART_SetConfig+0x6e2>
 8005d38:	40011000 	.word	0x40011000
 8005d3c:	40011400 	.word	0x40011400
 8005d40:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4ad7      	ldr	r2, [pc, #860]	; (80060a8 <UART_SetConfig+0x6ec>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d005      	beq.n	8005d5a <UART_SetConfig+0x39e>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4ad6      	ldr	r2, [pc, #856]	; (80060ac <UART_SetConfig+0x6f0>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	f040 80d1 	bne.w	8005efc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d5a:	f7fe fe63 	bl	8004a24 <HAL_RCC_GetPCLK2Freq>
 8005d5e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	469a      	mov	sl, r3
 8005d64:	f04f 0b00 	mov.w	fp, #0
 8005d68:	46d0      	mov	r8, sl
 8005d6a:	46d9      	mov	r9, fp
 8005d6c:	eb18 0308 	adds.w	r3, r8, r8
 8005d70:	eb49 0409 	adc.w	r4, r9, r9
 8005d74:	4698      	mov	r8, r3
 8005d76:	46a1      	mov	r9, r4
 8005d78:	eb18 080a 	adds.w	r8, r8, sl
 8005d7c:	eb49 090b 	adc.w	r9, r9, fp
 8005d80:	f04f 0100 	mov.w	r1, #0
 8005d84:	f04f 0200 	mov.w	r2, #0
 8005d88:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d8c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d90:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d94:	4688      	mov	r8, r1
 8005d96:	4691      	mov	r9, r2
 8005d98:	eb1a 0508 	adds.w	r5, sl, r8
 8005d9c:	eb4b 0609 	adc.w	r6, fp, r9
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	4619      	mov	r1, r3
 8005da6:	f04f 0200 	mov.w	r2, #0
 8005daa:	f04f 0300 	mov.w	r3, #0
 8005dae:	f04f 0400 	mov.w	r4, #0
 8005db2:	0094      	lsls	r4, r2, #2
 8005db4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005db8:	008b      	lsls	r3, r1, #2
 8005dba:	461a      	mov	r2, r3
 8005dbc:	4623      	mov	r3, r4
 8005dbe:	4628      	mov	r0, r5
 8005dc0:	4631      	mov	r1, r6
 8005dc2:	f7fa fa15 	bl	80001f0 <__aeabi_uldivmod>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	460c      	mov	r4, r1
 8005dca:	461a      	mov	r2, r3
 8005dcc:	4bb8      	ldr	r3, [pc, #736]	; (80060b0 <UART_SetConfig+0x6f4>)
 8005dce:	fba3 2302 	umull	r2, r3, r3, r2
 8005dd2:	095b      	lsrs	r3, r3, #5
 8005dd4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	469b      	mov	fp, r3
 8005ddc:	f04f 0c00 	mov.w	ip, #0
 8005de0:	46d9      	mov	r9, fp
 8005de2:	46e2      	mov	sl, ip
 8005de4:	eb19 0309 	adds.w	r3, r9, r9
 8005de8:	eb4a 040a 	adc.w	r4, sl, sl
 8005dec:	4699      	mov	r9, r3
 8005dee:	46a2      	mov	sl, r4
 8005df0:	eb19 090b 	adds.w	r9, r9, fp
 8005df4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005df8:	f04f 0100 	mov.w	r1, #0
 8005dfc:	f04f 0200 	mov.w	r2, #0
 8005e00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e0c:	4689      	mov	r9, r1
 8005e0e:	4692      	mov	sl, r2
 8005e10:	eb1b 0509 	adds.w	r5, fp, r9
 8005e14:	eb4c 060a 	adc.w	r6, ip, sl
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	f04f 0200 	mov.w	r2, #0
 8005e22:	f04f 0300 	mov.w	r3, #0
 8005e26:	f04f 0400 	mov.w	r4, #0
 8005e2a:	0094      	lsls	r4, r2, #2
 8005e2c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e30:	008b      	lsls	r3, r1, #2
 8005e32:	461a      	mov	r2, r3
 8005e34:	4623      	mov	r3, r4
 8005e36:	4628      	mov	r0, r5
 8005e38:	4631      	mov	r1, r6
 8005e3a:	f7fa f9d9 	bl	80001f0 <__aeabi_uldivmod>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	460c      	mov	r4, r1
 8005e42:	461a      	mov	r2, r3
 8005e44:	4b9a      	ldr	r3, [pc, #616]	; (80060b0 <UART_SetConfig+0x6f4>)
 8005e46:	fba3 1302 	umull	r1, r3, r3, r2
 8005e4a:	095b      	lsrs	r3, r3, #5
 8005e4c:	2164      	movs	r1, #100	; 0x64
 8005e4e:	fb01 f303 	mul.w	r3, r1, r3
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	011b      	lsls	r3, r3, #4
 8005e56:	3332      	adds	r3, #50	; 0x32
 8005e58:	4a95      	ldr	r2, [pc, #596]	; (80060b0 <UART_SetConfig+0x6f4>)
 8005e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e5e:	095b      	lsrs	r3, r3, #5
 8005e60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e64:	4498      	add	r8, r3
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	469b      	mov	fp, r3
 8005e6a:	f04f 0c00 	mov.w	ip, #0
 8005e6e:	46d9      	mov	r9, fp
 8005e70:	46e2      	mov	sl, ip
 8005e72:	eb19 0309 	adds.w	r3, r9, r9
 8005e76:	eb4a 040a 	adc.w	r4, sl, sl
 8005e7a:	4699      	mov	r9, r3
 8005e7c:	46a2      	mov	sl, r4
 8005e7e:	eb19 090b 	adds.w	r9, r9, fp
 8005e82:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005e86:	f04f 0100 	mov.w	r1, #0
 8005e8a:	f04f 0200 	mov.w	r2, #0
 8005e8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e92:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e96:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e9a:	4689      	mov	r9, r1
 8005e9c:	4692      	mov	sl, r2
 8005e9e:	eb1b 0509 	adds.w	r5, fp, r9
 8005ea2:	eb4c 060a 	adc.w	r6, ip, sl
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	4619      	mov	r1, r3
 8005eac:	f04f 0200 	mov.w	r2, #0
 8005eb0:	f04f 0300 	mov.w	r3, #0
 8005eb4:	f04f 0400 	mov.w	r4, #0
 8005eb8:	0094      	lsls	r4, r2, #2
 8005eba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ebe:	008b      	lsls	r3, r1, #2
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	4623      	mov	r3, r4
 8005ec4:	4628      	mov	r0, r5
 8005ec6:	4631      	mov	r1, r6
 8005ec8:	f7fa f992 	bl	80001f0 <__aeabi_uldivmod>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	460c      	mov	r4, r1
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	4b77      	ldr	r3, [pc, #476]	; (80060b0 <UART_SetConfig+0x6f4>)
 8005ed4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ed8:	095b      	lsrs	r3, r3, #5
 8005eda:	2164      	movs	r1, #100	; 0x64
 8005edc:	fb01 f303 	mul.w	r3, r1, r3
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	011b      	lsls	r3, r3, #4
 8005ee4:	3332      	adds	r3, #50	; 0x32
 8005ee6:	4a72      	ldr	r2, [pc, #456]	; (80060b0 <UART_SetConfig+0x6f4>)
 8005ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8005eec:	095b      	lsrs	r3, r3, #5
 8005eee:	f003 020f 	and.w	r2, r3, #15
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4442      	add	r2, r8
 8005ef8:	609a      	str	r2, [r3, #8]
 8005efa:	e0d0      	b.n	800609e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005efc:	f7fe fd7e 	bl	80049fc <HAL_RCC_GetPCLK1Freq>
 8005f00:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	469a      	mov	sl, r3
 8005f06:	f04f 0b00 	mov.w	fp, #0
 8005f0a:	46d0      	mov	r8, sl
 8005f0c:	46d9      	mov	r9, fp
 8005f0e:	eb18 0308 	adds.w	r3, r8, r8
 8005f12:	eb49 0409 	adc.w	r4, r9, r9
 8005f16:	4698      	mov	r8, r3
 8005f18:	46a1      	mov	r9, r4
 8005f1a:	eb18 080a 	adds.w	r8, r8, sl
 8005f1e:	eb49 090b 	adc.w	r9, r9, fp
 8005f22:	f04f 0100 	mov.w	r1, #0
 8005f26:	f04f 0200 	mov.w	r2, #0
 8005f2a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005f2e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005f32:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005f36:	4688      	mov	r8, r1
 8005f38:	4691      	mov	r9, r2
 8005f3a:	eb1a 0508 	adds.w	r5, sl, r8
 8005f3e:	eb4b 0609 	adc.w	r6, fp, r9
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	4619      	mov	r1, r3
 8005f48:	f04f 0200 	mov.w	r2, #0
 8005f4c:	f04f 0300 	mov.w	r3, #0
 8005f50:	f04f 0400 	mov.w	r4, #0
 8005f54:	0094      	lsls	r4, r2, #2
 8005f56:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f5a:	008b      	lsls	r3, r1, #2
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	4623      	mov	r3, r4
 8005f60:	4628      	mov	r0, r5
 8005f62:	4631      	mov	r1, r6
 8005f64:	f7fa f944 	bl	80001f0 <__aeabi_uldivmod>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	460c      	mov	r4, r1
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	4b50      	ldr	r3, [pc, #320]	; (80060b0 <UART_SetConfig+0x6f4>)
 8005f70:	fba3 2302 	umull	r2, r3, r3, r2
 8005f74:	095b      	lsrs	r3, r3, #5
 8005f76:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	469b      	mov	fp, r3
 8005f7e:	f04f 0c00 	mov.w	ip, #0
 8005f82:	46d9      	mov	r9, fp
 8005f84:	46e2      	mov	sl, ip
 8005f86:	eb19 0309 	adds.w	r3, r9, r9
 8005f8a:	eb4a 040a 	adc.w	r4, sl, sl
 8005f8e:	4699      	mov	r9, r3
 8005f90:	46a2      	mov	sl, r4
 8005f92:	eb19 090b 	adds.w	r9, r9, fp
 8005f96:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005f9a:	f04f 0100 	mov.w	r1, #0
 8005f9e:	f04f 0200 	mov.w	r2, #0
 8005fa2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fa6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005faa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005fae:	4689      	mov	r9, r1
 8005fb0:	4692      	mov	sl, r2
 8005fb2:	eb1b 0509 	adds.w	r5, fp, r9
 8005fb6:	eb4c 060a 	adc.w	r6, ip, sl
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	f04f 0200 	mov.w	r2, #0
 8005fc4:	f04f 0300 	mov.w	r3, #0
 8005fc8:	f04f 0400 	mov.w	r4, #0
 8005fcc:	0094      	lsls	r4, r2, #2
 8005fce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005fd2:	008b      	lsls	r3, r1, #2
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	4623      	mov	r3, r4
 8005fd8:	4628      	mov	r0, r5
 8005fda:	4631      	mov	r1, r6
 8005fdc:	f7fa f908 	bl	80001f0 <__aeabi_uldivmod>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	460c      	mov	r4, r1
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	4b32      	ldr	r3, [pc, #200]	; (80060b0 <UART_SetConfig+0x6f4>)
 8005fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8005fec:	095b      	lsrs	r3, r3, #5
 8005fee:	2164      	movs	r1, #100	; 0x64
 8005ff0:	fb01 f303 	mul.w	r3, r1, r3
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	011b      	lsls	r3, r3, #4
 8005ff8:	3332      	adds	r3, #50	; 0x32
 8005ffa:	4a2d      	ldr	r2, [pc, #180]	; (80060b0 <UART_SetConfig+0x6f4>)
 8005ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8006000:	095b      	lsrs	r3, r3, #5
 8006002:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006006:	4498      	add	r8, r3
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	469b      	mov	fp, r3
 800600c:	f04f 0c00 	mov.w	ip, #0
 8006010:	46d9      	mov	r9, fp
 8006012:	46e2      	mov	sl, ip
 8006014:	eb19 0309 	adds.w	r3, r9, r9
 8006018:	eb4a 040a 	adc.w	r4, sl, sl
 800601c:	4699      	mov	r9, r3
 800601e:	46a2      	mov	sl, r4
 8006020:	eb19 090b 	adds.w	r9, r9, fp
 8006024:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006028:	f04f 0100 	mov.w	r1, #0
 800602c:	f04f 0200 	mov.w	r2, #0
 8006030:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006034:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006038:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800603c:	4689      	mov	r9, r1
 800603e:	4692      	mov	sl, r2
 8006040:	eb1b 0509 	adds.w	r5, fp, r9
 8006044:	eb4c 060a 	adc.w	r6, ip, sl
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	4619      	mov	r1, r3
 800604e:	f04f 0200 	mov.w	r2, #0
 8006052:	f04f 0300 	mov.w	r3, #0
 8006056:	f04f 0400 	mov.w	r4, #0
 800605a:	0094      	lsls	r4, r2, #2
 800605c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006060:	008b      	lsls	r3, r1, #2
 8006062:	461a      	mov	r2, r3
 8006064:	4623      	mov	r3, r4
 8006066:	4628      	mov	r0, r5
 8006068:	4631      	mov	r1, r6
 800606a:	f7fa f8c1 	bl	80001f0 <__aeabi_uldivmod>
 800606e:	4603      	mov	r3, r0
 8006070:	460c      	mov	r4, r1
 8006072:	461a      	mov	r2, r3
 8006074:	4b0e      	ldr	r3, [pc, #56]	; (80060b0 <UART_SetConfig+0x6f4>)
 8006076:	fba3 1302 	umull	r1, r3, r3, r2
 800607a:	095b      	lsrs	r3, r3, #5
 800607c:	2164      	movs	r1, #100	; 0x64
 800607e:	fb01 f303 	mul.w	r3, r1, r3
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	011b      	lsls	r3, r3, #4
 8006086:	3332      	adds	r3, #50	; 0x32
 8006088:	4a09      	ldr	r2, [pc, #36]	; (80060b0 <UART_SetConfig+0x6f4>)
 800608a:	fba2 2303 	umull	r2, r3, r2, r3
 800608e:	095b      	lsrs	r3, r3, #5
 8006090:	f003 020f 	and.w	r2, r3, #15
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4442      	add	r2, r8
 800609a:	609a      	str	r2, [r3, #8]
}
 800609c:	e7ff      	b.n	800609e <UART_SetConfig+0x6e2>
 800609e:	bf00      	nop
 80060a0:	3714      	adds	r7, #20
 80060a2:	46bd      	mov	sp, r7
 80060a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060a8:	40011000 	.word	0x40011000
 80060ac:	40011400 	.word	0x40011400
 80060b0:	51eb851f 	.word	0x51eb851f

080060b4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80060be:	2300      	movs	r3, #0
 80060c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80060c2:	2300      	movs	r3, #0
 80060c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d029      	beq.n	8006122 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80060da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80060de:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80060e8:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80060ee:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80060f4:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80060fa:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8006100:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8006106:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800610c:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8006112:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	4313      	orrs	r3, r2
 8006118:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	601a      	str	r2, [r3, #0]
 8006120:	e034      	b.n	800618c <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800612e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006138:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800613e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	4313      	orrs	r3, r2
 8006144:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006152:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006156:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006160:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8006166:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800616c:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8006172:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8006178:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	4313      	orrs	r3, r2
 800617e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3714      	adds	r7, #20
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800619a:	b480      	push	{r7}
 800619c:	b087      	sub	sp, #28
 800619e:	af00      	add	r7, sp, #0
 80061a0:	60f8      	str	r0, [r7, #12]
 80061a2:	60b9      	str	r1, [r7, #8]
 80061a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 80061a6:	2300      	movs	r3, #0
 80061a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 80061aa:	2300      	movs	r3, #0
 80061ac:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d02e      	beq.n	8006212 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80061c0:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	3b01      	subs	r3, #1
 80061ce:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80061d0:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	3b01      	subs	r3, #1
 80061d8:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80061da:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	3b01      	subs	r3, #1
 80061e2:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80061e4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	3b01      	subs	r3, #1
 80061ec:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80061ee:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	695b      	ldr	r3, [r3, #20]
 80061f4:	3b01      	subs	r3, #1
 80061f6:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80061f8:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	3b01      	subs	r3, #1
 8006200:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006202:	4313      	orrs	r3, r2
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	4313      	orrs	r3, r2
 8006208:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	609a      	str	r2, [r3, #8]
 8006210:	e03b      	b.n	800628a <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800621e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006222:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	3b01      	subs	r3, #1
 800622a:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	695b      	ldr	r3, [r3, #20]
 8006230:	3b01      	subs	r3, #1
 8006232:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006234:	4313      	orrs	r3, r2
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	4313      	orrs	r3, r2
 800623a:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006248:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	3b01      	subs	r3, #1
 8006256:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006258:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	3b01      	subs	r3, #1
 8006260:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006262:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	3b01      	subs	r3, #1
 800626a:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800626c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	3b01      	subs	r3, #1
 8006274:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006276:	4313      	orrs	r3, r2
 8006278:	693a      	ldr	r2, [r7, #16]
 800627a:	4313      	orrs	r3, r2
 800627c:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	693a      	ldr	r2, [r7, #16]
 8006288:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800628a:	2300      	movs	r3, #0
}
 800628c:	4618      	mov	r0, r3
 800628e:	371c      	adds	r7, #28
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006298:	b084      	sub	sp, #16
 800629a:	b580      	push	{r7, lr}
 800629c:	b084      	sub	sp, #16
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
 80062a2:	f107 001c 	add.w	r0, r7, #28
 80062a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80062aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d122      	bne.n	80062f6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80062c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80062d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d105      	bne.n	80062ea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 f902 	bl	80064f4 <USB_CoreReset>
 80062f0:	4603      	mov	r3, r0
 80062f2:	73fb      	strb	r3, [r7, #15]
 80062f4:	e01a      	b.n	800632c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 f8f6 	bl	80064f4 <USB_CoreReset>
 8006308:	4603      	mov	r3, r0
 800630a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800630c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800630e:	2b00      	cmp	r3, #0
 8006310:	d106      	bne.n	8006320 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006316:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	639a      	str	r2, [r3, #56]	; 0x38
 800631e:	e005      	b.n	800632c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006324:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800632c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632e:	2b01      	cmp	r3, #1
 8006330:	d10b      	bne.n	800634a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f043 0206 	orr.w	r2, r3, #6
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f043 0220 	orr.w	r2, r3, #32
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800634a:	7bfb      	ldrb	r3, [r7, #15]
}
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006356:	b004      	add	sp, #16
 8006358:	4770      	bx	lr

0800635a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800635a:	b480      	push	{r7}
 800635c:	b083      	sub	sp, #12
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f023 0201 	bic.w	r2, r3, #1
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	460b      	mov	r3, r1
 8006386:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006394:	78fb      	ldrb	r3, [r7, #3]
 8006396:	2b01      	cmp	r3, #1
 8006398:	d106      	bne.n	80063a8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	60da      	str	r2, [r3, #12]
 80063a6:	e00b      	b.n	80063c0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80063a8:	78fb      	ldrb	r3, [r7, #3]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d106      	bne.n	80063bc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	60da      	str	r2, [r3, #12]
 80063ba:	e001      	b.n	80063c0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e003      	b.n	80063c8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80063c0:	2032      	movs	r0, #50	; 0x32
 80063c2:	f7fb fa6b 	bl	800189c <HAL_Delay>

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80063da:	2300      	movs	r3, #0
 80063dc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	019b      	lsls	r3, r3, #6
 80063e2:	f043 0220 	orr.w	r2, r3, #32
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	3301      	adds	r3, #1
 80063ee:	60fb      	str	r3, [r7, #12]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	4a09      	ldr	r2, [pc, #36]	; (8006418 <USB_FlushTxFifo+0x48>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d901      	bls.n	80063fc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	e006      	b.n	800640a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	f003 0320 	and.w	r3, r3, #32
 8006404:	2b20      	cmp	r3, #32
 8006406:	d0f0      	beq.n	80063ea <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	00030d40 	.word	0x00030d40

0800641c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006424:	2300      	movs	r3, #0
 8006426:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2210      	movs	r2, #16
 800642c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	3301      	adds	r3, #1
 8006432:	60fb      	str	r3, [r7, #12]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	4a09      	ldr	r2, [pc, #36]	; (800645c <USB_FlushRxFifo+0x40>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d901      	bls.n	8006440 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e006      	b.n	800644e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	f003 0310 	and.w	r3, r3, #16
 8006448:	2b10      	cmp	r3, #16
 800644a:	d0f0      	beq.n	800642e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3714      	adds	r7, #20
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	00030d40 	.word	0x00030d40

08006460 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006460:	b480      	push	{r7}
 8006462:	b089      	sub	sp, #36	; 0x24
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	4613      	mov	r3, r2
 800646c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006476:	88fb      	ldrh	r3, [r7, #6]
 8006478:	3303      	adds	r3, #3
 800647a:	089b      	lsrs	r3, r3, #2
 800647c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800647e:	2300      	movs	r3, #0
 8006480:	61bb      	str	r3, [r7, #24]
 8006482:	e00b      	b.n	800649c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	3304      	adds	r3, #4
 8006494:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	3301      	adds	r3, #1
 800649a:	61bb      	str	r3, [r7, #24]
 800649c:	69ba      	ldr	r2, [r7, #24]
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d3ef      	bcc.n	8006484 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80064a4:	69fb      	ldr	r3, [r7, #28]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3724      	adds	r7, #36	; 0x24
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr

080064b2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80064b2:	b480      	push	{r7}
 80064b4:	b085      	sub	sp, #20
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	699b      	ldr	r3, [r3, #24]
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	4013      	ands	r3, r2
 80064c8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80064ca:	68fb      	ldr	r3, [r7, #12]
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3714      	adds	r7, #20
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	695b      	ldr	r3, [r3, #20]
 80064e4:	f003 0301 	and.w	r3, r3, #1
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80064fc:	2300      	movs	r3, #0
 80064fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	3301      	adds	r3, #1
 8006504:	60fb      	str	r3, [r7, #12]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	4a13      	ldr	r2, [pc, #76]	; (8006558 <USB_CoreReset+0x64>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d901      	bls.n	8006512 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e01b      	b.n	800654a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	2b00      	cmp	r3, #0
 8006518:	daf2      	bge.n	8006500 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800651a:	2300      	movs	r3, #0
 800651c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	f043 0201 	orr.w	r2, r3, #1
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	3301      	adds	r3, #1
 800652e:	60fb      	str	r3, [r7, #12]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	4a09      	ldr	r2, [pc, #36]	; (8006558 <USB_CoreReset+0x64>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d901      	bls.n	800653c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e006      	b.n	800654a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b01      	cmp	r3, #1
 8006546:	d0f0      	beq.n	800652a <USB_CoreReset+0x36>

  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3714      	adds	r7, #20
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop
 8006558:	00030d40 	.word	0x00030d40

0800655c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800655c:	b084      	sub	sp, #16
 800655e:	b580      	push	{r7, lr}
 8006560:	b084      	sub	sp, #16
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
 8006566:	f107 001c 	add.w	r0, r7, #28
 800656a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006578:	461a      	mov	r2, r3
 800657a:	2300      	movs	r3, #0
 800657c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006582:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d018      	beq.n	80065e0 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80065ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d10a      	bne.n	80065ca <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065c2:	f043 0304 	orr.w	r3, r3, #4
 80065c6:	6013      	str	r3, [r2, #0]
 80065c8:	e014      	b.n	80065f4 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68ba      	ldr	r2, [r7, #8]
 80065d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065d8:	f023 0304 	bic.w	r3, r3, #4
 80065dc:	6013      	str	r3, [r2, #0]
 80065de:	e009      	b.n	80065f4 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68ba      	ldr	r2, [r7, #8]
 80065ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065ee:	f023 0304 	bic.w	r3, r3, #4
 80065f2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80065f4:	2110      	movs	r1, #16
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f7ff feea 	bl	80063d0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f7ff ff0d 	bl	800641c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006602:	2300      	movs	r3, #0
 8006604:	60fb      	str	r3, [r7, #12]
 8006606:	e015      	b.n	8006634 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	015a      	lsls	r2, r3, #5
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	4413      	add	r3, r2
 8006610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006614:	461a      	mov	r2, r3
 8006616:	f04f 33ff 	mov.w	r3, #4294967295
 800661a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	015a      	lsls	r2, r3, #5
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	4413      	add	r3, r2
 8006624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006628:	461a      	mov	r2, r3
 800662a:	2300      	movs	r3, #0
 800662c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	3301      	adds	r3, #1
 8006632:	60fb      	str	r3, [r7, #12]
 8006634:	6a3b      	ldr	r3, [r7, #32]
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	429a      	cmp	r2, r3
 800663a:	d3e5      	bcc.n	8006608 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800663c:	2101      	movs	r1, #1
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f882 	bl	8006748 <USB_DriveVbus>

  HAL_Delay(200U);
 8006644:	20c8      	movs	r0, #200	; 0xc8
 8006646:	f7fb f929 	bl	800189c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f04f 32ff 	mov.w	r2, #4294967295
 8006656:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800665c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00b      	beq.n	800667c <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f44f 7200 	mov.w	r2, #512	; 0x200
 800666a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a14      	ldr	r2, [pc, #80]	; (80066c0 <USB_HostInit+0x164>)
 8006670:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a13      	ldr	r2, [pc, #76]	; (80066c4 <USB_HostInit+0x168>)
 8006676:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800667a:	e009      	b.n	8006690 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2280      	movs	r2, #128	; 0x80
 8006680:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a10      	ldr	r2, [pc, #64]	; (80066c8 <USB_HostInit+0x16c>)
 8006686:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a10      	ldr	r2, [pc, #64]	; (80066cc <USB_HostInit+0x170>)
 800668c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006692:	2b00      	cmp	r3, #0
 8006694:	d105      	bne.n	80066a2 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	699b      	ldr	r3, [r3, #24]
 800669a:	f043 0210 	orr.w	r2, r3, #16
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	699a      	ldr	r2, [r3, #24]
 80066a6:	4b0a      	ldr	r3, [pc, #40]	; (80066d0 <USB_HostInit+0x174>)
 80066a8:	4313      	orrs	r3, r2
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3710      	adds	r7, #16
 80066b4:	46bd      	mov	sp, r7
 80066b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066ba:	b004      	add	sp, #16
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	01000200 	.word	0x01000200
 80066c4:	00e00300 	.word	0x00e00300
 80066c8:	00600080 	.word	0x00600080
 80066cc:	004000e0 	.word	0x004000e0
 80066d0:	a3200008 	.word	0xa3200008

080066d4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b085      	sub	sp, #20
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	460b      	mov	r3, r1
 80066de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066f2:	f023 0303 	bic.w	r3, r3, #3
 80066f6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	78fb      	ldrb	r3, [r7, #3]
 8006702:	f003 0303 	and.w	r3, r3, #3
 8006706:	68f9      	ldr	r1, [r7, #12]
 8006708:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800670c:	4313      	orrs	r3, r2
 800670e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006710:	78fb      	ldrb	r3, [r7, #3]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d107      	bne.n	8006726 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800671c:	461a      	mov	r2, r3
 800671e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006722:	6053      	str	r3, [r2, #4]
 8006724:	e009      	b.n	800673a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006726:	78fb      	ldrb	r3, [r7, #3]
 8006728:	2b02      	cmp	r3, #2
 800672a:	d106      	bne.n	800673a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006732:	461a      	mov	r2, r3
 8006734:	f241 7370 	movw	r3, #6000	; 0x1770
 8006738:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3714      	adds	r7, #20
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	460b      	mov	r3, r1
 8006752:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006758:	2300      	movs	r3, #0
 800675a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800676c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d109      	bne.n	800678c <USB_DriveVbus+0x44>
 8006778:	78fb      	ldrb	r3, [r7, #3]
 800677a:	2b01      	cmp	r3, #1
 800677c:	d106      	bne.n	800678c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006786:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800678a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006796:	d109      	bne.n	80067ac <USB_DriveVbus+0x64>
 8006798:	78fb      	ldrb	r3, [r7, #3]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d106      	bne.n	80067ac <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80067a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067aa:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3714      	adds	r7, #20
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr

080067ba <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80067ba:	b480      	push	{r7}
 80067bc:	b085      	sub	sp, #20
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	b29b      	uxth	r3, r3
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80067dc:	b480      	push	{r7}
 80067de:	b087      	sub	sp, #28
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	460b      	mov	r3, r1
 80067e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80067ec:	78fb      	ldrb	r3, [r7, #3]
 80067ee:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80067f0:	2300      	movs	r3, #0
 80067f2:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	015a      	lsls	r2, r3, #5
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	4413      	add	r3, r2
 80067fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	0c9b      	lsrs	r3, r3, #18
 8006804:	f003 0303 	and.w	r3, r3, #3
 8006808:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d002      	beq.n	8006816 <USB_HC_Halt+0x3a>
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	2b02      	cmp	r3, #2
 8006814:	d16c      	bne.n	80068f0 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	015a      	lsls	r2, r3, #5
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	4413      	add	r3, r2
 800681e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	0151      	lsls	r1, r2, #5
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	440a      	add	r2, r1
 800682c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006830:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006834:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800683a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800683e:	2b00      	cmp	r3, #0
 8006840:	d143      	bne.n	80068ca <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	015a      	lsls	r2, r3, #5
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	4413      	add	r3, r2
 800684a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	0151      	lsls	r1, r2, #5
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	440a      	add	r2, r1
 8006858:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800685c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006860:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	015a      	lsls	r2, r3, #5
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	4413      	add	r3, r2
 800686a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	0151      	lsls	r1, r2, #5
 8006874:	693a      	ldr	r2, [r7, #16]
 8006876:	440a      	add	r2, r1
 8006878:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800687c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006880:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	015a      	lsls	r2, r3, #5
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	4413      	add	r3, r2
 800688a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	0151      	lsls	r1, r2, #5
 8006894:	693a      	ldr	r2, [r7, #16]
 8006896:	440a      	add	r2, r1
 8006898:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800689c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068a0:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	3301      	adds	r3, #1
 80068a6:	617b      	str	r3, [r7, #20]
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068ae:	d81d      	bhi.n	80068ec <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	015a      	lsls	r2, r3, #5
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	4413      	add	r3, r2
 80068b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068c6:	d0ec      	beq.n	80068a2 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80068c8:	e080      	b.n	80069cc <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	015a      	lsls	r2, r3, #5
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	4413      	add	r3, r2
 80068d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	0151      	lsls	r1, r2, #5
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	440a      	add	r2, r1
 80068e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068e8:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80068ea:	e06f      	b.n	80069cc <USB_HC_Halt+0x1f0>
          break;
 80068ec:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80068ee:	e06d      	b.n	80069cc <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	015a      	lsls	r2, r3, #5
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	4413      	add	r3, r2
 80068f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	0151      	lsls	r1, r2, #5
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	440a      	add	r2, r1
 8006906:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800690a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800690e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800691c:	2b00      	cmp	r3, #0
 800691e:	d143      	bne.n	80069a8 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	015a      	lsls	r2, r3, #5
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	4413      	add	r3, r2
 8006928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	0151      	lsls	r1, r2, #5
 8006932:	693a      	ldr	r2, [r7, #16]
 8006934:	440a      	add	r2, r1
 8006936:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800693a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800693e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	015a      	lsls	r2, r3, #5
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	4413      	add	r3, r2
 8006948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	0151      	lsls	r1, r2, #5
 8006952:	693a      	ldr	r2, [r7, #16]
 8006954:	440a      	add	r2, r1
 8006956:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800695a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800695e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	015a      	lsls	r2, r3, #5
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	4413      	add	r3, r2
 8006968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	0151      	lsls	r1, r2, #5
 8006972:	693a      	ldr	r2, [r7, #16]
 8006974:	440a      	add	r2, r1
 8006976:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800697a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800697e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	3301      	adds	r3, #1
 8006984:	617b      	str	r3, [r7, #20]
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800698c:	d81d      	bhi.n	80069ca <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	015a      	lsls	r2, r3, #5
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	4413      	add	r3, r2
 8006996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069a4:	d0ec      	beq.n	8006980 <USB_HC_Halt+0x1a4>
 80069a6:	e011      	b.n	80069cc <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	015a      	lsls	r2, r3, #5
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	4413      	add	r3, r2
 80069b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	0151      	lsls	r1, r2, #5
 80069ba:	693a      	ldr	r2, [r7, #16]
 80069bc:	440a      	add	r2, r1
 80069be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069c6:	6013      	str	r3, [r2, #0]
 80069c8:	e000      	b.n	80069cc <USB_HC_Halt+0x1f0>
          break;
 80069ca:	bf00      	nop
    }
  }

  return HAL_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	371c      	adds	r7, #28
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr

080069da <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80069da:	b480      	push	{r7}
 80069dc:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80069de:	bf00      	nop
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069ee:	f3ef 8305 	mrs	r3, IPSR
 80069f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80069f4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10f      	bne.n	8006a1a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069fa:	f3ef 8310 	mrs	r3, PRIMASK
 80069fe:	607b      	str	r3, [r7, #4]
  return(result);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d105      	bne.n	8006a12 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a06:	f3ef 8311 	mrs	r3, BASEPRI
 8006a0a:	603b      	str	r3, [r7, #0]
  return(result);
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d007      	beq.n	8006a22 <osKernelInitialize+0x3a>
 8006a12:	4b0e      	ldr	r3, [pc, #56]	; (8006a4c <osKernelInitialize+0x64>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d103      	bne.n	8006a22 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006a1a:	f06f 0305 	mvn.w	r3, #5
 8006a1e:	60fb      	str	r3, [r7, #12]
 8006a20:	e00c      	b.n	8006a3c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006a22:	4b0a      	ldr	r3, [pc, #40]	; (8006a4c <osKernelInitialize+0x64>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d105      	bne.n	8006a36 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006a2a:	4b08      	ldr	r3, [pc, #32]	; (8006a4c <osKernelInitialize+0x64>)
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006a30:	2300      	movs	r3, #0
 8006a32:	60fb      	str	r3, [r7, #12]
 8006a34:	e002      	b.n	8006a3c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006a36:	f04f 33ff 	mov.w	r3, #4294967295
 8006a3a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3714      	adds	r7, #20
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	20000030 	.word	0x20000030

08006a50 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a56:	f3ef 8305 	mrs	r3, IPSR
 8006a5a:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a5c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d10f      	bne.n	8006a82 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a62:	f3ef 8310 	mrs	r3, PRIMASK
 8006a66:	607b      	str	r3, [r7, #4]
  return(result);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d105      	bne.n	8006a7a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a6e:	f3ef 8311 	mrs	r3, BASEPRI
 8006a72:	603b      	str	r3, [r7, #0]
  return(result);
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d007      	beq.n	8006a8a <osKernelStart+0x3a>
 8006a7a:	4b0f      	ldr	r3, [pc, #60]	; (8006ab8 <osKernelStart+0x68>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d103      	bne.n	8006a8a <osKernelStart+0x3a>
    stat = osErrorISR;
 8006a82:	f06f 0305 	mvn.w	r3, #5
 8006a86:	60fb      	str	r3, [r7, #12]
 8006a88:	e010      	b.n	8006aac <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006a8a:	4b0b      	ldr	r3, [pc, #44]	; (8006ab8 <osKernelStart+0x68>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d109      	bne.n	8006aa6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006a92:	f7ff ffa2 	bl	80069da <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006a96:	4b08      	ldr	r3, [pc, #32]	; (8006ab8 <osKernelStart+0x68>)
 8006a98:	2202      	movs	r2, #2
 8006a9a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006a9c:	f001 f872 	bl	8007b84 <vTaskStartScheduler>
      stat = osOK;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	60fb      	str	r3, [r7, #12]
 8006aa4:	e002      	b.n	8006aac <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8006aaa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006aac:	68fb      	ldr	r3, [r7, #12]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	20000030 	.word	0x20000030

08006abc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b090      	sub	sp, #64	; 0x40
 8006ac0:	af04      	add	r7, sp, #16
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006acc:	f3ef 8305 	mrs	r3, IPSR
 8006ad0:	61fb      	str	r3, [r7, #28]
  return(result);
 8006ad2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f040 808f 	bne.w	8006bf8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ada:	f3ef 8310 	mrs	r3, PRIMASK
 8006ade:	61bb      	str	r3, [r7, #24]
  return(result);
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d105      	bne.n	8006af2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ae6:	f3ef 8311 	mrs	r3, BASEPRI
 8006aea:	617b      	str	r3, [r7, #20]
  return(result);
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d003      	beq.n	8006afa <osThreadNew+0x3e>
 8006af2:	4b44      	ldr	r3, [pc, #272]	; (8006c04 <osThreadNew+0x148>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	d07e      	beq.n	8006bf8 <osThreadNew+0x13c>
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d07b      	beq.n	8006bf8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006b00:	2380      	movs	r3, #128	; 0x80
 8006b02:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006b04:	2318      	movs	r3, #24
 8006b06:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8006b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b10:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d045      	beq.n	8006ba4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d002      	beq.n	8006b26 <osThreadNew+0x6a>
        name = attr->name;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	699b      	ldr	r3, [r3, #24]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d002      	beq.n	8006b34 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d008      	beq.n	8006b4c <osThreadNew+0x90>
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3c:	2b38      	cmp	r3, #56	; 0x38
 8006b3e:	d805      	bhi.n	8006b4c <osThreadNew+0x90>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	f003 0301 	and.w	r3, r3, #1
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d001      	beq.n	8006b50 <osThreadNew+0x94>
        return (NULL);
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	e054      	b.n	8006bfa <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	695b      	ldr	r3, [r3, #20]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d003      	beq.n	8006b60 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	695b      	ldr	r3, [r3, #20]
 8006b5c:	089b      	lsrs	r3, r3, #2
 8006b5e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00e      	beq.n	8006b86 <osThreadNew+0xca>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	2b5f      	cmp	r3, #95	; 0x5f
 8006b6e:	d90a      	bls.n	8006b86 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d006      	beq.n	8006b86 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	695b      	ldr	r3, [r3, #20]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d002      	beq.n	8006b86 <osThreadNew+0xca>
        mem = 1;
 8006b80:	2301      	movs	r3, #1
 8006b82:	623b      	str	r3, [r7, #32]
 8006b84:	e010      	b.n	8006ba8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10c      	bne.n	8006ba8 <osThreadNew+0xec>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d108      	bne.n	8006ba8 <osThreadNew+0xec>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d104      	bne.n	8006ba8 <osThreadNew+0xec>
          mem = 0;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	623b      	str	r3, [r7, #32]
 8006ba2:	e001      	b.n	8006ba8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006ba8:	6a3b      	ldr	r3, [r7, #32]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d110      	bne.n	8006bd0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006bb6:	9202      	str	r2, [sp, #8]
 8006bb8:	9301      	str	r3, [sp, #4]
 8006bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbc:	9300      	str	r3, [sp, #0]
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f000 fe09 	bl	80077dc <xTaskCreateStatic>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	613b      	str	r3, [r7, #16]
 8006bce:	e013      	b.n	8006bf8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006bd0:	6a3b      	ldr	r3, [r7, #32]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d110      	bne.n	8006bf8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	f107 0310 	add.w	r3, r7, #16
 8006bde:	9301      	str	r3, [sp, #4]
 8006be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be2:	9300      	str	r3, [sp, #0]
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f000 fe51 	bl	8007890 <xTaskCreate>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d001      	beq.n	8006bf8 <osThreadNew+0x13c>
          hTask = NULL;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006bf8:	693b      	ldr	r3, [r7, #16]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3730      	adds	r7, #48	; 0x30
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	20000030 	.word	0x20000030

08006c08 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b086      	sub	sp, #24
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c10:	f3ef 8305 	mrs	r3, IPSR
 8006c14:	613b      	str	r3, [r7, #16]
  return(result);
 8006c16:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10f      	bne.n	8006c3c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c1c:	f3ef 8310 	mrs	r3, PRIMASK
 8006c20:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d105      	bne.n	8006c34 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c28:	f3ef 8311 	mrs	r3, BASEPRI
 8006c2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d007      	beq.n	8006c44 <osDelay+0x3c>
 8006c34:	4b0a      	ldr	r3, [pc, #40]	; (8006c60 <osDelay+0x58>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d103      	bne.n	8006c44 <osDelay+0x3c>
    stat = osErrorISR;
 8006c3c:	f06f 0305 	mvn.w	r3, #5
 8006c40:	617b      	str	r3, [r7, #20]
 8006c42:	e007      	b.n	8006c54 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006c44:	2300      	movs	r3, #0
 8006c46:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d002      	beq.n	8006c54 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 ff64 	bl	8007b1c <vTaskDelay>
    }
  }

  return (stat);
 8006c54:	697b      	ldr	r3, [r7, #20]
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3718      	adds	r7, #24
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	20000030 	.word	0x20000030

08006c64 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	4a07      	ldr	r2, [pc, #28]	; (8006c90 <vApplicationGetIdleTaskMemory+0x2c>)
 8006c74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	4a06      	ldr	r2, [pc, #24]	; (8006c94 <vApplicationGetIdleTaskMemory+0x30>)
 8006c7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2280      	movs	r2, #128	; 0x80
 8006c80:	601a      	str	r2, [r3, #0]
}
 8006c82:	bf00      	nop
 8006c84:	3714      	adds	r7, #20
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	20000034 	.word	0x20000034
 8006c94:	20000094 	.word	0x20000094

08006c98 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	4a07      	ldr	r2, [pc, #28]	; (8006cc4 <vApplicationGetTimerTaskMemory+0x2c>)
 8006ca8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	4a06      	ldr	r2, [pc, #24]	; (8006cc8 <vApplicationGetTimerTaskMemory+0x30>)
 8006cae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cb6:	601a      	str	r2, [r3, #0]
}
 8006cb8:	bf00      	nop
 8006cba:	3714      	adds	r7, #20
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr
 8006cc4:	20000294 	.word	0x20000294
 8006cc8:	200002f4 	.word	0x200002f4

08006ccc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f103 0208 	add.w	r2, r3, #8
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ce4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f103 0208 	add.w	r2, r3, #8
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f103 0208 	add.w	r2, r3, #8
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d00:	bf00      	nop
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d1a:	bf00      	nop
 8006d1c:	370c      	adds	r7, #12
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr

08006d26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d26:	b480      	push	{r7}
 8006d28:	b085      	sub	sp, #20
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
 8006d2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	689a      	ldr	r2, [r3, #8]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	683a      	ldr	r2, [r7, #0]
 8006d4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	683a      	ldr	r2, [r7, #0]
 8006d50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	1c5a      	adds	r2, r3, #1
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	601a      	str	r2, [r3, #0]
}
 8006d62:	bf00      	nop
 8006d64:	3714      	adds	r7, #20
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr

08006d6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d6e:	b480      	push	{r7}
 8006d70:	b085      	sub	sp, #20
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
 8006d76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d84:	d103      	bne.n	8006d8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	60fb      	str	r3, [r7, #12]
 8006d8c:	e00c      	b.n	8006da8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	3308      	adds	r3, #8
 8006d92:	60fb      	str	r3, [r7, #12]
 8006d94:	e002      	b.n	8006d9c <vListInsert+0x2e>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	60fb      	str	r3, [r7, #12]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68ba      	ldr	r2, [r7, #8]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d2f6      	bcs.n	8006d96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	685a      	ldr	r2, [r3, #4]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	683a      	ldr	r2, [r7, #0]
 8006db6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	683a      	ldr	r2, [r7, #0]
 8006dc2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	1c5a      	adds	r2, r3, #1
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	601a      	str	r2, [r3, #0]
}
 8006dd4:	bf00      	nop
 8006dd6:	3714      	adds	r7, #20
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	6892      	ldr	r2, [r2, #8]
 8006df6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	6852      	ldr	r2, [r2, #4]
 8006e00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d103      	bne.n	8006e14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	689a      	ldr	r2, [r3, #8]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	1e5a      	subs	r2, r3, #1
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3714      	adds	r7, #20
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d109      	bne.n	8006e5c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e4c:	f383 8811 	msr	BASEPRI, r3
 8006e50:	f3bf 8f6f 	isb	sy
 8006e54:	f3bf 8f4f 	dsb	sy
 8006e58:	60bb      	str	r3, [r7, #8]
 8006e5a:	e7fe      	b.n	8006e5a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006e5c:	f002 f83e 	bl	8008edc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e68:	68f9      	ldr	r1, [r7, #12]
 8006e6a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e6c:	fb01 f303 	mul.w	r3, r1, r3
 8006e70:	441a      	add	r2, r3
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	68f9      	ldr	r1, [r7, #12]
 8006e90:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e92:	fb01 f303 	mul.w	r3, r1, r3
 8006e96:	441a      	add	r2, r3
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	22ff      	movs	r2, #255	; 0xff
 8006ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	22ff      	movs	r2, #255	; 0xff
 8006ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d114      	bne.n	8006edc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d01a      	beq.n	8006ef0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	3310      	adds	r3, #16
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f001 f906 	bl	80080d0 <xTaskRemoveFromEventList>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d012      	beq.n	8006ef0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006eca:	4b0d      	ldr	r3, [pc, #52]	; (8006f00 <xQueueGenericReset+0xcc>)
 8006ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ed0:	601a      	str	r2, [r3, #0]
 8006ed2:	f3bf 8f4f 	dsb	sy
 8006ed6:	f3bf 8f6f 	isb	sy
 8006eda:	e009      	b.n	8006ef0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	3310      	adds	r3, #16
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7ff fef3 	bl	8006ccc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	3324      	adds	r3, #36	; 0x24
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7ff feee 	bl	8006ccc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006ef0:	f002 f822 	bl	8008f38 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006ef4:	2301      	movs	r3, #1
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	e000ed04 	.word	0xe000ed04

08006f04 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b08e      	sub	sp, #56	; 0x38
 8006f08:	af02      	add	r7, sp, #8
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	607a      	str	r2, [r7, #4]
 8006f10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d109      	bne.n	8006f2c <xQueueGenericCreateStatic+0x28>
 8006f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1c:	f383 8811 	msr	BASEPRI, r3
 8006f20:	f3bf 8f6f 	isb	sy
 8006f24:	f3bf 8f4f 	dsb	sy
 8006f28:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f2a:	e7fe      	b.n	8006f2a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d109      	bne.n	8006f46 <xQueueGenericCreateStatic+0x42>
 8006f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f36:	f383 8811 	msr	BASEPRI, r3
 8006f3a:	f3bf 8f6f 	isb	sy
 8006f3e:	f3bf 8f4f 	dsb	sy
 8006f42:	627b      	str	r3, [r7, #36]	; 0x24
 8006f44:	e7fe      	b.n	8006f44 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d002      	beq.n	8006f52 <xQueueGenericCreateStatic+0x4e>
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d001      	beq.n	8006f56 <xQueueGenericCreateStatic+0x52>
 8006f52:	2301      	movs	r3, #1
 8006f54:	e000      	b.n	8006f58 <xQueueGenericCreateStatic+0x54>
 8006f56:	2300      	movs	r3, #0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d109      	bne.n	8006f70 <xQueueGenericCreateStatic+0x6c>
 8006f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f60:	f383 8811 	msr	BASEPRI, r3
 8006f64:	f3bf 8f6f 	isb	sy
 8006f68:	f3bf 8f4f 	dsb	sy
 8006f6c:	623b      	str	r3, [r7, #32]
 8006f6e:	e7fe      	b.n	8006f6e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d102      	bne.n	8006f7c <xQueueGenericCreateStatic+0x78>
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d101      	bne.n	8006f80 <xQueueGenericCreateStatic+0x7c>
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e000      	b.n	8006f82 <xQueueGenericCreateStatic+0x7e>
 8006f80:	2300      	movs	r3, #0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d109      	bne.n	8006f9a <xQueueGenericCreateStatic+0x96>
 8006f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8a:	f383 8811 	msr	BASEPRI, r3
 8006f8e:	f3bf 8f6f 	isb	sy
 8006f92:	f3bf 8f4f 	dsb	sy
 8006f96:	61fb      	str	r3, [r7, #28]
 8006f98:	e7fe      	b.n	8006f98 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006f9a:	2350      	movs	r3, #80	; 0x50
 8006f9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	2b50      	cmp	r3, #80	; 0x50
 8006fa2:	d009      	beq.n	8006fb8 <xQueueGenericCreateStatic+0xb4>
 8006fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa8:	f383 8811 	msr	BASEPRI, r3
 8006fac:	f3bf 8f6f 	isb	sy
 8006fb0:	f3bf 8f4f 	dsb	sy
 8006fb4:	61bb      	str	r3, [r7, #24]
 8006fb6:	e7fe      	b.n	8006fb6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006fb8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00d      	beq.n	8006fe0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006fcc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	68b9      	ldr	r1, [r7, #8]
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f000 f805 	bl	8006fea <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3730      	adds	r7, #48	; 0x30
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b084      	sub	sp, #16
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	60f8      	str	r0, [r7, #12]
 8006ff2:	60b9      	str	r1, [r7, #8]
 8006ff4:	607a      	str	r2, [r7, #4]
 8006ff6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d103      	bne.n	8007006 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	69ba      	ldr	r2, [r7, #24]
 8007002:	601a      	str	r2, [r3, #0]
 8007004:	e002      	b.n	800700c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	68fa      	ldr	r2, [r7, #12]
 8007010:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	68ba      	ldr	r2, [r7, #8]
 8007016:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007018:	2101      	movs	r1, #1
 800701a:	69b8      	ldr	r0, [r7, #24]
 800701c:	f7ff ff0a 	bl	8006e34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	78fa      	ldrb	r2, [r7, #3]
 8007024:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007028:	bf00      	nop
 800702a:	3710      	adds	r7, #16
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b08e      	sub	sp, #56	; 0x38
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]
 800703c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800703e:	2300      	movs	r3, #0
 8007040:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007048:	2b00      	cmp	r3, #0
 800704a:	d109      	bne.n	8007060 <xQueueGenericSend+0x30>
 800704c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007050:	f383 8811 	msr	BASEPRI, r3
 8007054:	f3bf 8f6f 	isb	sy
 8007058:	f3bf 8f4f 	dsb	sy
 800705c:	62bb      	str	r3, [r7, #40]	; 0x28
 800705e:	e7fe      	b.n	800705e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d103      	bne.n	800706e <xQueueGenericSend+0x3e>
 8007066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706a:	2b00      	cmp	r3, #0
 800706c:	d101      	bne.n	8007072 <xQueueGenericSend+0x42>
 800706e:	2301      	movs	r3, #1
 8007070:	e000      	b.n	8007074 <xQueueGenericSend+0x44>
 8007072:	2300      	movs	r3, #0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d109      	bne.n	800708c <xQueueGenericSend+0x5c>
 8007078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707c:	f383 8811 	msr	BASEPRI, r3
 8007080:	f3bf 8f6f 	isb	sy
 8007084:	f3bf 8f4f 	dsb	sy
 8007088:	627b      	str	r3, [r7, #36]	; 0x24
 800708a:	e7fe      	b.n	800708a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	2b02      	cmp	r3, #2
 8007090:	d103      	bne.n	800709a <xQueueGenericSend+0x6a>
 8007092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007096:	2b01      	cmp	r3, #1
 8007098:	d101      	bne.n	800709e <xQueueGenericSend+0x6e>
 800709a:	2301      	movs	r3, #1
 800709c:	e000      	b.n	80070a0 <xQueueGenericSend+0x70>
 800709e:	2300      	movs	r3, #0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d109      	bne.n	80070b8 <xQueueGenericSend+0x88>
 80070a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a8:	f383 8811 	msr	BASEPRI, r3
 80070ac:	f3bf 8f6f 	isb	sy
 80070b0:	f3bf 8f4f 	dsb	sy
 80070b4:	623b      	str	r3, [r7, #32]
 80070b6:	e7fe      	b.n	80070b6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070b8:	f001 f9c2 	bl	8008440 <xTaskGetSchedulerState>
 80070bc:	4603      	mov	r3, r0
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d102      	bne.n	80070c8 <xQueueGenericSend+0x98>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d101      	bne.n	80070cc <xQueueGenericSend+0x9c>
 80070c8:	2301      	movs	r3, #1
 80070ca:	e000      	b.n	80070ce <xQueueGenericSend+0x9e>
 80070cc:	2300      	movs	r3, #0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d109      	bne.n	80070e6 <xQueueGenericSend+0xb6>
 80070d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d6:	f383 8811 	msr	BASEPRI, r3
 80070da:	f3bf 8f6f 	isb	sy
 80070de:	f3bf 8f4f 	dsb	sy
 80070e2:	61fb      	str	r3, [r7, #28]
 80070e4:	e7fe      	b.n	80070e4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80070e6:	f001 fef9 	bl	8008edc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80070ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d302      	bcc.n	80070fc <xQueueGenericSend+0xcc>
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d129      	bne.n	8007150 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80070fc:	683a      	ldr	r2, [r7, #0]
 80070fe:	68b9      	ldr	r1, [r7, #8]
 8007100:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007102:	f000 f9ff 	bl	8007504 <prvCopyDataToQueue>
 8007106:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710c:	2b00      	cmp	r3, #0
 800710e:	d010      	beq.n	8007132 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007112:	3324      	adds	r3, #36	; 0x24
 8007114:	4618      	mov	r0, r3
 8007116:	f000 ffdb 	bl	80080d0 <xTaskRemoveFromEventList>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d013      	beq.n	8007148 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007120:	4b3f      	ldr	r3, [pc, #252]	; (8007220 <xQueueGenericSend+0x1f0>)
 8007122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007126:	601a      	str	r2, [r3, #0]
 8007128:	f3bf 8f4f 	dsb	sy
 800712c:	f3bf 8f6f 	isb	sy
 8007130:	e00a      	b.n	8007148 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007134:	2b00      	cmp	r3, #0
 8007136:	d007      	beq.n	8007148 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007138:	4b39      	ldr	r3, [pc, #228]	; (8007220 <xQueueGenericSend+0x1f0>)
 800713a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800713e:	601a      	str	r2, [r3, #0]
 8007140:	f3bf 8f4f 	dsb	sy
 8007144:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007148:	f001 fef6 	bl	8008f38 <vPortExitCritical>
				return pdPASS;
 800714c:	2301      	movs	r3, #1
 800714e:	e063      	b.n	8007218 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d103      	bne.n	800715e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007156:	f001 feef 	bl	8008f38 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800715a:	2300      	movs	r3, #0
 800715c:	e05c      	b.n	8007218 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800715e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007160:	2b00      	cmp	r3, #0
 8007162:	d106      	bne.n	8007172 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007164:	f107 0314 	add.w	r3, r7, #20
 8007168:	4618      	mov	r0, r3
 800716a:	f001 f813 	bl	8008194 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800716e:	2301      	movs	r3, #1
 8007170:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007172:	f001 fee1 	bl	8008f38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007176:	f000 fd69 	bl	8007c4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800717a:	f001 feaf 	bl	8008edc <vPortEnterCritical>
 800717e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007180:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007184:	b25b      	sxtb	r3, r3
 8007186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800718a:	d103      	bne.n	8007194 <xQueueGenericSend+0x164>
 800718c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718e:	2200      	movs	r2, #0
 8007190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007196:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800719a:	b25b      	sxtb	r3, r3
 800719c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a0:	d103      	bne.n	80071aa <xQueueGenericSend+0x17a>
 80071a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071aa:	f001 fec5 	bl	8008f38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071ae:	1d3a      	adds	r2, r7, #4
 80071b0:	f107 0314 	add.w	r3, r7, #20
 80071b4:	4611      	mov	r1, r2
 80071b6:	4618      	mov	r0, r3
 80071b8:	f001 f802 	bl	80081c0 <xTaskCheckForTimeOut>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d124      	bne.n	800720c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80071c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071c4:	f000 fa96 	bl	80076f4 <prvIsQueueFull>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d018      	beq.n	8007200 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80071ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d0:	3310      	adds	r3, #16
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	4611      	mov	r1, r2
 80071d6:	4618      	mov	r0, r3
 80071d8:	f000 ff2c 	bl	8008034 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80071dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071de:	f000 fa21 	bl	8007624 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80071e2:	f000 fd41 	bl	8007c68 <xTaskResumeAll>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f47f af7c 	bne.w	80070e6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80071ee:	4b0c      	ldr	r3, [pc, #48]	; (8007220 <xQueueGenericSend+0x1f0>)
 80071f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071f4:	601a      	str	r2, [r3, #0]
 80071f6:	f3bf 8f4f 	dsb	sy
 80071fa:	f3bf 8f6f 	isb	sy
 80071fe:	e772      	b.n	80070e6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007200:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007202:	f000 fa0f 	bl	8007624 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007206:	f000 fd2f 	bl	8007c68 <xTaskResumeAll>
 800720a:	e76c      	b.n	80070e6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800720c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800720e:	f000 fa09 	bl	8007624 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007212:	f000 fd29 	bl	8007c68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007216:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007218:	4618      	mov	r0, r3
 800721a:	3738      	adds	r7, #56	; 0x38
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	e000ed04 	.word	0xe000ed04

08007224 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b08e      	sub	sp, #56	; 0x38
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	607a      	str	r2, [r7, #4]
 8007230:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007238:	2b00      	cmp	r3, #0
 800723a:	d109      	bne.n	8007250 <xQueueGenericSendFromISR+0x2c>
 800723c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007240:	f383 8811 	msr	BASEPRI, r3
 8007244:	f3bf 8f6f 	isb	sy
 8007248:	f3bf 8f4f 	dsb	sy
 800724c:	627b      	str	r3, [r7, #36]	; 0x24
 800724e:	e7fe      	b.n	800724e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d103      	bne.n	800725e <xQueueGenericSendFromISR+0x3a>
 8007256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725a:	2b00      	cmp	r3, #0
 800725c:	d101      	bne.n	8007262 <xQueueGenericSendFromISR+0x3e>
 800725e:	2301      	movs	r3, #1
 8007260:	e000      	b.n	8007264 <xQueueGenericSendFromISR+0x40>
 8007262:	2300      	movs	r3, #0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d109      	bne.n	800727c <xQueueGenericSendFromISR+0x58>
 8007268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726c:	f383 8811 	msr	BASEPRI, r3
 8007270:	f3bf 8f6f 	isb	sy
 8007274:	f3bf 8f4f 	dsb	sy
 8007278:	623b      	str	r3, [r7, #32]
 800727a:	e7fe      	b.n	800727a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	2b02      	cmp	r3, #2
 8007280:	d103      	bne.n	800728a <xQueueGenericSendFromISR+0x66>
 8007282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007286:	2b01      	cmp	r3, #1
 8007288:	d101      	bne.n	800728e <xQueueGenericSendFromISR+0x6a>
 800728a:	2301      	movs	r3, #1
 800728c:	e000      	b.n	8007290 <xQueueGenericSendFromISR+0x6c>
 800728e:	2300      	movs	r3, #0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d109      	bne.n	80072a8 <xQueueGenericSendFromISR+0x84>
 8007294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007298:	f383 8811 	msr	BASEPRI, r3
 800729c:	f3bf 8f6f 	isb	sy
 80072a0:	f3bf 8f4f 	dsb	sy
 80072a4:	61fb      	str	r3, [r7, #28]
 80072a6:	e7fe      	b.n	80072a6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80072a8:	f001 fef4 	bl	8009094 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80072ac:	f3ef 8211 	mrs	r2, BASEPRI
 80072b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b4:	f383 8811 	msr	BASEPRI, r3
 80072b8:	f3bf 8f6f 	isb	sy
 80072bc:	f3bf 8f4f 	dsb	sy
 80072c0:	61ba      	str	r2, [r7, #24]
 80072c2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80072c4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80072c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80072c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d302      	bcc.n	80072da <xQueueGenericSendFromISR+0xb6>
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d12c      	bne.n	8007334 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80072da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80072e4:	683a      	ldr	r2, [r7, #0]
 80072e6:	68b9      	ldr	r1, [r7, #8]
 80072e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072ea:	f000 f90b 	bl	8007504 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80072ee:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80072f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072f6:	d112      	bne.n	800731e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d016      	beq.n	800732e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007302:	3324      	adds	r3, #36	; 0x24
 8007304:	4618      	mov	r0, r3
 8007306:	f000 fee3 	bl	80080d0 <xTaskRemoveFromEventList>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00e      	beq.n	800732e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00b      	beq.n	800732e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2201      	movs	r2, #1
 800731a:	601a      	str	r2, [r3, #0]
 800731c:	e007      	b.n	800732e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800731e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007322:	3301      	adds	r3, #1
 8007324:	b2db      	uxtb	r3, r3
 8007326:	b25a      	sxtb	r2, r3
 8007328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800732e:	2301      	movs	r3, #1
 8007330:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007332:	e001      	b.n	8007338 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007334:	2300      	movs	r3, #0
 8007336:	637b      	str	r3, [r7, #52]	; 0x34
 8007338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007344:	4618      	mov	r0, r3
 8007346:	3738      	adds	r7, #56	; 0x38
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b08c      	sub	sp, #48	; 0x30
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007358:	2300      	movs	r3, #0
 800735a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007362:	2b00      	cmp	r3, #0
 8007364:	d109      	bne.n	800737a <xQueueReceive+0x2e>
	__asm volatile
 8007366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736a:	f383 8811 	msr	BASEPRI, r3
 800736e:	f3bf 8f6f 	isb	sy
 8007372:	f3bf 8f4f 	dsb	sy
 8007376:	623b      	str	r3, [r7, #32]
 8007378:	e7fe      	b.n	8007378 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d103      	bne.n	8007388 <xQueueReceive+0x3c>
 8007380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007384:	2b00      	cmp	r3, #0
 8007386:	d101      	bne.n	800738c <xQueueReceive+0x40>
 8007388:	2301      	movs	r3, #1
 800738a:	e000      	b.n	800738e <xQueueReceive+0x42>
 800738c:	2300      	movs	r3, #0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d109      	bne.n	80073a6 <xQueueReceive+0x5a>
 8007392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007396:	f383 8811 	msr	BASEPRI, r3
 800739a:	f3bf 8f6f 	isb	sy
 800739e:	f3bf 8f4f 	dsb	sy
 80073a2:	61fb      	str	r3, [r7, #28]
 80073a4:	e7fe      	b.n	80073a4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073a6:	f001 f84b 	bl	8008440 <xTaskGetSchedulerState>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d102      	bne.n	80073b6 <xQueueReceive+0x6a>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d101      	bne.n	80073ba <xQueueReceive+0x6e>
 80073b6:	2301      	movs	r3, #1
 80073b8:	e000      	b.n	80073bc <xQueueReceive+0x70>
 80073ba:	2300      	movs	r3, #0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d109      	bne.n	80073d4 <xQueueReceive+0x88>
 80073c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c4:	f383 8811 	msr	BASEPRI, r3
 80073c8:	f3bf 8f6f 	isb	sy
 80073cc:	f3bf 8f4f 	dsb	sy
 80073d0:	61bb      	str	r3, [r7, #24]
 80073d2:	e7fe      	b.n	80073d2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80073d4:	f001 fd82 	bl	8008edc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073dc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80073de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d01f      	beq.n	8007424 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80073e4:	68b9      	ldr	r1, [r7, #8]
 80073e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073e8:	f000 f8f6 	bl	80075d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80073ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ee:	1e5a      	subs	r2, r3, #1
 80073f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d00f      	beq.n	800741c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073fe:	3310      	adds	r3, #16
 8007400:	4618      	mov	r0, r3
 8007402:	f000 fe65 	bl	80080d0 <xTaskRemoveFromEventList>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d007      	beq.n	800741c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800740c:	4b3c      	ldr	r3, [pc, #240]	; (8007500 <xQueueReceive+0x1b4>)
 800740e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007412:	601a      	str	r2, [r3, #0]
 8007414:	f3bf 8f4f 	dsb	sy
 8007418:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800741c:	f001 fd8c 	bl	8008f38 <vPortExitCritical>
				return pdPASS;
 8007420:	2301      	movs	r3, #1
 8007422:	e069      	b.n	80074f8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d103      	bne.n	8007432 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800742a:	f001 fd85 	bl	8008f38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800742e:	2300      	movs	r3, #0
 8007430:	e062      	b.n	80074f8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007434:	2b00      	cmp	r3, #0
 8007436:	d106      	bne.n	8007446 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007438:	f107 0310 	add.w	r3, r7, #16
 800743c:	4618      	mov	r0, r3
 800743e:	f000 fea9 	bl	8008194 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007442:	2301      	movs	r3, #1
 8007444:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007446:	f001 fd77 	bl	8008f38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800744a:	f000 fbff 	bl	8007c4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800744e:	f001 fd45 	bl	8008edc <vPortEnterCritical>
 8007452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007454:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007458:	b25b      	sxtb	r3, r3
 800745a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800745e:	d103      	bne.n	8007468 <xQueueReceive+0x11c>
 8007460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007462:	2200      	movs	r2, #0
 8007464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800746e:	b25b      	sxtb	r3, r3
 8007470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007474:	d103      	bne.n	800747e <xQueueReceive+0x132>
 8007476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007478:	2200      	movs	r2, #0
 800747a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800747e:	f001 fd5b 	bl	8008f38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007482:	1d3a      	adds	r2, r7, #4
 8007484:	f107 0310 	add.w	r3, r7, #16
 8007488:	4611      	mov	r1, r2
 800748a:	4618      	mov	r0, r3
 800748c:	f000 fe98 	bl	80081c0 <xTaskCheckForTimeOut>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d123      	bne.n	80074de <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007496:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007498:	f000 f916 	bl	80076c8 <prvIsQueueEmpty>
 800749c:	4603      	mov	r3, r0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d017      	beq.n	80074d2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80074a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a4:	3324      	adds	r3, #36	; 0x24
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	4611      	mov	r1, r2
 80074aa:	4618      	mov	r0, r3
 80074ac:	f000 fdc2 	bl	8008034 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80074b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074b2:	f000 f8b7 	bl	8007624 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80074b6:	f000 fbd7 	bl	8007c68 <xTaskResumeAll>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d189      	bne.n	80073d4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80074c0:	4b0f      	ldr	r3, [pc, #60]	; (8007500 <xQueueReceive+0x1b4>)
 80074c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074c6:	601a      	str	r2, [r3, #0]
 80074c8:	f3bf 8f4f 	dsb	sy
 80074cc:	f3bf 8f6f 	isb	sy
 80074d0:	e780      	b.n	80073d4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80074d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074d4:	f000 f8a6 	bl	8007624 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80074d8:	f000 fbc6 	bl	8007c68 <xTaskResumeAll>
 80074dc:	e77a      	b.n	80073d4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80074de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074e0:	f000 f8a0 	bl	8007624 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80074e4:	f000 fbc0 	bl	8007c68 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074ea:	f000 f8ed 	bl	80076c8 <prvIsQueueEmpty>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	f43f af6f 	beq.w	80073d4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80074f6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3730      	adds	r7, #48	; 0x30
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	e000ed04 	.word	0xe000ed04

08007504 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b086      	sub	sp, #24
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007510:	2300      	movs	r3, #0
 8007512:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007518:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751e:	2b00      	cmp	r3, #0
 8007520:	d10d      	bne.n	800753e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d14d      	bne.n	80075c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	4618      	mov	r0, r3
 8007530:	f000 ffa4 	bl	800847c <xTaskPriorityDisinherit>
 8007534:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2200      	movs	r2, #0
 800753a:	609a      	str	r2, [r3, #8]
 800753c:	e043      	b.n	80075c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d119      	bne.n	8007578 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6858      	ldr	r0, [r3, #4]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754c:	461a      	mov	r2, r3
 800754e:	68b9      	ldr	r1, [r7, #8]
 8007550:	f001 ffdc 	bl	800950c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	685a      	ldr	r2, [r3, #4]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755c:	441a      	add	r2, r3
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	685a      	ldr	r2, [r3, #4]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	429a      	cmp	r2, r3
 800756c:	d32b      	bcc.n	80075c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	605a      	str	r2, [r3, #4]
 8007576:	e026      	b.n	80075c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	68d8      	ldr	r0, [r3, #12]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007580:	461a      	mov	r2, r3
 8007582:	68b9      	ldr	r1, [r7, #8]
 8007584:	f001 ffc2 	bl	800950c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	68da      	ldr	r2, [r3, #12]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007590:	425b      	negs	r3, r3
 8007592:	441a      	add	r2, r3
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	68da      	ldr	r2, [r3, #12]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d207      	bcs.n	80075b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	689a      	ldr	r2, [r3, #8]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ac:	425b      	negs	r3, r3
 80075ae:	441a      	add	r2, r3
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	d105      	bne.n	80075c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d002      	beq.n	80075c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	3b01      	subs	r3, #1
 80075c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	1c5a      	adds	r2, r3, #1
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80075ce:	697b      	ldr	r3, [r7, #20]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3718      	adds	r7, #24
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d018      	beq.n	800761c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	68da      	ldr	r2, [r3, #12]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f2:	441a      	add	r2, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	68da      	ldr	r2, [r3, #12]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	429a      	cmp	r2, r3
 8007602:	d303      	bcc.n	800760c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	68d9      	ldr	r1, [r3, #12]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007614:	461a      	mov	r2, r3
 8007616:	6838      	ldr	r0, [r7, #0]
 8007618:	f001 ff78 	bl	800950c <memcpy>
	}
}
 800761c:	bf00      	nop
 800761e:	3708      	adds	r7, #8
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800762c:	f001 fc56 	bl	8008edc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007636:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007638:	e011      	b.n	800765e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763e:	2b00      	cmp	r3, #0
 8007640:	d012      	beq.n	8007668 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	3324      	adds	r3, #36	; 0x24
 8007646:	4618      	mov	r0, r3
 8007648:	f000 fd42 	bl	80080d0 <xTaskRemoveFromEventList>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d001      	beq.n	8007656 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007652:	f000 fe15 	bl	8008280 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007656:	7bfb      	ldrb	r3, [r7, #15]
 8007658:	3b01      	subs	r3, #1
 800765a:	b2db      	uxtb	r3, r3
 800765c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800765e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007662:	2b00      	cmp	r3, #0
 8007664:	dce9      	bgt.n	800763a <prvUnlockQueue+0x16>
 8007666:	e000      	b.n	800766a <prvUnlockQueue+0x46>
					break;
 8007668:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	22ff      	movs	r2, #255	; 0xff
 800766e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007672:	f001 fc61 	bl	8008f38 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007676:	f001 fc31 	bl	8008edc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007680:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007682:	e011      	b.n	80076a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d012      	beq.n	80076b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	3310      	adds	r3, #16
 8007690:	4618      	mov	r0, r3
 8007692:	f000 fd1d 	bl	80080d0 <xTaskRemoveFromEventList>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d001      	beq.n	80076a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800769c:	f000 fdf0 	bl	8008280 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80076a0:	7bbb      	ldrb	r3, [r7, #14]
 80076a2:	3b01      	subs	r3, #1
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	dce9      	bgt.n	8007684 <prvUnlockQueue+0x60>
 80076b0:	e000      	b.n	80076b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80076b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	22ff      	movs	r2, #255	; 0xff
 80076b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80076bc:	f001 fc3c 	bl	8008f38 <vPortExitCritical>
}
 80076c0:	bf00      	nop
 80076c2:	3710      	adds	r7, #16
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80076d0:	f001 fc04 	bl	8008edc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d102      	bne.n	80076e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80076dc:	2301      	movs	r3, #1
 80076de:	60fb      	str	r3, [r7, #12]
 80076e0:	e001      	b.n	80076e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80076e2:	2300      	movs	r3, #0
 80076e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80076e6:	f001 fc27 	bl	8008f38 <vPortExitCritical>

	return xReturn;
 80076ea:	68fb      	ldr	r3, [r7, #12]
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3710      	adds	r7, #16
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80076fc:	f001 fbee 	bl	8008edc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007708:	429a      	cmp	r2, r3
 800770a:	d102      	bne.n	8007712 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800770c:	2301      	movs	r3, #1
 800770e:	60fb      	str	r3, [r7, #12]
 8007710:	e001      	b.n	8007716 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007712:	2300      	movs	r3, #0
 8007714:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007716:	f001 fc0f 	bl	8008f38 <vPortExitCritical>

	return xReturn;
 800771a:	68fb      	ldr	r3, [r7, #12]
}
 800771c:	4618      	mov	r0, r3
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007724:	b480      	push	{r7}
 8007726:	b085      	sub	sp, #20
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800772e:	2300      	movs	r3, #0
 8007730:	60fb      	str	r3, [r7, #12]
 8007732:	e014      	b.n	800775e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007734:	4a0e      	ldr	r2, [pc, #56]	; (8007770 <vQueueAddToRegistry+0x4c>)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d10b      	bne.n	8007758 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007740:	490b      	ldr	r1, [pc, #44]	; (8007770 <vQueueAddToRegistry+0x4c>)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	683a      	ldr	r2, [r7, #0]
 8007746:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800774a:	4a09      	ldr	r2, [pc, #36]	; (8007770 <vQueueAddToRegistry+0x4c>)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	00db      	lsls	r3, r3, #3
 8007750:	4413      	add	r3, r2
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007756:	e005      	b.n	8007764 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	3301      	adds	r3, #1
 800775c:	60fb      	str	r3, [r7, #12]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2b07      	cmp	r3, #7
 8007762:	d9e7      	bls.n	8007734 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007764:	bf00      	nop
 8007766:	3714      	adds	r7, #20
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr
 8007770:	200092e0 	.word	0x200092e0

08007774 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007774:	b580      	push	{r7, lr}
 8007776:	b086      	sub	sp, #24
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007784:	f001 fbaa 	bl	8008edc <vPortEnterCritical>
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800778e:	b25b      	sxtb	r3, r3
 8007790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007794:	d103      	bne.n	800779e <vQueueWaitForMessageRestricted+0x2a>
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	2200      	movs	r2, #0
 800779a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077a4:	b25b      	sxtb	r3, r3
 80077a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077aa:	d103      	bne.n	80077b4 <vQueueWaitForMessageRestricted+0x40>
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077b4:	f001 fbc0 	bl	8008f38 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d106      	bne.n	80077ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	3324      	adds	r3, #36	; 0x24
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	68b9      	ldr	r1, [r7, #8]
 80077c8:	4618      	mov	r0, r3
 80077ca:	f000 fc57 	bl	800807c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80077ce:	6978      	ldr	r0, [r7, #20]
 80077d0:	f7ff ff28 	bl	8007624 <prvUnlockQueue>
	}
 80077d4:	bf00      	nop
 80077d6:	3718      	adds	r7, #24
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b08e      	sub	sp, #56	; 0x38
 80077e0:	af04      	add	r7, sp, #16
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	607a      	str	r2, [r7, #4]
 80077e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80077ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d109      	bne.n	8007804 <xTaskCreateStatic+0x28>
 80077f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f4:	f383 8811 	msr	BASEPRI, r3
 80077f8:	f3bf 8f6f 	isb	sy
 80077fc:	f3bf 8f4f 	dsb	sy
 8007800:	623b      	str	r3, [r7, #32]
 8007802:	e7fe      	b.n	8007802 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007806:	2b00      	cmp	r3, #0
 8007808:	d109      	bne.n	800781e <xTaskCreateStatic+0x42>
 800780a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780e:	f383 8811 	msr	BASEPRI, r3
 8007812:	f3bf 8f6f 	isb	sy
 8007816:	f3bf 8f4f 	dsb	sy
 800781a:	61fb      	str	r3, [r7, #28]
 800781c:	e7fe      	b.n	800781c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800781e:	2360      	movs	r3, #96	; 0x60
 8007820:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	2b60      	cmp	r3, #96	; 0x60
 8007826:	d009      	beq.n	800783c <xTaskCreateStatic+0x60>
 8007828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782c:	f383 8811 	msr	BASEPRI, r3
 8007830:	f3bf 8f6f 	isb	sy
 8007834:	f3bf 8f4f 	dsb	sy
 8007838:	61bb      	str	r3, [r7, #24]
 800783a:	e7fe      	b.n	800783a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800783c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800783e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007840:	2b00      	cmp	r3, #0
 8007842:	d01e      	beq.n	8007882 <xTaskCreateStatic+0xa6>
 8007844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007846:	2b00      	cmp	r3, #0
 8007848:	d01b      	beq.n	8007882 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800784a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800784c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800784e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007850:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007852:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007856:	2202      	movs	r2, #2
 8007858:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800785c:	2300      	movs	r3, #0
 800785e:	9303      	str	r3, [sp, #12]
 8007860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007862:	9302      	str	r3, [sp, #8]
 8007864:	f107 0314 	add.w	r3, r7, #20
 8007868:	9301      	str	r3, [sp, #4]
 800786a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786c:	9300      	str	r3, [sp, #0]
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	68b9      	ldr	r1, [r7, #8]
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f000 f850 	bl	800791a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800787a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800787c:	f000 f8de 	bl	8007a3c <prvAddNewTaskToReadyList>
 8007880:	e001      	b.n	8007886 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8007882:	2300      	movs	r3, #0
 8007884:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007886:	697b      	ldr	r3, [r7, #20]
	}
 8007888:	4618      	mov	r0, r3
 800788a:	3728      	adds	r7, #40	; 0x28
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007890:	b580      	push	{r7, lr}
 8007892:	b08c      	sub	sp, #48	; 0x30
 8007894:	af04      	add	r7, sp, #16
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	60b9      	str	r1, [r7, #8]
 800789a:	603b      	str	r3, [r7, #0]
 800789c:	4613      	mov	r3, r2
 800789e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80078a0:	88fb      	ldrh	r3, [r7, #6]
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	4618      	mov	r0, r3
 80078a6:	f001 fc33 	bl	8009110 <pvPortMalloc>
 80078aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00e      	beq.n	80078d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80078b2:	2060      	movs	r0, #96	; 0x60
 80078b4:	f001 fc2c 	bl	8009110 <pvPortMalloc>
 80078b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d003      	beq.n	80078c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	697a      	ldr	r2, [r7, #20]
 80078c4:	631a      	str	r2, [r3, #48]	; 0x30
 80078c6:	e005      	b.n	80078d4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80078c8:	6978      	ldr	r0, [r7, #20]
 80078ca:	f001 fce7 	bl	800929c <vPortFree>
 80078ce:	e001      	b.n	80078d4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80078d0:	2300      	movs	r3, #0
 80078d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d017      	beq.n	800790a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	2200      	movs	r2, #0
 80078de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80078e2:	88fa      	ldrh	r2, [r7, #6]
 80078e4:	2300      	movs	r3, #0
 80078e6:	9303      	str	r3, [sp, #12]
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	9302      	str	r3, [sp, #8]
 80078ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ee:	9301      	str	r3, [sp, #4]
 80078f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f2:	9300      	str	r3, [sp, #0]
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	68b9      	ldr	r1, [r7, #8]
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f000 f80e 	bl	800791a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80078fe:	69f8      	ldr	r0, [r7, #28]
 8007900:	f000 f89c 	bl	8007a3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007904:	2301      	movs	r3, #1
 8007906:	61bb      	str	r3, [r7, #24]
 8007908:	e002      	b.n	8007910 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800790a:	f04f 33ff 	mov.w	r3, #4294967295
 800790e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007910:	69bb      	ldr	r3, [r7, #24]
	}
 8007912:	4618      	mov	r0, r3
 8007914:	3720      	adds	r7, #32
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b088      	sub	sp, #32
 800791e:	af00      	add	r7, sp, #0
 8007920:	60f8      	str	r0, [r7, #12]
 8007922:	60b9      	str	r1, [r7, #8]
 8007924:	607a      	str	r2, [r7, #4]
 8007926:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800792a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	461a      	mov	r2, r3
 8007932:	21a5      	movs	r1, #165	; 0xa5
 8007934:	f001 fdf5 	bl	8009522 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007942:	3b01      	subs	r3, #1
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	4413      	add	r3, r2
 8007948:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800794a:	69bb      	ldr	r3, [r7, #24]
 800794c:	f023 0307 	bic.w	r3, r3, #7
 8007950:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	f003 0307 	and.w	r3, r3, #7
 8007958:	2b00      	cmp	r3, #0
 800795a:	d009      	beq.n	8007970 <prvInitialiseNewTask+0x56>
 800795c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007960:	f383 8811 	msr	BASEPRI, r3
 8007964:	f3bf 8f6f 	isb	sy
 8007968:	f3bf 8f4f 	dsb	sy
 800796c:	617b      	str	r3, [r7, #20]
 800796e:	e7fe      	b.n	800796e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d01f      	beq.n	80079b6 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007976:	2300      	movs	r3, #0
 8007978:	61fb      	str	r3, [r7, #28]
 800797a:	e012      	b.n	80079a2 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800797c:	68ba      	ldr	r2, [r7, #8]
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	4413      	add	r3, r2
 8007982:	7819      	ldrb	r1, [r3, #0]
 8007984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	4413      	add	r3, r2
 800798a:	3334      	adds	r3, #52	; 0x34
 800798c:	460a      	mov	r2, r1
 800798e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007990:	68ba      	ldr	r2, [r7, #8]
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	4413      	add	r3, r2
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d006      	beq.n	80079aa <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	3301      	adds	r3, #1
 80079a0:	61fb      	str	r3, [r7, #28]
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	2b0f      	cmp	r3, #15
 80079a6:	d9e9      	bls.n	800797c <prvInitialiseNewTask+0x62>
 80079a8:	e000      	b.n	80079ac <prvInitialiseNewTask+0x92>
			{
				break;
 80079aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80079ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ae:	2200      	movs	r2, #0
 80079b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80079b4:	e003      	b.n	80079be <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80079b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80079be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c0:	2b37      	cmp	r3, #55	; 0x37
 80079c2:	d901      	bls.n	80079c8 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80079c4:	2337      	movs	r3, #55	; 0x37
 80079c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80079c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80079ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079d2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80079d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d6:	2200      	movs	r2, #0
 80079d8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80079da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079dc:	3304      	adds	r3, #4
 80079de:	4618      	mov	r0, r3
 80079e0:	f7ff f994 	bl	8006d0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80079e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e6:	3318      	adds	r3, #24
 80079e8:	4618      	mov	r0, r3
 80079ea:	f7ff f98f 	bl	8006d0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80079ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80079fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80079fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a02:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8007a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a06:	2200      	movs	r2, #0
 8007a08:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a12:	2200      	movs	r2, #0
 8007a14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007a18:	683a      	ldr	r2, [r7, #0]
 8007a1a:	68f9      	ldr	r1, [r7, #12]
 8007a1c:	69b8      	ldr	r0, [r7, #24]
 8007a1e:	f001 f933 	bl	8008c88 <pxPortInitialiseStack>
 8007a22:	4602      	mov	r2, r0
 8007a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a26:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d002      	beq.n	8007a34 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a32:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a34:	bf00      	nop
 8007a36:	3720      	adds	r7, #32
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b082      	sub	sp, #8
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007a44:	f001 fa4a 	bl	8008edc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007a48:	4b2d      	ldr	r3, [pc, #180]	; (8007b00 <prvAddNewTaskToReadyList+0xc4>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	4a2c      	ldr	r2, [pc, #176]	; (8007b00 <prvAddNewTaskToReadyList+0xc4>)
 8007a50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007a52:	4b2c      	ldr	r3, [pc, #176]	; (8007b04 <prvAddNewTaskToReadyList+0xc8>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d109      	bne.n	8007a6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007a5a:	4a2a      	ldr	r2, [pc, #168]	; (8007b04 <prvAddNewTaskToReadyList+0xc8>)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007a60:	4b27      	ldr	r3, [pc, #156]	; (8007b00 <prvAddNewTaskToReadyList+0xc4>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d110      	bne.n	8007a8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007a68:	f000 fc30 	bl	80082cc <prvInitialiseTaskLists>
 8007a6c:	e00d      	b.n	8007a8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007a6e:	4b26      	ldr	r3, [pc, #152]	; (8007b08 <prvAddNewTaskToReadyList+0xcc>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d109      	bne.n	8007a8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007a76:	4b23      	ldr	r3, [pc, #140]	; (8007b04 <prvAddNewTaskToReadyList+0xc8>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d802      	bhi.n	8007a8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007a84:	4a1f      	ldr	r2, [pc, #124]	; (8007b04 <prvAddNewTaskToReadyList+0xc8>)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007a8a:	4b20      	ldr	r3, [pc, #128]	; (8007b0c <prvAddNewTaskToReadyList+0xd0>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	3301      	adds	r3, #1
 8007a90:	4a1e      	ldr	r2, [pc, #120]	; (8007b0c <prvAddNewTaskToReadyList+0xd0>)
 8007a92:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007a94:	4b1d      	ldr	r3, [pc, #116]	; (8007b0c <prvAddNewTaskToReadyList+0xd0>)
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aa0:	4b1b      	ldr	r3, [pc, #108]	; (8007b10 <prvAddNewTaskToReadyList+0xd4>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d903      	bls.n	8007ab0 <prvAddNewTaskToReadyList+0x74>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aac:	4a18      	ldr	r2, [pc, #96]	; (8007b10 <prvAddNewTaskToReadyList+0xd4>)
 8007aae:	6013      	str	r3, [r2, #0]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	4413      	add	r3, r2
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	4a15      	ldr	r2, [pc, #84]	; (8007b14 <prvAddNewTaskToReadyList+0xd8>)
 8007abe:	441a      	add	r2, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	3304      	adds	r3, #4
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	4610      	mov	r0, r2
 8007ac8:	f7ff f92d 	bl	8006d26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007acc:	f001 fa34 	bl	8008f38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007ad0:	4b0d      	ldr	r3, [pc, #52]	; (8007b08 <prvAddNewTaskToReadyList+0xcc>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00e      	beq.n	8007af6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007ad8:	4b0a      	ldr	r3, [pc, #40]	; (8007b04 <prvAddNewTaskToReadyList+0xc8>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d207      	bcs.n	8007af6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007ae6:	4b0c      	ldr	r3, [pc, #48]	; (8007b18 <prvAddNewTaskToReadyList+0xdc>)
 8007ae8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aec:	601a      	str	r2, [r3, #0]
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007af6:	bf00      	nop
 8007af8:	3708      	adds	r7, #8
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	20000bc8 	.word	0x20000bc8
 8007b04:	200006f4 	.word	0x200006f4
 8007b08:	20000bd4 	.word	0x20000bd4
 8007b0c:	20000be4 	.word	0x20000be4
 8007b10:	20000bd0 	.word	0x20000bd0
 8007b14:	200006f8 	.word	0x200006f8
 8007b18:	e000ed04 	.word	0xe000ed04

08007b1c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007b24:	2300      	movs	r3, #0
 8007b26:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d016      	beq.n	8007b5c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007b2e:	4b13      	ldr	r3, [pc, #76]	; (8007b7c <vTaskDelay+0x60>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d009      	beq.n	8007b4a <vTaskDelay+0x2e>
 8007b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3a:	f383 8811 	msr	BASEPRI, r3
 8007b3e:	f3bf 8f6f 	isb	sy
 8007b42:	f3bf 8f4f 	dsb	sy
 8007b46:	60bb      	str	r3, [r7, #8]
 8007b48:	e7fe      	b.n	8007b48 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007b4a:	f000 f87f 	bl	8007c4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007b4e:	2100      	movs	r1, #0
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 fcff 	bl	8008554 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007b56:	f000 f887 	bl	8007c68 <xTaskResumeAll>
 8007b5a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d107      	bne.n	8007b72 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007b62:	4b07      	ldr	r3, [pc, #28]	; (8007b80 <vTaskDelay+0x64>)
 8007b64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b68:	601a      	str	r2, [r3, #0]
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b72:	bf00      	nop
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	20000bf0 	.word	0x20000bf0
 8007b80:	e000ed04 	.word	0xe000ed04

08007b84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b08a      	sub	sp, #40	; 0x28
 8007b88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007b92:	463a      	mov	r2, r7
 8007b94:	1d39      	adds	r1, r7, #4
 8007b96:	f107 0308 	add.w	r3, r7, #8
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7ff f862 	bl	8006c64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007ba0:	6839      	ldr	r1, [r7, #0]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	68ba      	ldr	r2, [r7, #8]
 8007ba6:	9202      	str	r2, [sp, #8]
 8007ba8:	9301      	str	r3, [sp, #4]
 8007baa:	2300      	movs	r3, #0
 8007bac:	9300      	str	r3, [sp, #0]
 8007bae:	2300      	movs	r3, #0
 8007bb0:	460a      	mov	r2, r1
 8007bb2:	4920      	ldr	r1, [pc, #128]	; (8007c34 <vTaskStartScheduler+0xb0>)
 8007bb4:	4820      	ldr	r0, [pc, #128]	; (8007c38 <vTaskStartScheduler+0xb4>)
 8007bb6:	f7ff fe11 	bl	80077dc <xTaskCreateStatic>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	4b1f      	ldr	r3, [pc, #124]	; (8007c3c <vTaskStartScheduler+0xb8>)
 8007bbe:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007bc0:	4b1e      	ldr	r3, [pc, #120]	; (8007c3c <vTaskStartScheduler+0xb8>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d002      	beq.n	8007bce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	617b      	str	r3, [r7, #20]
 8007bcc:	e001      	b.n	8007bd2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d102      	bne.n	8007bde <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007bd8:	f000 fd10 	bl	80085fc <xTimerCreateTimerTask>
 8007bdc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d115      	bne.n	8007c10 <vTaskStartScheduler+0x8c>
 8007be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be8:	f383 8811 	msr	BASEPRI, r3
 8007bec:	f3bf 8f6f 	isb	sy
 8007bf0:	f3bf 8f4f 	dsb	sy
 8007bf4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007bf6:	4b12      	ldr	r3, [pc, #72]	; (8007c40 <vTaskStartScheduler+0xbc>)
 8007bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8007bfc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007bfe:	4b11      	ldr	r3, [pc, #68]	; (8007c44 <vTaskStartScheduler+0xc0>)
 8007c00:	2201      	movs	r2, #1
 8007c02:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007c04:	4b10      	ldr	r3, [pc, #64]	; (8007c48 <vTaskStartScheduler+0xc4>)
 8007c06:	2200      	movs	r2, #0
 8007c08:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007c0a:	f001 f8c9 	bl	8008da0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007c0e:	e00d      	b.n	8007c2c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c16:	d109      	bne.n	8007c2c <vTaskStartScheduler+0xa8>
 8007c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c1c:	f383 8811 	msr	BASEPRI, r3
 8007c20:	f3bf 8f6f 	isb	sy
 8007c24:	f3bf 8f4f 	dsb	sy
 8007c28:	60fb      	str	r3, [r7, #12]
 8007c2a:	e7fe      	b.n	8007c2a <vTaskStartScheduler+0xa6>
}
 8007c2c:	bf00      	nop
 8007c2e:	3718      	adds	r7, #24
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	08009574 	.word	0x08009574
 8007c38:	08008299 	.word	0x08008299
 8007c3c:	20000bec 	.word	0x20000bec
 8007c40:	20000be8 	.word	0x20000be8
 8007c44:	20000bd4 	.word	0x20000bd4
 8007c48:	20000bcc 	.word	0x20000bcc

08007c4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007c50:	4b04      	ldr	r3, [pc, #16]	; (8007c64 <vTaskSuspendAll+0x18>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	3301      	adds	r3, #1
 8007c56:	4a03      	ldr	r2, [pc, #12]	; (8007c64 <vTaskSuspendAll+0x18>)
 8007c58:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007c5a:	bf00      	nop
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr
 8007c64:	20000bf0 	.word	0x20000bf0

08007c68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007c72:	2300      	movs	r3, #0
 8007c74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007c76:	4b41      	ldr	r3, [pc, #260]	; (8007d7c <xTaskResumeAll+0x114>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d109      	bne.n	8007c92 <xTaskResumeAll+0x2a>
 8007c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	603b      	str	r3, [r7, #0]
 8007c90:	e7fe      	b.n	8007c90 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007c92:	f001 f923 	bl	8008edc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007c96:	4b39      	ldr	r3, [pc, #228]	; (8007d7c <xTaskResumeAll+0x114>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	4a37      	ldr	r2, [pc, #220]	; (8007d7c <xTaskResumeAll+0x114>)
 8007c9e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ca0:	4b36      	ldr	r3, [pc, #216]	; (8007d7c <xTaskResumeAll+0x114>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d162      	bne.n	8007d6e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007ca8:	4b35      	ldr	r3, [pc, #212]	; (8007d80 <xTaskResumeAll+0x118>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d05e      	beq.n	8007d6e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007cb0:	e02f      	b.n	8007d12 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cb2:	4b34      	ldr	r3, [pc, #208]	; (8007d84 <xTaskResumeAll+0x11c>)
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	3318      	adds	r3, #24
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7ff f88e 	bl	8006de0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	3304      	adds	r3, #4
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f7ff f889 	bl	8006de0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cd2:	4b2d      	ldr	r3, [pc, #180]	; (8007d88 <xTaskResumeAll+0x120>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d903      	bls.n	8007ce2 <xTaskResumeAll+0x7a>
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cde:	4a2a      	ldr	r2, [pc, #168]	; (8007d88 <xTaskResumeAll+0x120>)
 8007ce0:	6013      	str	r3, [r2, #0]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	4413      	add	r3, r2
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	4a27      	ldr	r2, [pc, #156]	; (8007d8c <xTaskResumeAll+0x124>)
 8007cf0:	441a      	add	r2, r3
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	3304      	adds	r3, #4
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	4610      	mov	r0, r2
 8007cfa:	f7ff f814 	bl	8006d26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d02:	4b23      	ldr	r3, [pc, #140]	; (8007d90 <xTaskResumeAll+0x128>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d302      	bcc.n	8007d12 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007d0c:	4b21      	ldr	r3, [pc, #132]	; (8007d94 <xTaskResumeAll+0x12c>)
 8007d0e:	2201      	movs	r2, #1
 8007d10:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d12:	4b1c      	ldr	r3, [pc, #112]	; (8007d84 <xTaskResumeAll+0x11c>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1cb      	bne.n	8007cb2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d001      	beq.n	8007d24 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007d20:	f000 fb6e 	bl	8008400 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007d24:	4b1c      	ldr	r3, [pc, #112]	; (8007d98 <xTaskResumeAll+0x130>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d010      	beq.n	8007d52 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007d30:	f000 f846 	bl	8007dc0 <xTaskIncrementTick>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d002      	beq.n	8007d40 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007d3a:	4b16      	ldr	r3, [pc, #88]	; (8007d94 <xTaskResumeAll+0x12c>)
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	3b01      	subs	r3, #1
 8007d44:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d1f1      	bne.n	8007d30 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007d4c:	4b12      	ldr	r3, [pc, #72]	; (8007d98 <xTaskResumeAll+0x130>)
 8007d4e:	2200      	movs	r2, #0
 8007d50:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007d52:	4b10      	ldr	r3, [pc, #64]	; (8007d94 <xTaskResumeAll+0x12c>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d009      	beq.n	8007d6e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007d5e:	4b0f      	ldr	r3, [pc, #60]	; (8007d9c <xTaskResumeAll+0x134>)
 8007d60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d64:	601a      	str	r2, [r3, #0]
 8007d66:	f3bf 8f4f 	dsb	sy
 8007d6a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d6e:	f001 f8e3 	bl	8008f38 <vPortExitCritical>

	return xAlreadyYielded;
 8007d72:	68bb      	ldr	r3, [r7, #8]
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3710      	adds	r7, #16
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}
 8007d7c:	20000bf0 	.word	0x20000bf0
 8007d80:	20000bc8 	.word	0x20000bc8
 8007d84:	20000b88 	.word	0x20000b88
 8007d88:	20000bd0 	.word	0x20000bd0
 8007d8c:	200006f8 	.word	0x200006f8
 8007d90:	200006f4 	.word	0x200006f4
 8007d94:	20000bdc 	.word	0x20000bdc
 8007d98:	20000bd8 	.word	0x20000bd8
 8007d9c:	e000ed04 	.word	0xe000ed04

08007da0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007da6:	4b05      	ldr	r3, [pc, #20]	; (8007dbc <xTaskGetTickCount+0x1c>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007dac:	687b      	ldr	r3, [r7, #4]
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	370c      	adds	r7, #12
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr
 8007dba:	bf00      	nop
 8007dbc:	20000bcc 	.word	0x20000bcc

08007dc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b086      	sub	sp, #24
 8007dc4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007dca:	4b4e      	ldr	r3, [pc, #312]	; (8007f04 <xTaskIncrementTick+0x144>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	f040 8088 	bne.w	8007ee4 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007dd4:	4b4c      	ldr	r3, [pc, #304]	; (8007f08 <xTaskIncrementTick+0x148>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	3301      	adds	r3, #1
 8007dda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007ddc:	4a4a      	ldr	r2, [pc, #296]	; (8007f08 <xTaskIncrementTick+0x148>)
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d11f      	bne.n	8007e28 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007de8:	4b48      	ldr	r3, [pc, #288]	; (8007f0c <xTaskIncrementTick+0x14c>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d009      	beq.n	8007e06 <xTaskIncrementTick+0x46>
 8007df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df6:	f383 8811 	msr	BASEPRI, r3
 8007dfa:	f3bf 8f6f 	isb	sy
 8007dfe:	f3bf 8f4f 	dsb	sy
 8007e02:	603b      	str	r3, [r7, #0]
 8007e04:	e7fe      	b.n	8007e04 <xTaskIncrementTick+0x44>
 8007e06:	4b41      	ldr	r3, [pc, #260]	; (8007f0c <xTaskIncrementTick+0x14c>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	60fb      	str	r3, [r7, #12]
 8007e0c:	4b40      	ldr	r3, [pc, #256]	; (8007f10 <xTaskIncrementTick+0x150>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a3e      	ldr	r2, [pc, #248]	; (8007f0c <xTaskIncrementTick+0x14c>)
 8007e12:	6013      	str	r3, [r2, #0]
 8007e14:	4a3e      	ldr	r2, [pc, #248]	; (8007f10 <xTaskIncrementTick+0x150>)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	6013      	str	r3, [r2, #0]
 8007e1a:	4b3e      	ldr	r3, [pc, #248]	; (8007f14 <xTaskIncrementTick+0x154>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	3301      	adds	r3, #1
 8007e20:	4a3c      	ldr	r2, [pc, #240]	; (8007f14 <xTaskIncrementTick+0x154>)
 8007e22:	6013      	str	r3, [r2, #0]
 8007e24:	f000 faec 	bl	8008400 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007e28:	4b3b      	ldr	r3, [pc, #236]	; (8007f18 <xTaskIncrementTick+0x158>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	693a      	ldr	r2, [r7, #16]
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d349      	bcc.n	8007ec6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e32:	4b36      	ldr	r3, [pc, #216]	; (8007f0c <xTaskIncrementTick+0x14c>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d104      	bne.n	8007e46 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e3c:	4b36      	ldr	r3, [pc, #216]	; (8007f18 <xTaskIncrementTick+0x158>)
 8007e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e42:	601a      	str	r2, [r3, #0]
					break;
 8007e44:	e03f      	b.n	8007ec6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e46:	4b31      	ldr	r3, [pc, #196]	; (8007f0c <xTaskIncrementTick+0x14c>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007e56:	693a      	ldr	r2, [r7, #16]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d203      	bcs.n	8007e66 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007e5e:	4a2e      	ldr	r2, [pc, #184]	; (8007f18 <xTaskIncrementTick+0x158>)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007e64:	e02f      	b.n	8007ec6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	3304      	adds	r3, #4
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7fe ffb8 	bl	8006de0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d004      	beq.n	8007e82 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	3318      	adds	r3, #24
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7fe ffaf 	bl	8006de0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e86:	4b25      	ldr	r3, [pc, #148]	; (8007f1c <xTaskIncrementTick+0x15c>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d903      	bls.n	8007e96 <xTaskIncrementTick+0xd6>
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e92:	4a22      	ldr	r2, [pc, #136]	; (8007f1c <xTaskIncrementTick+0x15c>)
 8007e94:	6013      	str	r3, [r2, #0]
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e9a:	4613      	mov	r3, r2
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	4413      	add	r3, r2
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	4a1f      	ldr	r2, [pc, #124]	; (8007f20 <xTaskIncrementTick+0x160>)
 8007ea4:	441a      	add	r2, r3
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	3304      	adds	r3, #4
 8007eaa:	4619      	mov	r1, r3
 8007eac:	4610      	mov	r0, r2
 8007eae:	f7fe ff3a 	bl	8006d26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eb6:	4b1b      	ldr	r3, [pc, #108]	; (8007f24 <xTaskIncrementTick+0x164>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d3b8      	bcc.n	8007e32 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ec4:	e7b5      	b.n	8007e32 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007ec6:	4b17      	ldr	r3, [pc, #92]	; (8007f24 <xTaskIncrementTick+0x164>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ecc:	4914      	ldr	r1, [pc, #80]	; (8007f20 <xTaskIncrementTick+0x160>)
 8007ece:	4613      	mov	r3, r2
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	4413      	add	r3, r2
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	440b      	add	r3, r1
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d907      	bls.n	8007eee <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	617b      	str	r3, [r7, #20]
 8007ee2:	e004      	b.n	8007eee <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007ee4:	4b10      	ldr	r3, [pc, #64]	; (8007f28 <xTaskIncrementTick+0x168>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	3301      	adds	r3, #1
 8007eea:	4a0f      	ldr	r2, [pc, #60]	; (8007f28 <xTaskIncrementTick+0x168>)
 8007eec:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007eee:	4b0f      	ldr	r3, [pc, #60]	; (8007f2c <xTaskIncrementTick+0x16c>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d001      	beq.n	8007efa <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007efa:	697b      	ldr	r3, [r7, #20]
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3718      	adds	r7, #24
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	20000bf0 	.word	0x20000bf0
 8007f08:	20000bcc 	.word	0x20000bcc
 8007f0c:	20000b80 	.word	0x20000b80
 8007f10:	20000b84 	.word	0x20000b84
 8007f14:	20000be0 	.word	0x20000be0
 8007f18:	20000be8 	.word	0x20000be8
 8007f1c:	20000bd0 	.word	0x20000bd0
 8007f20:	200006f8 	.word	0x200006f8
 8007f24:	200006f4 	.word	0x200006f4
 8007f28:	20000bd8 	.word	0x20000bd8
 8007f2c:	20000bdc 	.word	0x20000bdc

08007f30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b086      	sub	sp, #24
 8007f34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007f36:	4b3a      	ldr	r3, [pc, #232]	; (8008020 <vTaskSwitchContext+0xf0>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d003      	beq.n	8007f46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007f3e:	4b39      	ldr	r3, [pc, #228]	; (8008024 <vTaskSwitchContext+0xf4>)
 8007f40:	2201      	movs	r2, #1
 8007f42:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007f44:	e067      	b.n	8008016 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 8007f46:	4b37      	ldr	r3, [pc, #220]	; (8008024 <vTaskSwitchContext+0xf4>)
 8007f48:	2200      	movs	r2, #0
 8007f4a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8007f4c:	4b36      	ldr	r3, [pc, #216]	; (8008028 <vTaskSwitchContext+0xf8>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f52:	613b      	str	r3, [r7, #16]
 8007f54:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8007f58:	60fb      	str	r3, [r7, #12]
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d111      	bne.n	8007f88 <vTaskSwitchContext+0x58>
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	3304      	adds	r3, #4
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d10b      	bne.n	8007f88 <vTaskSwitchContext+0x58>
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	3308      	adds	r3, #8
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	68fa      	ldr	r2, [r7, #12]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d105      	bne.n	8007f88 <vTaskSwitchContext+0x58>
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	330c      	adds	r3, #12
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d008      	beq.n	8007f9a <vTaskSwitchContext+0x6a>
 8007f88:	4b27      	ldr	r3, [pc, #156]	; (8008028 <vTaskSwitchContext+0xf8>)
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	4b26      	ldr	r3, [pc, #152]	; (8008028 <vTaskSwitchContext+0xf8>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	3334      	adds	r3, #52	; 0x34
 8007f92:	4619      	mov	r1, r3
 8007f94:	4610      	mov	r0, r2
 8007f96:	f7f8 fab2 	bl	80004fe <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f9a:	4b24      	ldr	r3, [pc, #144]	; (800802c <vTaskSwitchContext+0xfc>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	617b      	str	r3, [r7, #20]
 8007fa0:	e00f      	b.n	8007fc2 <vTaskSwitchContext+0x92>
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d109      	bne.n	8007fbc <vTaskSwitchContext+0x8c>
 8007fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fac:	f383 8811 	msr	BASEPRI, r3
 8007fb0:	f3bf 8f6f 	isb	sy
 8007fb4:	f3bf 8f4f 	dsb	sy
 8007fb8:	607b      	str	r3, [r7, #4]
 8007fba:	e7fe      	b.n	8007fba <vTaskSwitchContext+0x8a>
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	3b01      	subs	r3, #1
 8007fc0:	617b      	str	r3, [r7, #20]
 8007fc2:	491b      	ldr	r1, [pc, #108]	; (8008030 <vTaskSwitchContext+0x100>)
 8007fc4:	697a      	ldr	r2, [r7, #20]
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	4413      	add	r3, r2
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	440b      	add	r3, r1
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d0e5      	beq.n	8007fa2 <vTaskSwitchContext+0x72>
 8007fd6:	697a      	ldr	r2, [r7, #20]
 8007fd8:	4613      	mov	r3, r2
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	4413      	add	r3, r2
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	4a13      	ldr	r2, [pc, #76]	; (8008030 <vTaskSwitchContext+0x100>)
 8007fe2:	4413      	add	r3, r2
 8007fe4:	60bb      	str	r3, [r7, #8]
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	685a      	ldr	r2, [r3, #4]
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	605a      	str	r2, [r3, #4]
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	685a      	ldr	r2, [r3, #4]
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	3308      	adds	r3, #8
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d104      	bne.n	8008006 <vTaskSwitchContext+0xd6>
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	685a      	ldr	r2, [r3, #4]
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	605a      	str	r2, [r3, #4]
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	4a06      	ldr	r2, [pc, #24]	; (8008028 <vTaskSwitchContext+0xf8>)
 800800e:	6013      	str	r3, [r2, #0]
 8008010:	4a06      	ldr	r2, [pc, #24]	; (800802c <vTaskSwitchContext+0xfc>)
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	6013      	str	r3, [r2, #0]
}
 8008016:	bf00      	nop
 8008018:	3718      	adds	r7, #24
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	20000bf0 	.word	0x20000bf0
 8008024:	20000bdc 	.word	0x20000bdc
 8008028:	200006f4 	.word	0x200006f4
 800802c:	20000bd0 	.word	0x20000bd0
 8008030:	200006f8 	.word	0x200006f8

08008034 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d109      	bne.n	8008058 <vTaskPlaceOnEventList+0x24>
 8008044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008048:	f383 8811 	msr	BASEPRI, r3
 800804c:	f3bf 8f6f 	isb	sy
 8008050:	f3bf 8f4f 	dsb	sy
 8008054:	60fb      	str	r3, [r7, #12]
 8008056:	e7fe      	b.n	8008056 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008058:	4b07      	ldr	r3, [pc, #28]	; (8008078 <vTaskPlaceOnEventList+0x44>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	3318      	adds	r3, #24
 800805e:	4619      	mov	r1, r3
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f7fe fe84 	bl	8006d6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008066:	2101      	movs	r1, #1
 8008068:	6838      	ldr	r0, [r7, #0]
 800806a:	f000 fa73 	bl	8008554 <prvAddCurrentTaskToDelayedList>
}
 800806e:	bf00      	nop
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	200006f4 	.word	0x200006f4

0800807c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800807c:	b580      	push	{r7, lr}
 800807e:	b086      	sub	sp, #24
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d109      	bne.n	80080a2 <vTaskPlaceOnEventListRestricted+0x26>
 800808e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008092:	f383 8811 	msr	BASEPRI, r3
 8008096:	f3bf 8f6f 	isb	sy
 800809a:	f3bf 8f4f 	dsb	sy
 800809e:	617b      	str	r3, [r7, #20]
 80080a0:	e7fe      	b.n	80080a0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80080a2:	4b0a      	ldr	r3, [pc, #40]	; (80080cc <vTaskPlaceOnEventListRestricted+0x50>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	3318      	adds	r3, #24
 80080a8:	4619      	mov	r1, r3
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	f7fe fe3b 	bl	8006d26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d002      	beq.n	80080bc <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80080b6:	f04f 33ff 	mov.w	r3, #4294967295
 80080ba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80080bc:	6879      	ldr	r1, [r7, #4]
 80080be:	68b8      	ldr	r0, [r7, #8]
 80080c0:	f000 fa48 	bl	8008554 <prvAddCurrentTaskToDelayedList>
	}
 80080c4:	bf00      	nop
 80080c6:	3718      	adds	r7, #24
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	200006f4 	.word	0x200006f4

080080d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b086      	sub	sp, #24
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d109      	bne.n	80080fa <xTaskRemoveFromEventList+0x2a>
 80080e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ea:	f383 8811 	msr	BASEPRI, r3
 80080ee:	f3bf 8f6f 	isb	sy
 80080f2:	f3bf 8f4f 	dsb	sy
 80080f6:	60fb      	str	r3, [r7, #12]
 80080f8:	e7fe      	b.n	80080f8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	3318      	adds	r3, #24
 80080fe:	4618      	mov	r0, r3
 8008100:	f7fe fe6e 	bl	8006de0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008104:	4b1d      	ldr	r3, [pc, #116]	; (800817c <xTaskRemoveFromEventList+0xac>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d11d      	bne.n	8008148 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	3304      	adds	r3, #4
 8008110:	4618      	mov	r0, r3
 8008112:	f7fe fe65 	bl	8006de0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800811a:	4b19      	ldr	r3, [pc, #100]	; (8008180 <xTaskRemoveFromEventList+0xb0>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	429a      	cmp	r2, r3
 8008120:	d903      	bls.n	800812a <xTaskRemoveFromEventList+0x5a>
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008126:	4a16      	ldr	r2, [pc, #88]	; (8008180 <xTaskRemoveFromEventList+0xb0>)
 8008128:	6013      	str	r3, [r2, #0]
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800812e:	4613      	mov	r3, r2
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	4413      	add	r3, r2
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	4a13      	ldr	r2, [pc, #76]	; (8008184 <xTaskRemoveFromEventList+0xb4>)
 8008138:	441a      	add	r2, r3
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	3304      	adds	r3, #4
 800813e:	4619      	mov	r1, r3
 8008140:	4610      	mov	r0, r2
 8008142:	f7fe fdf0 	bl	8006d26 <vListInsertEnd>
 8008146:	e005      	b.n	8008154 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	3318      	adds	r3, #24
 800814c:	4619      	mov	r1, r3
 800814e:	480e      	ldr	r0, [pc, #56]	; (8008188 <xTaskRemoveFromEventList+0xb8>)
 8008150:	f7fe fde9 	bl	8006d26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008158:	4b0c      	ldr	r3, [pc, #48]	; (800818c <xTaskRemoveFromEventList+0xbc>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800815e:	429a      	cmp	r2, r3
 8008160:	d905      	bls.n	800816e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008162:	2301      	movs	r3, #1
 8008164:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008166:	4b0a      	ldr	r3, [pc, #40]	; (8008190 <xTaskRemoveFromEventList+0xc0>)
 8008168:	2201      	movs	r2, #1
 800816a:	601a      	str	r2, [r3, #0]
 800816c:	e001      	b.n	8008172 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800816e:	2300      	movs	r3, #0
 8008170:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008172:	697b      	ldr	r3, [r7, #20]
}
 8008174:	4618      	mov	r0, r3
 8008176:	3718      	adds	r7, #24
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}
 800817c:	20000bf0 	.word	0x20000bf0
 8008180:	20000bd0 	.word	0x20000bd0
 8008184:	200006f8 	.word	0x200006f8
 8008188:	20000b88 	.word	0x20000b88
 800818c:	200006f4 	.word	0x200006f4
 8008190:	20000bdc 	.word	0x20000bdc

08008194 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800819c:	4b06      	ldr	r3, [pc, #24]	; (80081b8 <vTaskInternalSetTimeOutState+0x24>)
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80081a4:	4b05      	ldr	r3, [pc, #20]	; (80081bc <vTaskInternalSetTimeOutState+0x28>)
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	605a      	str	r2, [r3, #4]
}
 80081ac:	bf00      	nop
 80081ae:	370c      	adds	r7, #12
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr
 80081b8:	20000be0 	.word	0x20000be0
 80081bc:	20000bcc 	.word	0x20000bcc

080081c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b088      	sub	sp, #32
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d109      	bne.n	80081e4 <xTaskCheckForTimeOut+0x24>
 80081d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d4:	f383 8811 	msr	BASEPRI, r3
 80081d8:	f3bf 8f6f 	isb	sy
 80081dc:	f3bf 8f4f 	dsb	sy
 80081e0:	613b      	str	r3, [r7, #16]
 80081e2:	e7fe      	b.n	80081e2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d109      	bne.n	80081fe <xTaskCheckForTimeOut+0x3e>
 80081ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ee:	f383 8811 	msr	BASEPRI, r3
 80081f2:	f3bf 8f6f 	isb	sy
 80081f6:	f3bf 8f4f 	dsb	sy
 80081fa:	60fb      	str	r3, [r7, #12]
 80081fc:	e7fe      	b.n	80081fc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80081fe:	f000 fe6d 	bl	8008edc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008202:	4b1d      	ldr	r3, [pc, #116]	; (8008278 <xTaskCheckForTimeOut+0xb8>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	69ba      	ldr	r2, [r7, #24]
 800820e:	1ad3      	subs	r3, r2, r3
 8008210:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800821a:	d102      	bne.n	8008222 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800821c:	2300      	movs	r3, #0
 800821e:	61fb      	str	r3, [r7, #28]
 8008220:	e023      	b.n	800826a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	4b15      	ldr	r3, [pc, #84]	; (800827c <xTaskCheckForTimeOut+0xbc>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	429a      	cmp	r2, r3
 800822c:	d007      	beq.n	800823e <xTaskCheckForTimeOut+0x7e>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	69ba      	ldr	r2, [r7, #24]
 8008234:	429a      	cmp	r2, r3
 8008236:	d302      	bcc.n	800823e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008238:	2301      	movs	r3, #1
 800823a:	61fb      	str	r3, [r7, #28]
 800823c:	e015      	b.n	800826a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	697a      	ldr	r2, [r7, #20]
 8008244:	429a      	cmp	r2, r3
 8008246:	d20b      	bcs.n	8008260 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	1ad2      	subs	r2, r2, r3
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f7ff ff9d 	bl	8008194 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800825a:	2300      	movs	r3, #0
 800825c:	61fb      	str	r3, [r7, #28]
 800825e:	e004      	b.n	800826a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	2200      	movs	r2, #0
 8008264:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008266:	2301      	movs	r3, #1
 8008268:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800826a:	f000 fe65 	bl	8008f38 <vPortExitCritical>

	return xReturn;
 800826e:	69fb      	ldr	r3, [r7, #28]
}
 8008270:	4618      	mov	r0, r3
 8008272:	3720      	adds	r7, #32
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}
 8008278:	20000bcc 	.word	0x20000bcc
 800827c:	20000be0 	.word	0x20000be0

08008280 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008280:	b480      	push	{r7}
 8008282:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008284:	4b03      	ldr	r3, [pc, #12]	; (8008294 <vTaskMissedYield+0x14>)
 8008286:	2201      	movs	r2, #1
 8008288:	601a      	str	r2, [r3, #0]
}
 800828a:	bf00      	nop
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr
 8008294:	20000bdc 	.word	0x20000bdc

08008298 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80082a0:	f000 f854 	bl	800834c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80082a4:	4b07      	ldr	r3, [pc, #28]	; (80082c4 <prvIdleTask+0x2c>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d907      	bls.n	80082bc <prvIdleTask+0x24>
			{
				taskYIELD();
 80082ac:	4b06      	ldr	r3, [pc, #24]	; (80082c8 <prvIdleTask+0x30>)
 80082ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082b2:	601a      	str	r2, [r3, #0]
 80082b4:	f3bf 8f4f 	dsb	sy
 80082b8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80082bc:	f7f8 f918 	bl	80004f0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80082c0:	e7ee      	b.n	80082a0 <prvIdleTask+0x8>
 80082c2:	bf00      	nop
 80082c4:	200006f8 	.word	0x200006f8
 80082c8:	e000ed04 	.word	0xe000ed04

080082cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082d2:	2300      	movs	r3, #0
 80082d4:	607b      	str	r3, [r7, #4]
 80082d6:	e00c      	b.n	80082f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	4613      	mov	r3, r2
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	4413      	add	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	4a12      	ldr	r2, [pc, #72]	; (800832c <prvInitialiseTaskLists+0x60>)
 80082e4:	4413      	add	r3, r2
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7fe fcf0 	bl	8006ccc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	3301      	adds	r3, #1
 80082f0:	607b      	str	r3, [r7, #4]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2b37      	cmp	r3, #55	; 0x37
 80082f6:	d9ef      	bls.n	80082d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80082f8:	480d      	ldr	r0, [pc, #52]	; (8008330 <prvInitialiseTaskLists+0x64>)
 80082fa:	f7fe fce7 	bl	8006ccc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80082fe:	480d      	ldr	r0, [pc, #52]	; (8008334 <prvInitialiseTaskLists+0x68>)
 8008300:	f7fe fce4 	bl	8006ccc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008304:	480c      	ldr	r0, [pc, #48]	; (8008338 <prvInitialiseTaskLists+0x6c>)
 8008306:	f7fe fce1 	bl	8006ccc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800830a:	480c      	ldr	r0, [pc, #48]	; (800833c <prvInitialiseTaskLists+0x70>)
 800830c:	f7fe fcde 	bl	8006ccc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008310:	480b      	ldr	r0, [pc, #44]	; (8008340 <prvInitialiseTaskLists+0x74>)
 8008312:	f7fe fcdb 	bl	8006ccc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008316:	4b0b      	ldr	r3, [pc, #44]	; (8008344 <prvInitialiseTaskLists+0x78>)
 8008318:	4a05      	ldr	r2, [pc, #20]	; (8008330 <prvInitialiseTaskLists+0x64>)
 800831a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800831c:	4b0a      	ldr	r3, [pc, #40]	; (8008348 <prvInitialiseTaskLists+0x7c>)
 800831e:	4a05      	ldr	r2, [pc, #20]	; (8008334 <prvInitialiseTaskLists+0x68>)
 8008320:	601a      	str	r2, [r3, #0]
}
 8008322:	bf00      	nop
 8008324:	3708      	adds	r7, #8
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	200006f8 	.word	0x200006f8
 8008330:	20000b58 	.word	0x20000b58
 8008334:	20000b6c 	.word	0x20000b6c
 8008338:	20000b88 	.word	0x20000b88
 800833c:	20000b9c 	.word	0x20000b9c
 8008340:	20000bb4 	.word	0x20000bb4
 8008344:	20000b80 	.word	0x20000b80
 8008348:	20000b84 	.word	0x20000b84

0800834c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008352:	e019      	b.n	8008388 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008354:	f000 fdc2 	bl	8008edc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008358:	4b0f      	ldr	r3, [pc, #60]	; (8008398 <prvCheckTasksWaitingTermination+0x4c>)
 800835a:	68db      	ldr	r3, [r3, #12]
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	3304      	adds	r3, #4
 8008364:	4618      	mov	r0, r3
 8008366:	f7fe fd3b 	bl	8006de0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800836a:	4b0c      	ldr	r3, [pc, #48]	; (800839c <prvCheckTasksWaitingTermination+0x50>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	3b01      	subs	r3, #1
 8008370:	4a0a      	ldr	r2, [pc, #40]	; (800839c <prvCheckTasksWaitingTermination+0x50>)
 8008372:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008374:	4b0a      	ldr	r3, [pc, #40]	; (80083a0 <prvCheckTasksWaitingTermination+0x54>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	3b01      	subs	r3, #1
 800837a:	4a09      	ldr	r2, [pc, #36]	; (80083a0 <prvCheckTasksWaitingTermination+0x54>)
 800837c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800837e:	f000 fddb 	bl	8008f38 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 f80e 	bl	80083a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008388:	4b05      	ldr	r3, [pc, #20]	; (80083a0 <prvCheckTasksWaitingTermination+0x54>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d1e1      	bne.n	8008354 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008390:	bf00      	nop
 8008392:	3708      	adds	r7, #8
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}
 8008398:	20000b9c 	.word	0x20000b9c
 800839c:	20000bc8 	.word	0x20000bc8
 80083a0:	20000bb0 	.word	0x20000bb0

080083a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d108      	bne.n	80083c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ba:	4618      	mov	r0, r3
 80083bc:	f000 ff6e 	bl	800929c <vPortFree>
				vPortFree( pxTCB );
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 ff6b 	bl	800929c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80083c6:	e017      	b.n	80083f8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d103      	bne.n	80083da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 ff62 	bl	800929c <vPortFree>
	}
 80083d8:	e00e      	b.n	80083f8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80083e0:	2b02      	cmp	r3, #2
 80083e2:	d009      	beq.n	80083f8 <prvDeleteTCB+0x54>
 80083e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e8:	f383 8811 	msr	BASEPRI, r3
 80083ec:	f3bf 8f6f 	isb	sy
 80083f0:	f3bf 8f4f 	dsb	sy
 80083f4:	60fb      	str	r3, [r7, #12]
 80083f6:	e7fe      	b.n	80083f6 <prvDeleteTCB+0x52>
	}
 80083f8:	bf00      	nop
 80083fa:	3710      	adds	r7, #16
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008406:	4b0c      	ldr	r3, [pc, #48]	; (8008438 <prvResetNextTaskUnblockTime+0x38>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d104      	bne.n	800841a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008410:	4b0a      	ldr	r3, [pc, #40]	; (800843c <prvResetNextTaskUnblockTime+0x3c>)
 8008412:	f04f 32ff 	mov.w	r2, #4294967295
 8008416:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008418:	e008      	b.n	800842c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800841a:	4b07      	ldr	r3, [pc, #28]	; (8008438 <prvResetNextTaskUnblockTime+0x38>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	68db      	ldr	r3, [r3, #12]
 8008420:	68db      	ldr	r3, [r3, #12]
 8008422:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	4a04      	ldr	r2, [pc, #16]	; (800843c <prvResetNextTaskUnblockTime+0x3c>)
 800842a:	6013      	str	r3, [r2, #0]
}
 800842c:	bf00      	nop
 800842e:	370c      	adds	r7, #12
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr
 8008438:	20000b80 	.word	0x20000b80
 800843c:	20000be8 	.word	0x20000be8

08008440 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008446:	4b0b      	ldr	r3, [pc, #44]	; (8008474 <xTaskGetSchedulerState+0x34>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d102      	bne.n	8008454 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800844e:	2301      	movs	r3, #1
 8008450:	607b      	str	r3, [r7, #4]
 8008452:	e008      	b.n	8008466 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008454:	4b08      	ldr	r3, [pc, #32]	; (8008478 <xTaskGetSchedulerState+0x38>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d102      	bne.n	8008462 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800845c:	2302      	movs	r3, #2
 800845e:	607b      	str	r3, [r7, #4]
 8008460:	e001      	b.n	8008466 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008462:	2300      	movs	r3, #0
 8008464:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008466:	687b      	ldr	r3, [r7, #4]
	}
 8008468:	4618      	mov	r0, r3
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr
 8008474:	20000bd4 	.word	0x20000bd4
 8008478:	20000bf0 	.word	0x20000bf0

0800847c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800847c:	b580      	push	{r7, lr}
 800847e:	b086      	sub	sp, #24
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008488:	2300      	movs	r3, #0
 800848a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d054      	beq.n	800853c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008492:	4b2d      	ldr	r3, [pc, #180]	; (8008548 <xTaskPriorityDisinherit+0xcc>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	693a      	ldr	r2, [r7, #16]
 8008498:	429a      	cmp	r2, r3
 800849a:	d009      	beq.n	80084b0 <xTaskPriorityDisinherit+0x34>
 800849c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a0:	f383 8811 	msr	BASEPRI, r3
 80084a4:	f3bf 8f6f 	isb	sy
 80084a8:	f3bf 8f4f 	dsb	sy
 80084ac:	60fb      	str	r3, [r7, #12]
 80084ae:	e7fe      	b.n	80084ae <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d109      	bne.n	80084cc <xTaskPriorityDisinherit+0x50>
 80084b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084bc:	f383 8811 	msr	BASEPRI, r3
 80084c0:	f3bf 8f6f 	isb	sy
 80084c4:	f3bf 8f4f 	dsb	sy
 80084c8:	60bb      	str	r3, [r7, #8]
 80084ca:	e7fe      	b.n	80084ca <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084d0:	1e5a      	subs	r2, r3, #1
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084de:	429a      	cmp	r2, r3
 80084e0:	d02c      	beq.n	800853c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d128      	bne.n	800853c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	3304      	adds	r3, #4
 80084ee:	4618      	mov	r0, r3
 80084f0:	f7fe fc76 	bl	8006de0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008500:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800850c:	4b0f      	ldr	r3, [pc, #60]	; (800854c <xTaskPriorityDisinherit+0xd0>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	429a      	cmp	r2, r3
 8008512:	d903      	bls.n	800851c <xTaskPriorityDisinherit+0xa0>
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008518:	4a0c      	ldr	r2, [pc, #48]	; (800854c <xTaskPriorityDisinherit+0xd0>)
 800851a:	6013      	str	r3, [r2, #0]
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008520:	4613      	mov	r3, r2
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	4413      	add	r3, r2
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	4a09      	ldr	r2, [pc, #36]	; (8008550 <xTaskPriorityDisinherit+0xd4>)
 800852a:	441a      	add	r2, r3
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	3304      	adds	r3, #4
 8008530:	4619      	mov	r1, r3
 8008532:	4610      	mov	r0, r2
 8008534:	f7fe fbf7 	bl	8006d26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008538:	2301      	movs	r3, #1
 800853a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800853c:	697b      	ldr	r3, [r7, #20]
	}
 800853e:	4618      	mov	r0, r3
 8008540:	3718      	adds	r7, #24
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	200006f4 	.word	0x200006f4
 800854c:	20000bd0 	.word	0x20000bd0
 8008550:	200006f8 	.word	0x200006f8

08008554 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800855e:	4b21      	ldr	r3, [pc, #132]	; (80085e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008564:	4b20      	ldr	r3, [pc, #128]	; (80085e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	3304      	adds	r3, #4
 800856a:	4618      	mov	r0, r3
 800856c:	f7fe fc38 	bl	8006de0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008576:	d10a      	bne.n	800858e <prvAddCurrentTaskToDelayedList+0x3a>
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d007      	beq.n	800858e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800857e:	4b1a      	ldr	r3, [pc, #104]	; (80085e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	3304      	adds	r3, #4
 8008584:	4619      	mov	r1, r3
 8008586:	4819      	ldr	r0, [pc, #100]	; (80085ec <prvAddCurrentTaskToDelayedList+0x98>)
 8008588:	f7fe fbcd 	bl	8006d26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800858c:	e026      	b.n	80085dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4413      	add	r3, r2
 8008594:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008596:	4b14      	ldr	r3, [pc, #80]	; (80085e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	68ba      	ldr	r2, [r7, #8]
 800859c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800859e:	68ba      	ldr	r2, [r7, #8]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d209      	bcs.n	80085ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085a6:	4b12      	ldr	r3, [pc, #72]	; (80085f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	4b0f      	ldr	r3, [pc, #60]	; (80085e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	3304      	adds	r3, #4
 80085b0:	4619      	mov	r1, r3
 80085b2:	4610      	mov	r0, r2
 80085b4:	f7fe fbdb 	bl	8006d6e <vListInsert>
}
 80085b8:	e010      	b.n	80085dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085ba:	4b0e      	ldr	r3, [pc, #56]	; (80085f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	4b0a      	ldr	r3, [pc, #40]	; (80085e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	3304      	adds	r3, #4
 80085c4:	4619      	mov	r1, r3
 80085c6:	4610      	mov	r0, r2
 80085c8:	f7fe fbd1 	bl	8006d6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80085cc:	4b0a      	ldr	r3, [pc, #40]	; (80085f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	68ba      	ldr	r2, [r7, #8]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d202      	bcs.n	80085dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80085d6:	4a08      	ldr	r2, [pc, #32]	; (80085f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	6013      	str	r3, [r2, #0]
}
 80085dc:	bf00      	nop
 80085de:	3710      	adds	r7, #16
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	20000bcc 	.word	0x20000bcc
 80085e8:	200006f4 	.word	0x200006f4
 80085ec:	20000bb4 	.word	0x20000bb4
 80085f0:	20000b84 	.word	0x20000b84
 80085f4:	20000b80 	.word	0x20000b80
 80085f8:	20000be8 	.word	0x20000be8

080085fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b08a      	sub	sp, #40	; 0x28
 8008600:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008602:	2300      	movs	r3, #0
 8008604:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008606:	f000 faff 	bl	8008c08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800860a:	4b1c      	ldr	r3, [pc, #112]	; (800867c <xTimerCreateTimerTask+0x80>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d021      	beq.n	8008656 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008612:	2300      	movs	r3, #0
 8008614:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008616:	2300      	movs	r3, #0
 8008618:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800861a:	1d3a      	adds	r2, r7, #4
 800861c:	f107 0108 	add.w	r1, r7, #8
 8008620:	f107 030c 	add.w	r3, r7, #12
 8008624:	4618      	mov	r0, r3
 8008626:	f7fe fb37 	bl	8006c98 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800862a:	6879      	ldr	r1, [r7, #4]
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	68fa      	ldr	r2, [r7, #12]
 8008630:	9202      	str	r2, [sp, #8]
 8008632:	9301      	str	r3, [sp, #4]
 8008634:	2302      	movs	r3, #2
 8008636:	9300      	str	r3, [sp, #0]
 8008638:	2300      	movs	r3, #0
 800863a:	460a      	mov	r2, r1
 800863c:	4910      	ldr	r1, [pc, #64]	; (8008680 <xTimerCreateTimerTask+0x84>)
 800863e:	4811      	ldr	r0, [pc, #68]	; (8008684 <xTimerCreateTimerTask+0x88>)
 8008640:	f7ff f8cc 	bl	80077dc <xTaskCreateStatic>
 8008644:	4602      	mov	r2, r0
 8008646:	4b10      	ldr	r3, [pc, #64]	; (8008688 <xTimerCreateTimerTask+0x8c>)
 8008648:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800864a:	4b0f      	ldr	r3, [pc, #60]	; (8008688 <xTimerCreateTimerTask+0x8c>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d001      	beq.n	8008656 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008652:	2301      	movs	r3, #1
 8008654:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d109      	bne.n	8008670 <xTimerCreateTimerTask+0x74>
 800865c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008660:	f383 8811 	msr	BASEPRI, r3
 8008664:	f3bf 8f6f 	isb	sy
 8008668:	f3bf 8f4f 	dsb	sy
 800866c:	613b      	str	r3, [r7, #16]
 800866e:	e7fe      	b.n	800866e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8008670:	697b      	ldr	r3, [r7, #20]
}
 8008672:	4618      	mov	r0, r3
 8008674:	3718      	adds	r7, #24
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	20000c24 	.word	0x20000c24
 8008680:	0800957c 	.word	0x0800957c
 8008684:	080087bd 	.word	0x080087bd
 8008688:	20000c28 	.word	0x20000c28

0800868c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b08a      	sub	sp, #40	; 0x28
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	607a      	str	r2, [r7, #4]
 8008698:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800869a:	2300      	movs	r3, #0
 800869c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d109      	bne.n	80086b8 <xTimerGenericCommand+0x2c>
 80086a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a8:	f383 8811 	msr	BASEPRI, r3
 80086ac:	f3bf 8f6f 	isb	sy
 80086b0:	f3bf 8f4f 	dsb	sy
 80086b4:	623b      	str	r3, [r7, #32]
 80086b6:	e7fe      	b.n	80086b6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80086b8:	4b19      	ldr	r3, [pc, #100]	; (8008720 <xTimerGenericCommand+0x94>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d02a      	beq.n	8008716 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	2b05      	cmp	r3, #5
 80086d0:	dc18      	bgt.n	8008704 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80086d2:	f7ff feb5 	bl	8008440 <xTaskGetSchedulerState>
 80086d6:	4603      	mov	r3, r0
 80086d8:	2b02      	cmp	r3, #2
 80086da:	d109      	bne.n	80086f0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80086dc:	4b10      	ldr	r3, [pc, #64]	; (8008720 <xTimerGenericCommand+0x94>)
 80086de:	6818      	ldr	r0, [r3, #0]
 80086e0:	f107 0110 	add.w	r1, r7, #16
 80086e4:	2300      	movs	r3, #0
 80086e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086e8:	f7fe fca2 	bl	8007030 <xQueueGenericSend>
 80086ec:	6278      	str	r0, [r7, #36]	; 0x24
 80086ee:	e012      	b.n	8008716 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80086f0:	4b0b      	ldr	r3, [pc, #44]	; (8008720 <xTimerGenericCommand+0x94>)
 80086f2:	6818      	ldr	r0, [r3, #0]
 80086f4:	f107 0110 	add.w	r1, r7, #16
 80086f8:	2300      	movs	r3, #0
 80086fa:	2200      	movs	r2, #0
 80086fc:	f7fe fc98 	bl	8007030 <xQueueGenericSend>
 8008700:	6278      	str	r0, [r7, #36]	; 0x24
 8008702:	e008      	b.n	8008716 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008704:	4b06      	ldr	r3, [pc, #24]	; (8008720 <xTimerGenericCommand+0x94>)
 8008706:	6818      	ldr	r0, [r3, #0]
 8008708:	f107 0110 	add.w	r1, r7, #16
 800870c:	2300      	movs	r3, #0
 800870e:	683a      	ldr	r2, [r7, #0]
 8008710:	f7fe fd88 	bl	8007224 <xQueueGenericSendFromISR>
 8008714:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008718:	4618      	mov	r0, r3
 800871a:	3728      	adds	r7, #40	; 0x28
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}
 8008720:	20000c24 	.word	0x20000c24

08008724 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b088      	sub	sp, #32
 8008728:	af02      	add	r7, sp, #8
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800872e:	4b22      	ldr	r3, [pc, #136]	; (80087b8 <prvProcessExpiredTimer+0x94>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	68db      	ldr	r3, [r3, #12]
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	3304      	adds	r3, #4
 800873c:	4618      	mov	r0, r3
 800873e:	f7fe fb4f 	bl	8006de0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008748:	f003 0304 	and.w	r3, r3, #4
 800874c:	2b00      	cmp	r3, #0
 800874e:	d021      	beq.n	8008794 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	699a      	ldr	r2, [r3, #24]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	18d1      	adds	r1, r2, r3
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	683a      	ldr	r2, [r7, #0]
 800875c:	6978      	ldr	r0, [r7, #20]
 800875e:	f000 f8d1 	bl	8008904 <prvInsertTimerInActiveList>
 8008762:	4603      	mov	r3, r0
 8008764:	2b00      	cmp	r3, #0
 8008766:	d01e      	beq.n	80087a6 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008768:	2300      	movs	r3, #0
 800876a:	9300      	str	r3, [sp, #0]
 800876c:	2300      	movs	r3, #0
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	2100      	movs	r1, #0
 8008772:	6978      	ldr	r0, [r7, #20]
 8008774:	f7ff ff8a 	bl	800868c <xTimerGenericCommand>
 8008778:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d112      	bne.n	80087a6 <prvProcessExpiredTimer+0x82>
 8008780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008784:	f383 8811 	msr	BASEPRI, r3
 8008788:	f3bf 8f6f 	isb	sy
 800878c:	f3bf 8f4f 	dsb	sy
 8008790:	60fb      	str	r3, [r7, #12]
 8008792:	e7fe      	b.n	8008792 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800879a:	f023 0301 	bic.w	r3, r3, #1
 800879e:	b2da      	uxtb	r2, r3
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	6a1b      	ldr	r3, [r3, #32]
 80087aa:	6978      	ldr	r0, [r7, #20]
 80087ac:	4798      	blx	r3
}
 80087ae:	bf00      	nop
 80087b0:	3718      	adds	r7, #24
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop
 80087b8:	20000c1c 	.word	0x20000c1c

080087bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80087c4:	f107 0308 	add.w	r3, r7, #8
 80087c8:	4618      	mov	r0, r3
 80087ca:	f000 f857 	bl	800887c <prvGetNextExpireTime>
 80087ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	4619      	mov	r1, r3
 80087d4:	68f8      	ldr	r0, [r7, #12]
 80087d6:	f000 f803 	bl	80087e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80087da:	f000 f8d5 	bl	8008988 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80087de:	e7f1      	b.n	80087c4 <prvTimerTask+0x8>

080087e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80087ea:	f7ff fa2f 	bl	8007c4c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80087ee:	f107 0308 	add.w	r3, r7, #8
 80087f2:	4618      	mov	r0, r3
 80087f4:	f000 f866 	bl	80088c4 <prvSampleTimeNow>
 80087f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d130      	bne.n	8008862 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d10a      	bne.n	800881c <prvProcessTimerOrBlockTask+0x3c>
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	429a      	cmp	r2, r3
 800880c:	d806      	bhi.n	800881c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800880e:	f7ff fa2b 	bl	8007c68 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008812:	68f9      	ldr	r1, [r7, #12]
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f7ff ff85 	bl	8008724 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800881a:	e024      	b.n	8008866 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d008      	beq.n	8008834 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008822:	4b13      	ldr	r3, [pc, #76]	; (8008870 <prvProcessTimerOrBlockTask+0x90>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d101      	bne.n	8008830 <prvProcessTimerOrBlockTask+0x50>
 800882c:	2301      	movs	r3, #1
 800882e:	e000      	b.n	8008832 <prvProcessTimerOrBlockTask+0x52>
 8008830:	2300      	movs	r3, #0
 8008832:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008834:	4b0f      	ldr	r3, [pc, #60]	; (8008874 <prvProcessTimerOrBlockTask+0x94>)
 8008836:	6818      	ldr	r0, [r3, #0]
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	1ad3      	subs	r3, r2, r3
 800883e:	683a      	ldr	r2, [r7, #0]
 8008840:	4619      	mov	r1, r3
 8008842:	f7fe ff97 	bl	8007774 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008846:	f7ff fa0f 	bl	8007c68 <xTaskResumeAll>
 800884a:	4603      	mov	r3, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d10a      	bne.n	8008866 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008850:	4b09      	ldr	r3, [pc, #36]	; (8008878 <prvProcessTimerOrBlockTask+0x98>)
 8008852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008856:	601a      	str	r2, [r3, #0]
 8008858:	f3bf 8f4f 	dsb	sy
 800885c:	f3bf 8f6f 	isb	sy
}
 8008860:	e001      	b.n	8008866 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008862:	f7ff fa01 	bl	8007c68 <xTaskResumeAll>
}
 8008866:	bf00      	nop
 8008868:	3710      	adds	r7, #16
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
 800886e:	bf00      	nop
 8008870:	20000c20 	.word	0x20000c20
 8008874:	20000c24 	.word	0x20000c24
 8008878:	e000ed04 	.word	0xe000ed04

0800887c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800887c:	b480      	push	{r7}
 800887e:	b085      	sub	sp, #20
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008884:	4b0e      	ldr	r3, [pc, #56]	; (80088c0 <prvGetNextExpireTime+0x44>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d101      	bne.n	8008892 <prvGetNextExpireTime+0x16>
 800888e:	2201      	movs	r2, #1
 8008890:	e000      	b.n	8008894 <prvGetNextExpireTime+0x18>
 8008892:	2200      	movs	r2, #0
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d105      	bne.n	80088ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80088a0:	4b07      	ldr	r3, [pc, #28]	; (80088c0 <prvGetNextExpireTime+0x44>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	60fb      	str	r3, [r7, #12]
 80088aa:	e001      	b.n	80088b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80088ac:	2300      	movs	r3, #0
 80088ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80088b0:	68fb      	ldr	r3, [r7, #12]
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3714      	adds	r7, #20
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr
 80088be:	bf00      	nop
 80088c0:	20000c1c 	.word	0x20000c1c

080088c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80088cc:	f7ff fa68 	bl	8007da0 <xTaskGetTickCount>
 80088d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80088d2:	4b0b      	ldr	r3, [pc, #44]	; (8008900 <prvSampleTimeNow+0x3c>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	68fa      	ldr	r2, [r7, #12]
 80088d8:	429a      	cmp	r2, r3
 80088da:	d205      	bcs.n	80088e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80088dc:	f000 f930 	bl	8008b40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2201      	movs	r2, #1
 80088e4:	601a      	str	r2, [r3, #0]
 80088e6:	e002      	b.n	80088ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2200      	movs	r2, #0
 80088ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80088ee:	4a04      	ldr	r2, [pc, #16]	; (8008900 <prvSampleTimeNow+0x3c>)
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80088f4:	68fb      	ldr	r3, [r7, #12]
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3710      	adds	r7, #16
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	20000c2c 	.word	0x20000c2c

08008904 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b086      	sub	sp, #24
 8008908:	af00      	add	r7, sp, #0
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	607a      	str	r2, [r7, #4]
 8008910:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008912:	2300      	movs	r3, #0
 8008914:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	68ba      	ldr	r2, [r7, #8]
 800891a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	68fa      	ldr	r2, [r7, #12]
 8008920:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008922:	68ba      	ldr	r2, [r7, #8]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	429a      	cmp	r2, r3
 8008928:	d812      	bhi.n	8008950 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	1ad2      	subs	r2, r2, r3
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	699b      	ldr	r3, [r3, #24]
 8008934:	429a      	cmp	r2, r3
 8008936:	d302      	bcc.n	800893e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008938:	2301      	movs	r3, #1
 800893a:	617b      	str	r3, [r7, #20]
 800893c:	e01b      	b.n	8008976 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800893e:	4b10      	ldr	r3, [pc, #64]	; (8008980 <prvInsertTimerInActiveList+0x7c>)
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	3304      	adds	r3, #4
 8008946:	4619      	mov	r1, r3
 8008948:	4610      	mov	r0, r2
 800894a:	f7fe fa10 	bl	8006d6e <vListInsert>
 800894e:	e012      	b.n	8008976 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	429a      	cmp	r2, r3
 8008956:	d206      	bcs.n	8008966 <prvInsertTimerInActiveList+0x62>
 8008958:	68ba      	ldr	r2, [r7, #8]
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	429a      	cmp	r2, r3
 800895e:	d302      	bcc.n	8008966 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008960:	2301      	movs	r3, #1
 8008962:	617b      	str	r3, [r7, #20]
 8008964:	e007      	b.n	8008976 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008966:	4b07      	ldr	r3, [pc, #28]	; (8008984 <prvInsertTimerInActiveList+0x80>)
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	3304      	adds	r3, #4
 800896e:	4619      	mov	r1, r3
 8008970:	4610      	mov	r0, r2
 8008972:	f7fe f9fc 	bl	8006d6e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008976:	697b      	ldr	r3, [r7, #20]
}
 8008978:	4618      	mov	r0, r3
 800897a:	3718      	adds	r7, #24
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}
 8008980:	20000c20 	.word	0x20000c20
 8008984:	20000c1c 	.word	0x20000c1c

08008988 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b08e      	sub	sp, #56	; 0x38
 800898c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800898e:	e0c6      	b.n	8008b1e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2b00      	cmp	r3, #0
 8008994:	da17      	bge.n	80089c6 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008996:	1d3b      	adds	r3, r7, #4
 8008998:	3304      	adds	r3, #4
 800899a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800899c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d109      	bne.n	80089b6 <prvProcessReceivedCommands+0x2e>
 80089a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a6:	f383 8811 	msr	BASEPRI, r3
 80089aa:	f3bf 8f6f 	isb	sy
 80089ae:	f3bf 8f4f 	dsb	sy
 80089b2:	61fb      	str	r3, [r7, #28]
 80089b4:	e7fe      	b.n	80089b4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80089b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089bc:	6850      	ldr	r0, [r2, #4]
 80089be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089c0:	6892      	ldr	r2, [r2, #8]
 80089c2:	4611      	mov	r1, r2
 80089c4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	f2c0 80a7 	blt.w	8008b1c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80089d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d4:	695b      	ldr	r3, [r3, #20]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d004      	beq.n	80089e4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80089da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089dc:	3304      	adds	r3, #4
 80089de:	4618      	mov	r0, r3
 80089e0:	f7fe f9fe 	bl	8006de0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80089e4:	463b      	mov	r3, r7
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7ff ff6c 	bl	80088c4 <prvSampleTimeNow>
 80089ec:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2b09      	cmp	r3, #9
 80089f2:	f200 8094 	bhi.w	8008b1e <prvProcessReceivedCommands+0x196>
 80089f6:	a201      	add	r2, pc, #4	; (adr r2, 80089fc <prvProcessReceivedCommands+0x74>)
 80089f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089fc:	08008a25 	.word	0x08008a25
 8008a00:	08008a25 	.word	0x08008a25
 8008a04:	08008a25 	.word	0x08008a25
 8008a08:	08008a97 	.word	0x08008a97
 8008a0c:	08008aab 	.word	0x08008aab
 8008a10:	08008af3 	.word	0x08008af3
 8008a14:	08008a25 	.word	0x08008a25
 8008a18:	08008a25 	.word	0x08008a25
 8008a1c:	08008a97 	.word	0x08008a97
 8008a20:	08008aab 	.word	0x08008aab
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a2a:	f043 0301 	orr.w	r3, r3, #1
 8008a2e:	b2da      	uxtb	r2, r3
 8008a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008a36:	68ba      	ldr	r2, [r7, #8]
 8008a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a3a:	699b      	ldr	r3, [r3, #24]
 8008a3c:	18d1      	adds	r1, r2, r3
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a44:	f7ff ff5e 	bl	8008904 <prvInsertTimerInActiveList>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d067      	beq.n	8008b1e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a50:	6a1b      	ldr	r3, [r3, #32]
 8008a52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a54:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a5c:	f003 0304 	and.w	r3, r3, #4
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d05c      	beq.n	8008b1e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008a64:	68ba      	ldr	r2, [r7, #8]
 8008a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a68:	699b      	ldr	r3, [r3, #24]
 8008a6a:	441a      	add	r2, r3
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	9300      	str	r3, [sp, #0]
 8008a70:	2300      	movs	r3, #0
 8008a72:	2100      	movs	r1, #0
 8008a74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a76:	f7ff fe09 	bl	800868c <xTimerGenericCommand>
 8008a7a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008a7c:	6a3b      	ldr	r3, [r7, #32]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d14d      	bne.n	8008b1e <prvProcessReceivedCommands+0x196>
 8008a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a86:	f383 8811 	msr	BASEPRI, r3
 8008a8a:	f3bf 8f6f 	isb	sy
 8008a8e:	f3bf 8f4f 	dsb	sy
 8008a92:	61bb      	str	r3, [r7, #24]
 8008a94:	e7fe      	b.n	8008a94 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a9c:	f023 0301 	bic.w	r3, r3, #1
 8008aa0:	b2da      	uxtb	r2, r3
 8008aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008aa8:	e039      	b.n	8008b1e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ab0:	f043 0301 	orr.w	r3, r3, #1
 8008ab4:	b2da      	uxtb	r2, r3
 8008ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008abc:	68ba      	ldr	r2, [r7, #8]
 8008abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac4:	699b      	ldr	r3, [r3, #24]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d109      	bne.n	8008ade <prvProcessReceivedCommands+0x156>
 8008aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ace:	f383 8811 	msr	BASEPRI, r3
 8008ad2:	f3bf 8f6f 	isb	sy
 8008ad6:	f3bf 8f4f 	dsb	sy
 8008ada:	617b      	str	r3, [r7, #20]
 8008adc:	e7fe      	b.n	8008adc <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae0:	699a      	ldr	r2, [r3, #24]
 8008ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae4:	18d1      	adds	r1, r2, r3
 8008ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008aec:	f7ff ff0a 	bl	8008904 <prvInsertTimerInActiveList>
					break;
 8008af0:	e015      	b.n	8008b1e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008af8:	f003 0302 	and.w	r3, r3, #2
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d103      	bne.n	8008b08 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8008b00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b02:	f000 fbcb 	bl	800929c <vPortFree>
 8008b06:	e00a      	b.n	8008b1e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b0e:	f023 0301 	bic.w	r3, r3, #1
 8008b12:	b2da      	uxtb	r2, r3
 8008b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008b1a:	e000      	b.n	8008b1e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008b1c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008b1e:	4b07      	ldr	r3, [pc, #28]	; (8008b3c <prvProcessReceivedCommands+0x1b4>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	1d39      	adds	r1, r7, #4
 8008b24:	2200      	movs	r2, #0
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7fe fc10 	bl	800734c <xQueueReceive>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	f47f af2e 	bne.w	8008990 <prvProcessReceivedCommands+0x8>
	}
}
 8008b34:	bf00      	nop
 8008b36:	3730      	adds	r7, #48	; 0x30
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	20000c24 	.word	0x20000c24

08008b40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b088      	sub	sp, #32
 8008b44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008b46:	e047      	b.n	8008bd8 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b48:	4b2d      	ldr	r3, [pc, #180]	; (8008c00 <prvSwitchTimerLists+0xc0>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	68db      	ldr	r3, [r3, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b52:	4b2b      	ldr	r3, [pc, #172]	; (8008c00 <prvSwitchTimerLists+0xc0>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	68db      	ldr	r3, [r3, #12]
 8008b58:	68db      	ldr	r3, [r3, #12]
 8008b5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	3304      	adds	r3, #4
 8008b60:	4618      	mov	r0, r3
 8008b62:	f7fe f93d 	bl	8006de0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	6a1b      	ldr	r3, [r3, #32]
 8008b6a:	68f8      	ldr	r0, [r7, #12]
 8008b6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b74:	f003 0304 	and.w	r3, r3, #4
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d02d      	beq.n	8008bd8 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	699b      	ldr	r3, [r3, #24]
 8008b80:	693a      	ldr	r2, [r7, #16]
 8008b82:	4413      	add	r3, r2
 8008b84:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008b86:	68ba      	ldr	r2, [r7, #8]
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d90e      	bls.n	8008bac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	68ba      	ldr	r2, [r7, #8]
 8008b92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	68fa      	ldr	r2, [r7, #12]
 8008b98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008b9a:	4b19      	ldr	r3, [pc, #100]	; (8008c00 <prvSwitchTimerLists+0xc0>)
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	3304      	adds	r3, #4
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	4610      	mov	r0, r2
 8008ba6:	f7fe f8e2 	bl	8006d6e <vListInsert>
 8008baa:	e015      	b.n	8008bd8 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008bac:	2300      	movs	r3, #0
 8008bae:	9300      	str	r3, [sp, #0]
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	693a      	ldr	r2, [r7, #16]
 8008bb4:	2100      	movs	r1, #0
 8008bb6:	68f8      	ldr	r0, [r7, #12]
 8008bb8:	f7ff fd68 	bl	800868c <xTimerGenericCommand>
 8008bbc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d109      	bne.n	8008bd8 <prvSwitchTimerLists+0x98>
 8008bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc8:	f383 8811 	msr	BASEPRI, r3
 8008bcc:	f3bf 8f6f 	isb	sy
 8008bd0:	f3bf 8f4f 	dsb	sy
 8008bd4:	603b      	str	r3, [r7, #0]
 8008bd6:	e7fe      	b.n	8008bd6 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008bd8:	4b09      	ldr	r3, [pc, #36]	; (8008c00 <prvSwitchTimerLists+0xc0>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d1b2      	bne.n	8008b48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008be2:	4b07      	ldr	r3, [pc, #28]	; (8008c00 <prvSwitchTimerLists+0xc0>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008be8:	4b06      	ldr	r3, [pc, #24]	; (8008c04 <prvSwitchTimerLists+0xc4>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a04      	ldr	r2, [pc, #16]	; (8008c00 <prvSwitchTimerLists+0xc0>)
 8008bee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008bf0:	4a04      	ldr	r2, [pc, #16]	; (8008c04 <prvSwitchTimerLists+0xc4>)
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	6013      	str	r3, [r2, #0]
}
 8008bf6:	bf00      	nop
 8008bf8:	3718      	adds	r7, #24
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	20000c1c 	.word	0x20000c1c
 8008c04:	20000c20 	.word	0x20000c20

08008c08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008c0e:	f000 f965 	bl	8008edc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008c12:	4b15      	ldr	r3, [pc, #84]	; (8008c68 <prvCheckForValidListAndQueue+0x60>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d120      	bne.n	8008c5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008c1a:	4814      	ldr	r0, [pc, #80]	; (8008c6c <prvCheckForValidListAndQueue+0x64>)
 8008c1c:	f7fe f856 	bl	8006ccc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008c20:	4813      	ldr	r0, [pc, #76]	; (8008c70 <prvCheckForValidListAndQueue+0x68>)
 8008c22:	f7fe f853 	bl	8006ccc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008c26:	4b13      	ldr	r3, [pc, #76]	; (8008c74 <prvCheckForValidListAndQueue+0x6c>)
 8008c28:	4a10      	ldr	r2, [pc, #64]	; (8008c6c <prvCheckForValidListAndQueue+0x64>)
 8008c2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008c2c:	4b12      	ldr	r3, [pc, #72]	; (8008c78 <prvCheckForValidListAndQueue+0x70>)
 8008c2e:	4a10      	ldr	r2, [pc, #64]	; (8008c70 <prvCheckForValidListAndQueue+0x68>)
 8008c30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008c32:	2300      	movs	r3, #0
 8008c34:	9300      	str	r3, [sp, #0]
 8008c36:	4b11      	ldr	r3, [pc, #68]	; (8008c7c <prvCheckForValidListAndQueue+0x74>)
 8008c38:	4a11      	ldr	r2, [pc, #68]	; (8008c80 <prvCheckForValidListAndQueue+0x78>)
 8008c3a:	2110      	movs	r1, #16
 8008c3c:	200a      	movs	r0, #10
 8008c3e:	f7fe f961 	bl	8006f04 <xQueueGenericCreateStatic>
 8008c42:	4602      	mov	r2, r0
 8008c44:	4b08      	ldr	r3, [pc, #32]	; (8008c68 <prvCheckForValidListAndQueue+0x60>)
 8008c46:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008c48:	4b07      	ldr	r3, [pc, #28]	; (8008c68 <prvCheckForValidListAndQueue+0x60>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d005      	beq.n	8008c5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008c50:	4b05      	ldr	r3, [pc, #20]	; (8008c68 <prvCheckForValidListAndQueue+0x60>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	490b      	ldr	r1, [pc, #44]	; (8008c84 <prvCheckForValidListAndQueue+0x7c>)
 8008c56:	4618      	mov	r0, r3
 8008c58:	f7fe fd64 	bl	8007724 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c5c:	f000 f96c 	bl	8008f38 <vPortExitCritical>
}
 8008c60:	bf00      	nop
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop
 8008c68:	20000c24 	.word	0x20000c24
 8008c6c:	20000bf4 	.word	0x20000bf4
 8008c70:	20000c08 	.word	0x20000c08
 8008c74:	20000c1c 	.word	0x20000c1c
 8008c78:	20000c20 	.word	0x20000c20
 8008c7c:	20000cd0 	.word	0x20000cd0
 8008c80:	20000c30 	.word	0x20000c30
 8008c84:	08009584 	.word	0x08009584

08008c88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b085      	sub	sp, #20
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	3b04      	subs	r3, #4
 8008c98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008ca0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	3b04      	subs	r3, #4
 8008ca6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	f023 0201 	bic.w	r2, r3, #1
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	3b04      	subs	r3, #4
 8008cb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008cb8:	4a0c      	ldr	r2, [pc, #48]	; (8008cec <pxPortInitialiseStack+0x64>)
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	3b14      	subs	r3, #20
 8008cc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	3b04      	subs	r3, #4
 8008cce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f06f 0202 	mvn.w	r2, #2
 8008cd6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	3b20      	subs	r3, #32
 8008cdc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008cde:	68fb      	ldr	r3, [r7, #12]
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3714      	adds	r7, #20
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr
 8008cec:	08008cf1 	.word	0x08008cf1

08008cf0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b085      	sub	sp, #20
 8008cf4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008cfa:	4b11      	ldr	r3, [pc, #68]	; (8008d40 <prvTaskExitError+0x50>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d02:	d009      	beq.n	8008d18 <prvTaskExitError+0x28>
 8008d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d08:	f383 8811 	msr	BASEPRI, r3
 8008d0c:	f3bf 8f6f 	isb	sy
 8008d10:	f3bf 8f4f 	dsb	sy
 8008d14:	60fb      	str	r3, [r7, #12]
 8008d16:	e7fe      	b.n	8008d16 <prvTaskExitError+0x26>
 8008d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d1c:	f383 8811 	msr	BASEPRI, r3
 8008d20:	f3bf 8f6f 	isb	sy
 8008d24:	f3bf 8f4f 	dsb	sy
 8008d28:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008d2a:	bf00      	nop
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d0fc      	beq.n	8008d2c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008d32:	bf00      	nop
 8008d34:	3714      	adds	r7, #20
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr
 8008d3e:	bf00      	nop
 8008d40:	2000000c 	.word	0x2000000c
	...

08008d50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008d50:	4b07      	ldr	r3, [pc, #28]	; (8008d70 <pxCurrentTCBConst2>)
 8008d52:	6819      	ldr	r1, [r3, #0]
 8008d54:	6808      	ldr	r0, [r1, #0]
 8008d56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d5a:	f380 8809 	msr	PSP, r0
 8008d5e:	f3bf 8f6f 	isb	sy
 8008d62:	f04f 0000 	mov.w	r0, #0
 8008d66:	f380 8811 	msr	BASEPRI, r0
 8008d6a:	4770      	bx	lr
 8008d6c:	f3af 8000 	nop.w

08008d70 <pxCurrentTCBConst2>:
 8008d70:	200006f4 	.word	0x200006f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008d74:	bf00      	nop
 8008d76:	bf00      	nop

08008d78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008d78:	4808      	ldr	r0, [pc, #32]	; (8008d9c <prvPortStartFirstTask+0x24>)
 8008d7a:	6800      	ldr	r0, [r0, #0]
 8008d7c:	6800      	ldr	r0, [r0, #0]
 8008d7e:	f380 8808 	msr	MSP, r0
 8008d82:	f04f 0000 	mov.w	r0, #0
 8008d86:	f380 8814 	msr	CONTROL, r0
 8008d8a:	b662      	cpsie	i
 8008d8c:	b661      	cpsie	f
 8008d8e:	f3bf 8f4f 	dsb	sy
 8008d92:	f3bf 8f6f 	isb	sy
 8008d96:	df00      	svc	0
 8008d98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008d9a:	bf00      	nop
 8008d9c:	e000ed08 	.word	0xe000ed08

08008da0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b086      	sub	sp, #24
 8008da4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008da6:	4b44      	ldr	r3, [pc, #272]	; (8008eb8 <xPortStartScheduler+0x118>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a44      	ldr	r2, [pc, #272]	; (8008ebc <xPortStartScheduler+0x11c>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d109      	bne.n	8008dc4 <xPortStartScheduler+0x24>
 8008db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db4:	f383 8811 	msr	BASEPRI, r3
 8008db8:	f3bf 8f6f 	isb	sy
 8008dbc:	f3bf 8f4f 	dsb	sy
 8008dc0:	613b      	str	r3, [r7, #16]
 8008dc2:	e7fe      	b.n	8008dc2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008dc4:	4b3c      	ldr	r3, [pc, #240]	; (8008eb8 <xPortStartScheduler+0x118>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a3d      	ldr	r2, [pc, #244]	; (8008ec0 <xPortStartScheduler+0x120>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d109      	bne.n	8008de2 <xPortStartScheduler+0x42>
 8008dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd2:	f383 8811 	msr	BASEPRI, r3
 8008dd6:	f3bf 8f6f 	isb	sy
 8008dda:	f3bf 8f4f 	dsb	sy
 8008dde:	60fb      	str	r3, [r7, #12]
 8008de0:	e7fe      	b.n	8008de0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008de2:	4b38      	ldr	r3, [pc, #224]	; (8008ec4 <xPortStartScheduler+0x124>)
 8008de4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	22ff      	movs	r2, #255	; 0xff
 8008df2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008dfc:	78fb      	ldrb	r3, [r7, #3]
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008e04:	b2da      	uxtb	r2, r3
 8008e06:	4b30      	ldr	r3, [pc, #192]	; (8008ec8 <xPortStartScheduler+0x128>)
 8008e08:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008e0a:	4b30      	ldr	r3, [pc, #192]	; (8008ecc <xPortStartScheduler+0x12c>)
 8008e0c:	2207      	movs	r2, #7
 8008e0e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e10:	e009      	b.n	8008e26 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008e12:	4b2e      	ldr	r3, [pc, #184]	; (8008ecc <xPortStartScheduler+0x12c>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	3b01      	subs	r3, #1
 8008e18:	4a2c      	ldr	r2, [pc, #176]	; (8008ecc <xPortStartScheduler+0x12c>)
 8008e1a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008e1c:	78fb      	ldrb	r3, [r7, #3]
 8008e1e:	b2db      	uxtb	r3, r3
 8008e20:	005b      	lsls	r3, r3, #1
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e26:	78fb      	ldrb	r3, [r7, #3]
 8008e28:	b2db      	uxtb	r3, r3
 8008e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e2e:	2b80      	cmp	r3, #128	; 0x80
 8008e30:	d0ef      	beq.n	8008e12 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008e32:	4b26      	ldr	r3, [pc, #152]	; (8008ecc <xPortStartScheduler+0x12c>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f1c3 0307 	rsb	r3, r3, #7
 8008e3a:	2b04      	cmp	r3, #4
 8008e3c:	d009      	beq.n	8008e52 <xPortStartScheduler+0xb2>
 8008e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e42:	f383 8811 	msr	BASEPRI, r3
 8008e46:	f3bf 8f6f 	isb	sy
 8008e4a:	f3bf 8f4f 	dsb	sy
 8008e4e:	60bb      	str	r3, [r7, #8]
 8008e50:	e7fe      	b.n	8008e50 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008e52:	4b1e      	ldr	r3, [pc, #120]	; (8008ecc <xPortStartScheduler+0x12c>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	021b      	lsls	r3, r3, #8
 8008e58:	4a1c      	ldr	r2, [pc, #112]	; (8008ecc <xPortStartScheduler+0x12c>)
 8008e5a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008e5c:	4b1b      	ldr	r3, [pc, #108]	; (8008ecc <xPortStartScheduler+0x12c>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e64:	4a19      	ldr	r2, [pc, #100]	; (8008ecc <xPortStartScheduler+0x12c>)
 8008e66:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	b2da      	uxtb	r2, r3
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008e70:	4b17      	ldr	r3, [pc, #92]	; (8008ed0 <xPortStartScheduler+0x130>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a16      	ldr	r2, [pc, #88]	; (8008ed0 <xPortStartScheduler+0x130>)
 8008e76:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008e7a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008e7c:	4b14      	ldr	r3, [pc, #80]	; (8008ed0 <xPortStartScheduler+0x130>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a13      	ldr	r2, [pc, #76]	; (8008ed0 <xPortStartScheduler+0x130>)
 8008e82:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008e86:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008e88:	f000 f8d6 	bl	8009038 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008e8c:	4b11      	ldr	r3, [pc, #68]	; (8008ed4 <xPortStartScheduler+0x134>)
 8008e8e:	2200      	movs	r2, #0
 8008e90:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008e92:	f000 f8f5 	bl	8009080 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008e96:	4b10      	ldr	r3, [pc, #64]	; (8008ed8 <xPortStartScheduler+0x138>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a0f      	ldr	r2, [pc, #60]	; (8008ed8 <xPortStartScheduler+0x138>)
 8008e9c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008ea0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008ea2:	f7ff ff69 	bl	8008d78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008ea6:	f7ff f843 	bl	8007f30 <vTaskSwitchContext>
	prvTaskExitError();
 8008eaa:	f7ff ff21 	bl	8008cf0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008eae:	2300      	movs	r3, #0
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3718      	adds	r7, #24
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	e000ed00 	.word	0xe000ed00
 8008ebc:	410fc271 	.word	0x410fc271
 8008ec0:	410fc270 	.word	0x410fc270
 8008ec4:	e000e400 	.word	0xe000e400
 8008ec8:	20000d20 	.word	0x20000d20
 8008ecc:	20000d24 	.word	0x20000d24
 8008ed0:	e000ed20 	.word	0xe000ed20
 8008ed4:	2000000c 	.word	0x2000000c
 8008ed8:	e000ef34 	.word	0xe000ef34

08008edc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee6:	f383 8811 	msr	BASEPRI, r3
 8008eea:	f3bf 8f6f 	isb	sy
 8008eee:	f3bf 8f4f 	dsb	sy
 8008ef2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008ef4:	4b0e      	ldr	r3, [pc, #56]	; (8008f30 <vPortEnterCritical+0x54>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	3301      	adds	r3, #1
 8008efa:	4a0d      	ldr	r2, [pc, #52]	; (8008f30 <vPortEnterCritical+0x54>)
 8008efc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008efe:	4b0c      	ldr	r3, [pc, #48]	; (8008f30 <vPortEnterCritical+0x54>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d10e      	bne.n	8008f24 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008f06:	4b0b      	ldr	r3, [pc, #44]	; (8008f34 <vPortEnterCritical+0x58>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	b2db      	uxtb	r3, r3
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d009      	beq.n	8008f24 <vPortEnterCritical+0x48>
 8008f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f14:	f383 8811 	msr	BASEPRI, r3
 8008f18:	f3bf 8f6f 	isb	sy
 8008f1c:	f3bf 8f4f 	dsb	sy
 8008f20:	603b      	str	r3, [r7, #0]
 8008f22:	e7fe      	b.n	8008f22 <vPortEnterCritical+0x46>
	}
}
 8008f24:	bf00      	nop
 8008f26:	370c      	adds	r7, #12
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr
 8008f30:	2000000c 	.word	0x2000000c
 8008f34:	e000ed04 	.word	0xe000ed04

08008f38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008f3e:	4b11      	ldr	r3, [pc, #68]	; (8008f84 <vPortExitCritical+0x4c>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d109      	bne.n	8008f5a <vPortExitCritical+0x22>
 8008f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4a:	f383 8811 	msr	BASEPRI, r3
 8008f4e:	f3bf 8f6f 	isb	sy
 8008f52:	f3bf 8f4f 	dsb	sy
 8008f56:	607b      	str	r3, [r7, #4]
 8008f58:	e7fe      	b.n	8008f58 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008f5a:	4b0a      	ldr	r3, [pc, #40]	; (8008f84 <vPortExitCritical+0x4c>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	3b01      	subs	r3, #1
 8008f60:	4a08      	ldr	r2, [pc, #32]	; (8008f84 <vPortExitCritical+0x4c>)
 8008f62:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008f64:	4b07      	ldr	r3, [pc, #28]	; (8008f84 <vPortExitCritical+0x4c>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d104      	bne.n	8008f76 <vPortExitCritical+0x3e>
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008f76:	bf00      	nop
 8008f78:	370c      	adds	r7, #12
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop
 8008f84:	2000000c 	.word	0x2000000c
	...

08008f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008f90:	f3ef 8009 	mrs	r0, PSP
 8008f94:	f3bf 8f6f 	isb	sy
 8008f98:	4b15      	ldr	r3, [pc, #84]	; (8008ff0 <pxCurrentTCBConst>)
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	f01e 0f10 	tst.w	lr, #16
 8008fa0:	bf08      	it	eq
 8008fa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008fa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008faa:	6010      	str	r0, [r2, #0]
 8008fac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008fb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008fb4:	f380 8811 	msr	BASEPRI, r0
 8008fb8:	f3bf 8f4f 	dsb	sy
 8008fbc:	f3bf 8f6f 	isb	sy
 8008fc0:	f7fe ffb6 	bl	8007f30 <vTaskSwitchContext>
 8008fc4:	f04f 0000 	mov.w	r0, #0
 8008fc8:	f380 8811 	msr	BASEPRI, r0
 8008fcc:	bc09      	pop	{r0, r3}
 8008fce:	6819      	ldr	r1, [r3, #0]
 8008fd0:	6808      	ldr	r0, [r1, #0]
 8008fd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fd6:	f01e 0f10 	tst.w	lr, #16
 8008fda:	bf08      	it	eq
 8008fdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008fe0:	f380 8809 	msr	PSP, r0
 8008fe4:	f3bf 8f6f 	isb	sy
 8008fe8:	4770      	bx	lr
 8008fea:	bf00      	nop
 8008fec:	f3af 8000 	nop.w

08008ff0 <pxCurrentTCBConst>:
 8008ff0:	200006f4 	.word	0x200006f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008ff4:	bf00      	nop
 8008ff6:	bf00      	nop

08008ff8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8008ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009002:	f383 8811 	msr	BASEPRI, r3
 8009006:	f3bf 8f6f 	isb	sy
 800900a:	f3bf 8f4f 	dsb	sy
 800900e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009010:	f7fe fed6 	bl	8007dc0 <xTaskIncrementTick>
 8009014:	4603      	mov	r3, r0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d003      	beq.n	8009022 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800901a:	4b06      	ldr	r3, [pc, #24]	; (8009034 <SysTick_Handler+0x3c>)
 800901c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009020:	601a      	str	r2, [r3, #0]
 8009022:	2300      	movs	r3, #0
 8009024:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800902c:	bf00      	nop
 800902e:	3708      	adds	r7, #8
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}
 8009034:	e000ed04 	.word	0xe000ed04

08009038 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009038:	b480      	push	{r7}
 800903a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800903c:	4b0b      	ldr	r3, [pc, #44]	; (800906c <vPortSetupTimerInterrupt+0x34>)
 800903e:	2200      	movs	r2, #0
 8009040:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009042:	4b0b      	ldr	r3, [pc, #44]	; (8009070 <vPortSetupTimerInterrupt+0x38>)
 8009044:	2200      	movs	r2, #0
 8009046:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009048:	4b0a      	ldr	r3, [pc, #40]	; (8009074 <vPortSetupTimerInterrupt+0x3c>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a0a      	ldr	r2, [pc, #40]	; (8009078 <vPortSetupTimerInterrupt+0x40>)
 800904e:	fba2 2303 	umull	r2, r3, r2, r3
 8009052:	099b      	lsrs	r3, r3, #6
 8009054:	4a09      	ldr	r2, [pc, #36]	; (800907c <vPortSetupTimerInterrupt+0x44>)
 8009056:	3b01      	subs	r3, #1
 8009058:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800905a:	4b04      	ldr	r3, [pc, #16]	; (800906c <vPortSetupTimerInterrupt+0x34>)
 800905c:	2207      	movs	r2, #7
 800905e:	601a      	str	r2, [r3, #0]
}
 8009060:	bf00      	nop
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr
 800906a:	bf00      	nop
 800906c:	e000e010 	.word	0xe000e010
 8009070:	e000e018 	.word	0xe000e018
 8009074:	20000000 	.word	0x20000000
 8009078:	10624dd3 	.word	0x10624dd3
 800907c:	e000e014 	.word	0xe000e014

08009080 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009080:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009090 <vPortEnableVFP+0x10>
 8009084:	6801      	ldr	r1, [r0, #0]
 8009086:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800908a:	6001      	str	r1, [r0, #0]
 800908c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800908e:	bf00      	nop
 8009090:	e000ed88 	.word	0xe000ed88

08009094 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009094:	b480      	push	{r7}
 8009096:	b085      	sub	sp, #20
 8009098:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800909a:	f3ef 8305 	mrs	r3, IPSR
 800909e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2b0f      	cmp	r3, #15
 80090a4:	d913      	bls.n	80090ce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80090a6:	4a16      	ldr	r2, [pc, #88]	; (8009100 <vPortValidateInterruptPriority+0x6c>)
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	4413      	add	r3, r2
 80090ac:	781b      	ldrb	r3, [r3, #0]
 80090ae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80090b0:	4b14      	ldr	r3, [pc, #80]	; (8009104 <vPortValidateInterruptPriority+0x70>)
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	7afa      	ldrb	r2, [r7, #11]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d209      	bcs.n	80090ce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80090ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090be:	f383 8811 	msr	BASEPRI, r3
 80090c2:	f3bf 8f6f 	isb	sy
 80090c6:	f3bf 8f4f 	dsb	sy
 80090ca:	607b      	str	r3, [r7, #4]
 80090cc:	e7fe      	b.n	80090cc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80090ce:	4b0e      	ldr	r3, [pc, #56]	; (8009108 <vPortValidateInterruptPriority+0x74>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80090d6:	4b0d      	ldr	r3, [pc, #52]	; (800910c <vPortValidateInterruptPriority+0x78>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d909      	bls.n	80090f2 <vPortValidateInterruptPriority+0x5e>
 80090de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e2:	f383 8811 	msr	BASEPRI, r3
 80090e6:	f3bf 8f6f 	isb	sy
 80090ea:	f3bf 8f4f 	dsb	sy
 80090ee:	603b      	str	r3, [r7, #0]
 80090f0:	e7fe      	b.n	80090f0 <vPortValidateInterruptPriority+0x5c>
	}
 80090f2:	bf00      	nop
 80090f4:	3714      	adds	r7, #20
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr
 80090fe:	bf00      	nop
 8009100:	e000e3f0 	.word	0xe000e3f0
 8009104:	20000d20 	.word	0x20000d20
 8009108:	e000ed0c 	.word	0xe000ed0c
 800910c:	20000d24 	.word	0x20000d24

08009110 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b08a      	sub	sp, #40	; 0x28
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009118:	2300      	movs	r3, #0
 800911a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800911c:	f7fe fd96 	bl	8007c4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009120:	4b59      	ldr	r3, [pc, #356]	; (8009288 <pvPortMalloc+0x178>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d101      	bne.n	800912c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009128:	f000 f910 	bl	800934c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800912c:	4b57      	ldr	r3, [pc, #348]	; (800928c <pvPortMalloc+0x17c>)
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	4013      	ands	r3, r2
 8009134:	2b00      	cmp	r3, #0
 8009136:	f040 808c 	bne.w	8009252 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d01c      	beq.n	800917a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009140:	2208      	movs	r2, #8
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	4413      	add	r3, r2
 8009146:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f003 0307 	and.w	r3, r3, #7
 800914e:	2b00      	cmp	r3, #0
 8009150:	d013      	beq.n	800917a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f023 0307 	bic.w	r3, r3, #7
 8009158:	3308      	adds	r3, #8
 800915a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f003 0307 	and.w	r3, r3, #7
 8009162:	2b00      	cmp	r3, #0
 8009164:	d009      	beq.n	800917a <pvPortMalloc+0x6a>
 8009166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800916a:	f383 8811 	msr	BASEPRI, r3
 800916e:	f3bf 8f6f 	isb	sy
 8009172:	f3bf 8f4f 	dsb	sy
 8009176:	617b      	str	r3, [r7, #20]
 8009178:	e7fe      	b.n	8009178 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d068      	beq.n	8009252 <pvPortMalloc+0x142>
 8009180:	4b43      	ldr	r3, [pc, #268]	; (8009290 <pvPortMalloc+0x180>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	429a      	cmp	r2, r3
 8009188:	d863      	bhi.n	8009252 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800918a:	4b42      	ldr	r3, [pc, #264]	; (8009294 <pvPortMalloc+0x184>)
 800918c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800918e:	4b41      	ldr	r3, [pc, #260]	; (8009294 <pvPortMalloc+0x184>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009194:	e004      	b.n	80091a0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009198:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800919a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80091a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d903      	bls.n	80091b2 <pvPortMalloc+0xa2>
 80091aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d1f1      	bne.n	8009196 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80091b2:	4b35      	ldr	r3, [pc, #212]	; (8009288 <pvPortMalloc+0x178>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d04a      	beq.n	8009252 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80091bc:	6a3b      	ldr	r3, [r7, #32]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2208      	movs	r2, #8
 80091c2:	4413      	add	r3, r2
 80091c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80091c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	6a3b      	ldr	r3, [r7, #32]
 80091cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80091ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d0:	685a      	ldr	r2, [r3, #4]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	1ad2      	subs	r2, r2, r3
 80091d6:	2308      	movs	r3, #8
 80091d8:	005b      	lsls	r3, r3, #1
 80091da:	429a      	cmp	r2, r3
 80091dc:	d91e      	bls.n	800921c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80091de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	4413      	add	r3, r2
 80091e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80091e6:	69bb      	ldr	r3, [r7, #24]
 80091e8:	f003 0307 	and.w	r3, r3, #7
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d009      	beq.n	8009204 <pvPortMalloc+0xf4>
 80091f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f4:	f383 8811 	msr	BASEPRI, r3
 80091f8:	f3bf 8f6f 	isb	sy
 80091fc:	f3bf 8f4f 	dsb	sy
 8009200:	613b      	str	r3, [r7, #16]
 8009202:	e7fe      	b.n	8009202 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009206:	685a      	ldr	r2, [r3, #4]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	1ad2      	subs	r2, r2, r3
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009216:	69b8      	ldr	r0, [r7, #24]
 8009218:	f000 f8fa 	bl	8009410 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800921c:	4b1c      	ldr	r3, [pc, #112]	; (8009290 <pvPortMalloc+0x180>)
 800921e:	681a      	ldr	r2, [r3, #0]
 8009220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	1ad3      	subs	r3, r2, r3
 8009226:	4a1a      	ldr	r2, [pc, #104]	; (8009290 <pvPortMalloc+0x180>)
 8009228:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800922a:	4b19      	ldr	r3, [pc, #100]	; (8009290 <pvPortMalloc+0x180>)
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	4b1a      	ldr	r3, [pc, #104]	; (8009298 <pvPortMalloc+0x188>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	429a      	cmp	r2, r3
 8009234:	d203      	bcs.n	800923e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009236:	4b16      	ldr	r3, [pc, #88]	; (8009290 <pvPortMalloc+0x180>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a17      	ldr	r2, [pc, #92]	; (8009298 <pvPortMalloc+0x188>)
 800923c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800923e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009240:	685a      	ldr	r2, [r3, #4]
 8009242:	4b12      	ldr	r3, [pc, #72]	; (800928c <pvPortMalloc+0x17c>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	431a      	orrs	r2, r3
 8009248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800924c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924e:	2200      	movs	r2, #0
 8009250:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009252:	f7fe fd09 	bl	8007c68 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d101      	bne.n	8009260 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800925c:	f7f7 f95a 	bl	8000514 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009260:	69fb      	ldr	r3, [r7, #28]
 8009262:	f003 0307 	and.w	r3, r3, #7
 8009266:	2b00      	cmp	r3, #0
 8009268:	d009      	beq.n	800927e <pvPortMalloc+0x16e>
 800926a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800926e:	f383 8811 	msr	BASEPRI, r3
 8009272:	f3bf 8f6f 	isb	sy
 8009276:	f3bf 8f4f 	dsb	sy
 800927a:	60fb      	str	r3, [r7, #12]
 800927c:	e7fe      	b.n	800927c <pvPortMalloc+0x16c>
	return pvReturn;
 800927e:	69fb      	ldr	r3, [r7, #28]
}
 8009280:	4618      	mov	r0, r3
 8009282:	3728      	adds	r7, #40	; 0x28
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}
 8009288:	20008d30 	.word	0x20008d30
 800928c:	20008d3c 	.word	0x20008d3c
 8009290:	20008d34 	.word	0x20008d34
 8009294:	20008d28 	.word	0x20008d28
 8009298:	20008d38 	.word	0x20008d38

0800929c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b086      	sub	sp, #24
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d046      	beq.n	800933c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80092ae:	2308      	movs	r3, #8
 80092b0:	425b      	negs	r3, r3
 80092b2:	697a      	ldr	r2, [r7, #20]
 80092b4:	4413      	add	r3, r2
 80092b6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	685a      	ldr	r2, [r3, #4]
 80092c0:	4b20      	ldr	r3, [pc, #128]	; (8009344 <vPortFree+0xa8>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4013      	ands	r3, r2
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d109      	bne.n	80092de <vPortFree+0x42>
 80092ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ce:	f383 8811 	msr	BASEPRI, r3
 80092d2:	f3bf 8f6f 	isb	sy
 80092d6:	f3bf 8f4f 	dsb	sy
 80092da:	60fb      	str	r3, [r7, #12]
 80092dc:	e7fe      	b.n	80092dc <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d009      	beq.n	80092fa <vPortFree+0x5e>
 80092e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ea:	f383 8811 	msr	BASEPRI, r3
 80092ee:	f3bf 8f6f 	isb	sy
 80092f2:	f3bf 8f4f 	dsb	sy
 80092f6:	60bb      	str	r3, [r7, #8]
 80092f8:	e7fe      	b.n	80092f8 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	685a      	ldr	r2, [r3, #4]
 80092fe:	4b11      	ldr	r3, [pc, #68]	; (8009344 <vPortFree+0xa8>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4013      	ands	r3, r2
 8009304:	2b00      	cmp	r3, #0
 8009306:	d019      	beq.n	800933c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d115      	bne.n	800933c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	685a      	ldr	r2, [r3, #4]
 8009314:	4b0b      	ldr	r3, [pc, #44]	; (8009344 <vPortFree+0xa8>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	43db      	mvns	r3, r3
 800931a:	401a      	ands	r2, r3
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009320:	f7fe fc94 	bl	8007c4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	685a      	ldr	r2, [r3, #4]
 8009328:	4b07      	ldr	r3, [pc, #28]	; (8009348 <vPortFree+0xac>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4413      	add	r3, r2
 800932e:	4a06      	ldr	r2, [pc, #24]	; (8009348 <vPortFree+0xac>)
 8009330:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009332:	6938      	ldr	r0, [r7, #16]
 8009334:	f000 f86c 	bl	8009410 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009338:	f7fe fc96 	bl	8007c68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800933c:	bf00      	nop
 800933e:	3718      	adds	r7, #24
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}
 8009344:	20008d3c 	.word	0x20008d3c
 8009348:	20008d34 	.word	0x20008d34

0800934c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800934c:	b480      	push	{r7}
 800934e:	b085      	sub	sp, #20
 8009350:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009352:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009356:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009358:	4b27      	ldr	r3, [pc, #156]	; (80093f8 <prvHeapInit+0xac>)
 800935a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f003 0307 	and.w	r3, r3, #7
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00c      	beq.n	8009380 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	3307      	adds	r3, #7
 800936a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f023 0307 	bic.w	r3, r3, #7
 8009372:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009374:	68ba      	ldr	r2, [r7, #8]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	1ad3      	subs	r3, r2, r3
 800937a:	4a1f      	ldr	r2, [pc, #124]	; (80093f8 <prvHeapInit+0xac>)
 800937c:	4413      	add	r3, r2
 800937e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009384:	4a1d      	ldr	r2, [pc, #116]	; (80093fc <prvHeapInit+0xb0>)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800938a:	4b1c      	ldr	r3, [pc, #112]	; (80093fc <prvHeapInit+0xb0>)
 800938c:	2200      	movs	r2, #0
 800938e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	68ba      	ldr	r2, [r7, #8]
 8009394:	4413      	add	r3, r2
 8009396:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009398:	2208      	movs	r2, #8
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	1a9b      	subs	r3, r3, r2
 800939e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f023 0307 	bic.w	r3, r3, #7
 80093a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	4a15      	ldr	r2, [pc, #84]	; (8009400 <prvHeapInit+0xb4>)
 80093ac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80093ae:	4b14      	ldr	r3, [pc, #80]	; (8009400 <prvHeapInit+0xb4>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2200      	movs	r2, #0
 80093b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80093b6:	4b12      	ldr	r3, [pc, #72]	; (8009400 <prvHeapInit+0xb4>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2200      	movs	r2, #0
 80093bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	68fa      	ldr	r2, [r7, #12]
 80093c6:	1ad2      	subs	r2, r2, r3
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80093cc:	4b0c      	ldr	r3, [pc, #48]	; (8009400 <prvHeapInit+0xb4>)
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	4a0a      	ldr	r2, [pc, #40]	; (8009404 <prvHeapInit+0xb8>)
 80093da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	4a09      	ldr	r2, [pc, #36]	; (8009408 <prvHeapInit+0xbc>)
 80093e2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80093e4:	4b09      	ldr	r3, [pc, #36]	; (800940c <prvHeapInit+0xc0>)
 80093e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80093ea:	601a      	str	r2, [r3, #0]
}
 80093ec:	bf00      	nop
 80093ee:	3714      	adds	r7, #20
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr
 80093f8:	20000d28 	.word	0x20000d28
 80093fc:	20008d28 	.word	0x20008d28
 8009400:	20008d30 	.word	0x20008d30
 8009404:	20008d38 	.word	0x20008d38
 8009408:	20008d34 	.word	0x20008d34
 800940c:	20008d3c 	.word	0x20008d3c

08009410 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009410:	b480      	push	{r7}
 8009412:	b085      	sub	sp, #20
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009418:	4b28      	ldr	r3, [pc, #160]	; (80094bc <prvInsertBlockIntoFreeList+0xac>)
 800941a:	60fb      	str	r3, [r7, #12]
 800941c:	e002      	b.n	8009424 <prvInsertBlockIntoFreeList+0x14>
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	60fb      	str	r3, [r7, #12]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	429a      	cmp	r2, r3
 800942c:	d8f7      	bhi.n	800941e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	68ba      	ldr	r2, [r7, #8]
 8009438:	4413      	add	r3, r2
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	429a      	cmp	r2, r3
 800943e:	d108      	bne.n	8009452 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	685a      	ldr	r2, [r3, #4]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	441a      	add	r2, r3
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	68ba      	ldr	r2, [r7, #8]
 800945c:	441a      	add	r2, r3
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	429a      	cmp	r2, r3
 8009464:	d118      	bne.n	8009498 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	4b15      	ldr	r3, [pc, #84]	; (80094c0 <prvInsertBlockIntoFreeList+0xb0>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	429a      	cmp	r2, r3
 8009470:	d00d      	beq.n	800948e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	685a      	ldr	r2, [r3, #4]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	441a      	add	r2, r3
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	681a      	ldr	r2, [r3, #0]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	601a      	str	r2, [r3, #0]
 800948c:	e008      	b.n	80094a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800948e:	4b0c      	ldr	r3, [pc, #48]	; (80094c0 <prvInsertBlockIntoFreeList+0xb0>)
 8009490:	681a      	ldr	r2, [r3, #0]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	601a      	str	r2, [r3, #0]
 8009496:	e003      	b.n	80094a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681a      	ldr	r2, [r3, #0]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80094a0:	68fa      	ldr	r2, [r7, #12]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d002      	beq.n	80094ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094ae:	bf00      	nop
 80094b0:	3714      	adds	r7, #20
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr
 80094ba:	bf00      	nop
 80094bc:	20008d28 	.word	0x20008d28
 80094c0:	20008d30 	.word	0x20008d30

080094c4 <__libc_init_array>:
 80094c4:	b570      	push	{r4, r5, r6, lr}
 80094c6:	4e0d      	ldr	r6, [pc, #52]	; (80094fc <__libc_init_array+0x38>)
 80094c8:	4c0d      	ldr	r4, [pc, #52]	; (8009500 <__libc_init_array+0x3c>)
 80094ca:	1ba4      	subs	r4, r4, r6
 80094cc:	10a4      	asrs	r4, r4, #2
 80094ce:	2500      	movs	r5, #0
 80094d0:	42a5      	cmp	r5, r4
 80094d2:	d109      	bne.n	80094e8 <__libc_init_array+0x24>
 80094d4:	4e0b      	ldr	r6, [pc, #44]	; (8009504 <__libc_init_array+0x40>)
 80094d6:	4c0c      	ldr	r4, [pc, #48]	; (8009508 <__libc_init_array+0x44>)
 80094d8:	f000 f82c 	bl	8009534 <_init>
 80094dc:	1ba4      	subs	r4, r4, r6
 80094de:	10a4      	asrs	r4, r4, #2
 80094e0:	2500      	movs	r5, #0
 80094e2:	42a5      	cmp	r5, r4
 80094e4:	d105      	bne.n	80094f2 <__libc_init_array+0x2e>
 80094e6:	bd70      	pop	{r4, r5, r6, pc}
 80094e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80094ec:	4798      	blx	r3
 80094ee:	3501      	adds	r5, #1
 80094f0:	e7ee      	b.n	80094d0 <__libc_init_array+0xc>
 80094f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80094f6:	4798      	blx	r3
 80094f8:	3501      	adds	r5, #1
 80094fa:	e7f2      	b.n	80094e2 <__libc_init_array+0x1e>
 80094fc:	080095f4 	.word	0x080095f4
 8009500:	080095f4 	.word	0x080095f4
 8009504:	080095f4 	.word	0x080095f4
 8009508:	080095f8 	.word	0x080095f8

0800950c <memcpy>:
 800950c:	b510      	push	{r4, lr}
 800950e:	1e43      	subs	r3, r0, #1
 8009510:	440a      	add	r2, r1
 8009512:	4291      	cmp	r1, r2
 8009514:	d100      	bne.n	8009518 <memcpy+0xc>
 8009516:	bd10      	pop	{r4, pc}
 8009518:	f811 4b01 	ldrb.w	r4, [r1], #1
 800951c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009520:	e7f7      	b.n	8009512 <memcpy+0x6>

08009522 <memset>:
 8009522:	4402      	add	r2, r0
 8009524:	4603      	mov	r3, r0
 8009526:	4293      	cmp	r3, r2
 8009528:	d100      	bne.n	800952c <memset+0xa>
 800952a:	4770      	bx	lr
 800952c:	f803 1b01 	strb.w	r1, [r3], #1
 8009530:	e7f9      	b.n	8009526 <memset+0x4>
	...

08009534 <_init>:
 8009534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009536:	bf00      	nop
 8009538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800953a:	bc08      	pop	{r3}
 800953c:	469e      	mov	lr, r3
 800953e:	4770      	bx	lr

08009540 <_fini>:
 8009540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009542:	bf00      	nop
 8009544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009546:	bc08      	pop	{r3}
 8009548:	469e      	mov	lr, r3
 800954a:	4770      	bx	lr
